<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cayley CookBook on Cayley-CookBook</title>
    <link>https://tombenke.github.io/cayley-cookbook/</link>
    <description>Recent content in Cayley CookBook on Cayley-CookBook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://tombenke.github.io/cayley-cookbook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/about/</guid>
      <description>About #  Nowadays, when we are talking about Artificial intelligence, we mostly think of Machine Learning, that is also called Statistical Learning. However we can achieve spectacular results via Machine Learning it has disadvantages too. It is quite cumbersome to analyze the results of learnings, and very difficult to reason for human beings.
Machine Learning is only one possible approach to implement Artificial Intelligence. The early period of AI researches, in the 50s and 60s the symbolic approach was the main direction.</description>
    </item>
    
    <item>
      <title>Create Store</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/create-store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/create-store/</guid>
      <description>Create Store #  Problem #  How can I create a store?
Solution #  Create an in-memory store:
package kbase import ( &amp;#34;github.com/cayleygraph/cayley&amp;#34; &amp;#34;log&amp;#34; ) // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } return store } </description>
    </item>
    
    <item>
      <title>Export Quads</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/quads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/quads/</guid>
      <description>Export Quads #  Problems #  How can I export my database to files, using standard representational format?
Solution #  This code creates a set of quads, then exports them into several formats:
See the full list of source code package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/cayleygraph/quad&amp;#34; &amp;#34;reflect&amp;#34; // Add some predefined vocabularies 	&amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func main() { // Create Quads about some people using Blank Nodes as references 	quadsWithBNodes := makeQuadsWithBNodes() // Take a look at the resulted quads 	printQuads(quadsWithBNodes) // Create Quads about some people using IRIs as references 	quadsWithIRIs := makeQuadsWithIRIs() // Take a look at the resulted quads 	printQuads(quadsWithIRIs) } func makeQuadsWithBNodes() []quad.</description>
    </item>
    
    <item>
      <title>Find All Vertices</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_vertices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_vertices/</guid>
      <description>Find All Vertices #  Problem #  How can I list all the nodes (subjects, predicates and objects) of the graph?
Test Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format &amp;lt;alice&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;fred&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;status&amp;gt; &amp;#34;cool_person&amp;#34; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;dani&amp;gt; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;greg&amp;gt; .</description>
    </item>
    
    <item>
      <title>Graph Based Data Model</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/graph-based-data-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/graph-based-data-model/</guid>
      <description>Graph Based Data Model #  When we build a knowledge-graph, then we create a conceptual model of a part of the real World.
A conceptual model is a model of a subject area or area of knowledge, sometimes called a domain.
A domain model typically represents:
 the primary entities (the things of the domain), the relationships among entities, the attributes and attribute values (sometimes called properties and property values) of the entities and the relationships, and sometimes rules that associate entities, relationships, and attributes (or all three) in more complicated ways.</description>
    </item>
    
    <item>
      <title>List Registered Namespaces</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/list-namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/list-namespaces/</guid>
      <description>List Registered Namespaces #  Problem #  I do not know which namespaces are registered currently in the database. How can I investigate what are these namespaces that I can/have to use?
Solution #  The following code fragment lists all the namespaces currently registered:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/cayleygraph/quad/voc&amp;#34; // Add some predefined vocabularies 	_ &amp;#34;github.com/cayleygraph/quad/voc/schema&amp;#34; _ &amp;#34;github.com/cayleygraph/quad/voc/xsd&amp;#34; _ &amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; _ &amp;#34;github.com/cayleygraph/quad/voc/rdfs&amp;#34; ) func main() { fmt.</description>
    </item>
    
    <item>
      <title>The `cayley convert` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-convert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-convert/</guid>
      <description>The cayley convert command #  We can convert knowledge-content files from one representation format to another with the cayley convert command.
  2. Ã¡bra: cayley convert   The following command converts the test data from n-quads format to JSON-LD format:
$ cayley convert --load data/testdata.nq --dump data/testdata.jsonld The next command below does the same conversion, but the results will be written to the standard output:
$ cayley convert --load data/testdata.</description>
    </item>
    
    <item>
      <title>Data import / export via struct annotation</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/schema/</guid>
      <description>Data import / export via struct annotation #  Structure annotations #  This section demonstrates how can we convert simple or complex objects and their properties to quads. it also shows how can we directly upload these data structures to the store, using the annotations placed into the struct declarations ob the objects. Moreover there are examples to the retrieval of these complex objects from the store.
Within this method it is much easier to store/retrieve complex data structures, than doing it directly with the quads that these data structures are made of, and collecting their properties one-by-one.</description>
    </item>
    
    <item>
      <title>Find All Predicates</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_predicates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_predicates/</guid>
      <description>Find All Predicates #  Problem #  How can I list all the predicates used in the graph?
Test Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format &amp;lt;alice&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;fred&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;status&amp;gt; &amp;#34;cool_person&amp;#34; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;dani&amp;gt; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;greg&amp;gt; . &amp;lt;dani&amp;gt; &amp;lt;status&amp;gt; &amp;#34;cool_person&amp;#34; .</description>
    </item>
    
    <item>
      <title>Make Quads</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/make-quads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/make-quads/</guid>
      <description>Make Quads #  Problem #  How can I create new quads in Go?
Solution #  Create Quads:
package main import ( &amp;#34;github.com/cayleygraph/quad&amp;#34; // Add some predefined vocabularies 	&amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally 	luke := quad.RandomBlankNode() leia := quad.IRI(&amp;#34;starwars:leia_organa&amp;#34;) //quad.RandomBlankNode()  // Create Quads about to export 	label := &amp;#34;people&amp;#34; quads := []quad.Quad{} quads = append(quads, quad.</description>
    </item>
    
    <item>
      <title>Register a New Namespace</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/register-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/register-namespace/</guid>
      <description>Register a New Namespace #  Problem #  I need a new namespace, how can I create one?
Solution #  The next code registers a new namespace:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/cayleygraph/quad/voc&amp;#34; // Add built-in vocabulary 	_ &amp;#34;github.com/cayleygraph/quad/voc/rdfs&amp;#34; // Add own vocabulary 	_ &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func init() { // Register a new namespace with prefix 	voc.RegisterPrefix(`acc:`, `http://mycompany.com/voc/accounting#`) } func main() { fmt.Println(&amp;#34;Registered namespaces:&amp;#34;) for _, v := range voc.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/resources/</guid>
      <description>Resources #  Resource #  The resource is a generic term, that we use both on the normal web and in the domain of semantic web. We usually mean a tangible or an abstract thing.
A resource has two important properties:
 it has unique identity, it can be represented (described in a way that holds each relevant properties of the resource).  Taken into consideration these two properties, we can say that the resource is compatible with the entity term of the Domain Driven Design methodology.</description>
    </item>
    
    <item>
      <title>The `cayley init` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-init/</guid>
      <description>The cayley init command #  We can create an empty database with the cayley init command.
  Figure 1.: cayley init   The following command will create a persistent database, using the Bolt key-value store type, in the /home/tombenke/tmp/cayleydb folder:
$ cayley init --db bolt --dbpath /home/tombenke/tmp/cayleydb I0915 17:52:56.529687 24933 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0915 17:52:56.529904 24933 database.go:187] using backend &amp;#34;bolt&amp;#34; (/home/tombenke/tmp/cayleydb) The resulted database can be used by the other commands, such as: load, dump, repl, query and http.</description>
    </item>
    
    <item>
      <title>Bi-directional Relations</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bidirectional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bidirectional/</guid>
      <description>Bi-directional Relations #  Problem #  If I have a graph: A &amp;lt;-1-&amp;gt; B &amp;lt;-2-&amp;gt; C where A, B, C are subjects and objects linked with predicates 1, 2 (bidirectional). How can I get C using a path?
Test data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format &amp;lt;A&amp;gt; &amp;lt;predicate-1&amp;gt; &amp;lt;B&amp;gt; . &amp;lt;B&amp;gt; &amp;lt;predicate-1&amp;gt; &amp;lt;A&amp;gt; . &amp;lt;B&amp;gt; &amp;lt;predicate-2&amp;gt; &amp;lt;C&amp;gt; .</description>
    </item>
    
    <item>
      <title>Create a New Vocabulary</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/vocabularies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/vocabularies/</guid>
      <description>Create a New Vocabulary #  Problem #  I want to create my own vocabulary to the domain I am working with. I want to use the terms defined by this vocabulary in my Go code, to make it simpler, and more readable. How can I create and register such a new vocabulary?
Solution #  The following code demonstrates how can a new vocabulary be defined. The foaf.go package defines the most frequently used terms of the FOAF Vocabulary Specification.</description>
    </item>
    
    <item>
      <title>List all nodes from store</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-nodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-nodes/</guid>
      <description>List all nodes from store #  Problem #  How can I retrieve and print all nodes from the store?
Solution #  Create Test Data: #  package main import ( &amp;#34;github.com/cayleygraph/quad&amp;#34; // Add some predefined vocabularies 	&amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally 	luke := quad.RandomBlankNode() leia := quad.IRI(&amp;#34;starwars:leia_organa&amp;#34;) //quad.RandomBlankNode()  // Create Quads about to export 	label := &amp;#34;people&amp;#34; quads := []quad.</description>
    </item>
    
    <item>
      <title>Statements</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/statements/</guid>
      <description>Statements #  Subject, Predicate Object #  We use statements of facts to define knowledge. In general, we usually use declarative sentences to make statements of facts.
For example:
Luke Skywalker is 23 years old. or, in other words:
Luke Skywalker has age 23. It is possible to convert these declarative sentences into a subject-predicate-object structure.
Luke-Skywalker has-age 23. The parts of this sentence:
 subject: Luke-Skywalker, predicate: has-age, object: 23.</description>
    </item>
    
    <item>
      <title>The `cayley load` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-load/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-load/</guid>
      <description>The cayley load command #  The cayley load command loads resource descriptions into an existing database.
  Figure 1.: cayley load   The following command loads the content of the data/testdata.nq file into a previously created database:
$ cayley load --db bolt --dbpath /home/tombenke/tmp/cayley/ --load data/testdata.nq I0915 18:01:07.140303 25803 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0915 18:01:07.140500 25803 database.go:187] using backend &amp;#34;bolt&amp;#34; (/home/tombenke/tmp/cayley/) </description>
    </item>
    
    <item>
      <title>Find nodes by pattern matching</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/filter/</guid>
      <description>Find nodes by pattern matching #  Problem #  How can I find nodes by pattern matching? For example, how can I find all movies with title that has the &amp;quot;.*Lord of.*&amp;quot; pattern?
Solution #  Gizmo Query with regex() #  g.V().Has(&amp;#34;&amp;lt;type&amp;gt;&amp;#34;,&amp;#34;&amp;lt;/film/film&amp;gt;&amp;#34;).Out(&amp;#34;&amp;lt;name&amp;gt;&amp;#34;).Filter(like(&amp;#34;%Lord of %&amp;#34;)).All() Results:
{&amp;#34;id&amp;#34;:&amp;#34;Greystoke - The Legend of Tarzan, Lord of the Apes&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;Lord of Illusions&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;Lord of the Beans&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;Lord of the Flies&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;Lord of War&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;Phantasm III: Lord of the Dead&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;The Lord of the Rings&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;The Lord of the Rings: The Fellowship of the Ring&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;The Lord of the Rings: The Return of the King&amp;#34;} {&amp;#34;id&amp;#34;:&amp;#34;The Lord of the Rings: The Two Towers&amp;#34;} Gizmo Query with like() #  g.</description>
    </item>
    
    <item>
      <title>List all quads from store</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-quads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-quads/</guid>
      <description>List all quads from store #  Problem #  How can I retrieve and print all quads from the store?
Solution #  Retrieve and list all quads from the store: #  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;reflect&amp;#34; &amp;#34;context&amp;#34; &amp;#34;github.com/cayleygraph/cayley&amp;#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.</description>
    </item>
    
    <item>
      <title>The `cayley dump` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-dump/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-dump/</guid>
      <description>The cayley dump command #  The cayley dump command reads out the resource descriptions from an existing database and write that into a file or to the standard output. The format type is determined by the given file extension, but it is also can be selected by the --dump_format &amp;lt;format-name&amp;gt; argument, where the possible values of &amp;lt;format-name&amp;gt; are: &amp;ldquo;gml&amp;rdquo;, &amp;ldquo;graphml&amp;rdquo;, &amp;ldquo;graphviz&amp;rdquo;, &amp;ldquo;json&amp;rdquo;, &amp;ldquo;json-stream&amp;rdquo;, &amp;ldquo;jsonld&amp;rdquo;, &amp;ldquo;nquads&amp;rdquo;, &amp;ldquo;pquads&amp;rdquo;.
  Figure 1.</description>
    </item>
    
    <item>
      <title>Vocabularies</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/vocabularies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/vocabularies/</guid>
      <description>Vocabularies #  Vocabulary #  One of the big advantages of using knowledge-graphs is that the domain knowledge of the subject area is represented and manipulated in the symbolic space, so it is relatively easy to understand for human beings. What is even more important, it is possible to obviously identify and transmit concepts among the information processing agents, whether they are humans or computers. This way the mapping of tangible physical things, and abstract concepts are possible without misunderstanding.</description>
    </item>
    
    <item>
      <title>Knowledge-Graph Representations</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/rdf-graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/rdf-graphs/</guid>
      <description>Knowledge-Graph Representations #  In the previous sections we described, how can we make statements of facts by the application of resources, predicates and literal values. These statements are named triples.
We also introduced the concept of IRI, that makes possible to write unambiguous statements in standardized format, that are generally applicable. This way we have a simple solution to define the nodes and edges of the knowledge graph, including their labels, by the use of a plain text editor.</description>
    </item>
    
    <item>
      <title>The `cayley repl` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-repl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-repl/</guid>
      <description>The cayley repl command #  The REPL is the acronym of Read-Eval-Print-Loop. We can use the cayley repl command to open a console to an existing database, and interactively execute queries and other operations on the database.
The console works similar to a normal Linux console. We can type in the expressions, then press the Enter, and the interpreter will execute, then prints the results. It is also possible to use the up/down arrows to navigate among the previously entered commands.</description>
    </item>
    
    <item>
      <title>Find bookmarks by tags</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bookmarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bookmarks/</guid>
      <description>Find bookmarks by tags #  Run the program: 
cd schema go run find_bookmarks_by_tags.go yamlImpex.go store.go bookmarks.go The output of the program:
Show the results Results of finding any of `nosql` or `gremlin` tags: - &amp;#34;Ontotext GraphDB&amp;#34; [graphdb nosql knowledge-graph linked-data semantic-web rdf] https://ontotext.com/products/graphdb/ - &amp;#34;Gremlin&amp;#39;s Graph Traversal Machinery&amp;#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery Results of finding every tags of `cayley` or `gremlin`: - &amp;#34;Gremlin&amp;#39;s Graph Traversal Machinery&amp;#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.</description>
    </item>
    
    <item>
      <title>The `cayley query` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-query/</guid>
      <description>The cayley query command #  With the cayley query we can run a query expression on an existing database.
The query that we want to execute can be forwarded to the command through the standard input. The simpler expressions we can directly put into the command line via the echo utility, the longer ones we&amp;rsquo;d better put into query files, then forward the via the cat utility.
We can select the query language type by the --lang &amp;lt;query-language-type&amp;gt; parameter, where the possible values for the query language are: &amp;ldquo;gizmo&amp;rdquo;, &amp;ldquo;graphql&amp;rdquo;, &amp;ldquo;mql&amp;rdquo;, &amp;ldquo;sexp&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The `cayley http` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-http/</guid>
      <description>The cayley http command #  Maybe the cayley http is the most well known, and most frequently used cayley command. It is an application, which contains the quad-store, the query engines and a HTTP server, that provides all of the functionalities through a REST API for utilities and 3rd-party applications, as well as provides a web-based graphical UI for the end users.
The Figure 1. shows all the components that can be used together with the Cayley running in the cayley http mode.</description>
    </item>
    
  </channel>
</rss>
