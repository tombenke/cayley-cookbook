<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cayley CookBook on Cayley-CookBook</title>
    <link>https://tombenke.github.io/cayley-cookbook/</link>
    <description>Recent content in Cayley CookBook on Cayley-CookBook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://tombenke.github.io/cayley-cookbook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/about/</guid>
      <description>About #  Nowadays, when we are talking about Artificial intelligence, we mostly think of Machine Learning, that is also called Statistical Learning. However we can achieve spectacular results via Machine Learning it has disadvantages too. It is quite cumbersome to analyze the results of learnings, and very difficult to reason for human beings.
Machine Learning is only one possible approach to implement Artificial Intelligence. The early period of AI researches, in the 50s and 60s the symbolic approach was the main direction.</description>
    </item>
    
    <item>
      <title>Create Store</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/create-store/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/create-store/</guid>
      <description>Create Store #  Problem #  How can I create a store?
In-memory store creation #  package kbase import ( &amp;#34;github.com/cayleygraph/cayley&amp;#34; &amp;#34;log&amp;#34; ) // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } return store } </description>
    </item>
    
    <item>
      <title>Find All Vertices</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_vertices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_vertices/</guid>
      <description>Find All Vertices #  Problem #  How can I list all the nodes (subjects, predicates and objects) of the graph?
Test Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format &amp;lt;alice&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;fred&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;status&amp;gt; &amp;#34;cool_person&amp;#34; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;dani&amp;gt; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;greg&amp;gt; .</description>
    </item>
    
    <item>
      <title>Graph Based Data Model</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/graph-based-data-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/graph-based-data-model/</guid>
      <description>Graph Based Data Model #  When we build a knowledge-graph, then we build a conceptual model of a part of the real World.
A conceptual model is a model of a subject area or area of knowledge, sometimes called a domain.
A domain model typically represents:
 the primary entities (the things of the domain), the relationships among entities, the attributes and attribute values (sometimes called properties and property values) of the entities and the relationships, and sometimes rules that associate entities, relationships, and attributes (or all three) in more complicated ways.</description>
    </item>
    
    <item>
      <title>List Registered Namespaces</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/list-namespaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/list-namespaces/</guid>
      <description>List Registered Namespaces #  The following code fragment lists all the namespaces currently registered:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/cayleygraph/quad/voc&amp;#34; // Add some predefined vocabularies 	_ &amp;#34;github.com/cayleygraph/quad/voc/schema&amp;#34; _ &amp;#34;github.com/cayleygraph/quad/voc/xsd&amp;#34; _ &amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; _ &amp;#34;github.com/cayleygraph/quad/voc/rdfs&amp;#34; ) func main() { fmt.Println(&amp;#34;Registered namespaces:&amp;#34;); for _, v := range voc.List() { fmt.Printf(&amp;#34; %s =&amp;gt; %s\n&amp;#34;, v.Prefix, v.Full); } } 
cd namespaces go run list_namespaces.go` The results:
Registered namespaces: schema: =&amp;gt; http://schema.org/  xsd: =&amp;gt; http://www.</description>
    </item>
    
    <item>
      <title>Quads export</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/quads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/quads/</guid>
      <description>Quads #  This code creates a set of quads, then exports them into several formats:
See the full list of source code package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/cayleygraph/quad&amp;#34; &amp;#34;reflect&amp;#34; // Add some predefined vocabularies 	&amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func main() { // Create Quads about some people using Blank Nodes as references 	quadsWithBNodes := makeQuadsWithBNodes() // Take a look at the resulted quads 	printQuads(quadsWithBNodes) // Create Quads about some people using IRIs as references 	quadsWithIRIs := makeQuadsWithIRIs() // Take a look at the resulted quads 	printQuads(quadsWithIRIs) } func makeQuadsWithBNodes() []quad.</description>
    </item>
    
    <item>
      <title>The `cayley http` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-http/</guid>
      <description>The cayley http command #    Figure 1.: cayley http   </description>
    </item>
    
    <item>
      <title>Data import / export via struct annotation</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/impex/schema/</guid>
      <description>Data import / export via struct annotation #  Structure annotations #  This section demonstrates how can we convert simple or complex objects and their properties to quads. it also shows how can we directly upload these data structures to the store, using the annotations placed into the struct declarations ob the objects. Moreover there are examples to the retrieval of these complex objects from the store.
Within this method it is much easier to store/retrieve complex data structures, than doing it directly with the quads that these data structures are made of, and collecting their properties one-by-one.</description>
    </item>
    
    <item>
      <title>Find All Predicates</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_predicates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/find_all_predicates/</guid>
      <description>Find All Predicates #  Problem #  How can I list all the predicates used in the graph?
Test Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format &amp;lt;alice&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;fred&amp;gt; . &amp;lt;bob&amp;gt; &amp;lt;status&amp;gt; &amp;#34;cool_person&amp;#34; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;bob&amp;gt; . &amp;lt;charlie&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;dani&amp;gt; . &amp;lt;dani&amp;gt; &amp;lt;follows&amp;gt; &amp;lt;greg&amp;gt; . &amp;lt;dani&amp;gt; &amp;lt;status&amp;gt; &amp;#34;cool_person&amp;#34; .</description>
    </item>
    
    <item>
      <title>Make Quads</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/make-quads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/make-quads/</guid>
      <description>Make Quads #  Problem #  How can I crate new quads?
Create Quads #  package main import ( &amp;#34;github.com/cayleygraph/quad&amp;#34; // Add some predefined vocabularies 	&amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally 	luke := quad.RandomBlankNode() leia := quad.IRI(&amp;#34;starwars:leia_organa&amp;#34;) //quad.RandomBlankNode()  // Create Quads about to export 	label := &amp;#34;people&amp;#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.</description>
    </item>
    
    <item>
      <title>Register a New Namespace</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/register-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/register-namespace/</guid>
      <description>Register a New Namespace #  The next code registers a new namespace:
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/cayleygraph/quad/voc&amp;#34; // Add built-in vocabulary 	_ &amp;#34;github.com/cayleygraph/quad/voc/rdfs&amp;#34; // Add own vocabulary 	_ &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func init() { // Register a new namespace with prefix 	voc.RegisterPrefix(`acc:`, `http://mycompany.com/voc/accounting#`) } func main() { fmt.Println(&amp;#34;Registered namespaces:&amp;#34;) for _, v := range voc.List() { fmt.Printf(&amp;#34; %s =&amp;gt; %s\n&amp;#34;, v.Prefix, v.Full) } } 
cd namespaces go run register_namespace.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/resources/</guid>
      <description>Resources #  Resource #  The resource is a generic term, that we use both on the normal web and in the domain of semantic web. We usually mean a tangible or an abstract thing.
A resource has two important properties:
 it has unique identity, it can be represented (described in a way that holds each relevant properties of the resource).  Taken into consideration these two properties, we can say that the resource is compatible with the entity term of the Domain Driven Design methodology.</description>
    </item>
    
    <item>
      <title>The `cayley convert` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-convert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-convert/</guid>
      <description>The cayley convert command #    Figure 2.: cayley convert   </description>
    </item>
    
    <item>
      <title>Bi-directional Relations</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bidirectional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bidirectional/</guid>
      <description>Bi-directional Relations #  Problem #  If I have a graph: A &amp;lt;-1-&amp;gt; B &amp;lt;-2-&amp;gt; C where A, B, C are subjects and objects linked with predicates 1, 2 (bidirectional). How can I get C using a path?
Test data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format &amp;lt;A&amp;gt; &amp;lt;predicate-1&amp;gt; &amp;lt;B&amp;gt; . &amp;lt;B&amp;gt; &amp;lt;predicate-1&amp;gt; &amp;lt;A&amp;gt; . &amp;lt;B&amp;gt; &amp;lt;predicate-2&amp;gt; &amp;lt;C&amp;gt; .</description>
    </item>
    
    <item>
      <title>Create a New Vocabulary</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/vocabularies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/ns-voc/vocabularies/</guid>
      <description>Create a New Vocabulary #  The following code demonstrates how can a new vocabulary be defined. The foaf.go package defines the most frequently used terms of the FOAF Vocabulary Specification. This package is used by several other examples of the cookbook as a vocabulary to use some terms as predicates.
// Package foaf contains constants of the FOAF Concepts Vocabulary (RDF) package foaf import &amp;#34;github.com/cayleygraph/quad/voc&amp;#34; func init() { voc.RegisterPrefix(Prefix, NS) } const ( NS = `http://xmlns.</description>
    </item>
    
    <item>
      <title>List all nodes from store</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-nodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-nodes/</guid>
      <description>List all nodes from store #  Problem #  How can I retrieve and print all nodes from the store?
Test Data #  package main import ( &amp;#34;github.com/cayleygraph/quad&amp;#34; // Add some predefined vocabularies 	&amp;#34;github.com/cayleygraph/quad/voc/rdf&amp;#34; &amp;#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf&amp;#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally 	luke := quad.RandomBlankNode() leia := quad.IRI(&amp;#34;starwars:leia_organa&amp;#34;) //quad.RandomBlankNode()  // Create Quads about to export 	label := &amp;#34;people&amp;#34; quads := []quad.</description>
    </item>
    
    <item>
      <title>Statements</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/statements/</guid>
      <description>Statements #  Statements or assertions
 Related pages: </description>
    </item>
    
    <item>
      <title>The `cayley repl` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-repl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-repl/</guid>
      <description>The cayley repl command #    Figure 3.: cayley repl   </description>
    </item>
    
    <item>
      <title>List all quads from store</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-quads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/print-all-quads/</guid>
      <description>List all quads from store #  Problem #  How can I retrieve and print all quads from the store?
Retrieve and list all quads from the store: #  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;reflect&amp;#34; &amp;#34;context&amp;#34; &amp;#34;github.com/cayleygraph/cayley&amp;#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.</description>
    </item>
    
    <item>
      <title>The `cayley query` command</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/cayley-overview/cayley-query/</guid>
      <description>The cayley query command #    Figure 4.: cayley query   </description>
    </item>
    
    <item>
      <title>Vocabularies</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/vocabularies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/vocabularies/</guid>
      <description>Vocabularies #   Related pages:   Create a New Vocabulary     List Registered Namespaces     Register a New Namespace   </description>
    </item>
    
    <item>
      <title>Rdf Graphs</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/rdf-graphs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/basic-concepts/rdf-graphs/</guid>
      <description>Rdf Graphs #  </description>
    </item>
    
    <item>
      <title>The internal representation of nodes and quads</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/stores/internals/</guid>
      <description>The internal representation of nodes and quads #    Figure 1.: Internal Representation   </description>
    </item>
    
    <item>
      <title>Find bookmarks by tags</title>
      <link>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bookmarks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tombenke.github.io/cayley-cookbook/docs/working-with-cayley/queries/bookmarks/</guid>
      <description>Find bookmarks by tags #  Run the program: 
cd schema go run find_bookmarks_by_tags.go yamlImpex.go store.go bookmarks.go The output of the program:
Show the results Results of finding any of `nosql` or `gremlin` tags: - &amp;#34;Ontotext GraphDB&amp;#34; [graphdb nosql knowledge-graph linked-data semantic-web rdf] https://ontotext.com/products/graphdb/ - &amp;#34;Gremlin&amp;#39;s Graph Traversal Machinery&amp;#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery Results of finding every tags of `cayley` or `gremlin`: - &amp;#34;Gremlin&amp;#39;s Graph Traversal Machinery&amp;#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.</description>
    </item>
    
  </channel>
</rss>