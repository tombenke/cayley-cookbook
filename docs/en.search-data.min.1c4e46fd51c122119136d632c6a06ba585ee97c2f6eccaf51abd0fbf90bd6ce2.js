'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/cayley-cookbook/docs/about/','title':"About",'section':"Docs",'content':"About #  Nowadays, when we are talking about Artificial intelligence, we mostly think of Machine Learning, that is also called Statistical Learning. However we can achieve spectacular results via Machine Learning it has disadvantages too. It is quite cumbersome to analyze the results of learnings, and very difficult to reason for human beings.\nMachine Learning is only one possible approach to implement Artificial Intelligence. The early period of AI researches, in the 50s and 60s the symbolic approach was the main direction. Its advantage against the ML approach is that the results of learnings a possible to read and understand. The harvested knowledge, and the whole reasoning process can be described and managed via traditional programming tools. The so called Semantic Web technologies can be classified into this symbolic category.\nA big disadvantage of these symbolic approaches that it requires extremely big computational capacity, and resources in case we are willing to build up intelligence that tries to approximate the level of human intelligence. It is close to impossible to create and efficiently operate systems that reach this level.\nNevertheless, in order to create really intelligent system, that comparable to human intelligence, we have to rely on two fundamental capabilities:\n The capability of the system for both supervised and un-supervised learning, A technology, which makes possible the conversion of the knowledge internally represented in the \u0026ldquo;brain\u0026rdquo; of the artificial system into the symbolic space, to a representational format, that humans can understand and modify.  A Semantic Web, and the Graph Databases provide a very good basis for the symbolic representation and management of knowledge. The Google Knowledge-Graph can be classified here, which inspired the development of the Cayley system.\nThis cook-book applies a fundamentally practical approach to this topic.\nIt does not want to give a detailed, precise analysis of the above mentioned theories and technologies. It focuses exclusively on those basic terms that are inevitable to know to use Cayley .\nThe content is divided to the following main parts:\n The \u0026ldquo;Basic Concepts\u0026rdquo; chapter gives a brief introduction to the most important subjects, that are required to be able to use Cayley . The \u0026ldquo;Cayley overview\u0026rdquo; chapter helps you find your way among the components the Cayley \u0026ldquo;ecosystem\u0026rdquo; is build-upon. It also gives some examples about how to use these system components, and where can we find documentation to them. The \u0026ldquo;Working with Cayley\u0026rdquo; chapter is the most important part of the cook-book. it demonstrates with the usage of the Cayley system with examples, and source code, that you can run. Each section begins with the basics of the given topic, and follows towards the more advanced cases.  "});index.add({'id':1,'href':'/cayley-cookbook/docs/working-with-cayley/stores/create-store/','title':"Create Store",'section':"Stores",'content':"Create Store #  Problem #  How can I create a store?\nIn-memory store creation #  package kbase import ( \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;log\u0026#34; ) // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } return store } "});index.add({'id':2,'href':'/cayley-cookbook/docs/working-with-cayley/graph-discovery/','title':"Discover and unknown graph",'section':"Working with Knowledge Graph",'content':"Problem: #  How can I execute queries in an unknown graph (e.g. the sample film database), if I do not know its internal structure?\nSolution #  In the following we will go through a possible sequence of steps of analysis. At the end of the process, we will be able to query or modify the unknown graph. We do not need to know anything about this graph. At the same time, we suppose that this unknown graph is not made of randomly created and connected nodes, but it has it own \u0026ldquo;system\u0026rdquo;. At least at the theoretical level, there is a virtual schema of it, and the predicates used in the graph follow some naming conventions, and they were created among some logic, that may refer to their meaning and roles.\nWe will visualize the schema on a diagram, step-by-step as we move forward on the process of analysis. We will draw with yellow color those IRIs that we know their actual IDs. The literal nodes will be drawn with green color including the name of the type. The unknown nodes will be drawn with blue color, and we will assign a variable name to them.\nStep 0.: Start the REPL with the database #  Let\u0026rsquo;s start the REPL console of Cayley -t using an in-memory database, immediately loading the data to be investigated:\n$ cayley repl --load data/30kmoviedata.nq.gz I0917 19:12:42.483992 18114 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0917 19:12:42.484240 18114 database.go:187] using backend \u0026#34;memstore\u0026#34; I0917 19:12:46.897340 18114 database.go:250] loaded \u0026#34;data/30kmoviedata.nq.gz\u0026#34; in 4.413006871s cayley\u0026gt; In the followings we will use this utility to execute the steps of the analysis.\nStep 1.: Find all the predicates used in the graph #  The following query finds all outgoing predicates, starting from the set of all nodes in the graph. Then it also collects all incoming predicates as well, finally creates the union of the two result sets. In order to have each predicate, only once, it also executes the Unique() operation on the union set:\ncayley\u0026gt; g.V().OutPredicates().Union(g.V().InPredicates()).Unique().All(); **** id : \u0026lt;/film/performance/actor\u0026gt; **** id : \u0026lt;name\u0026gt; **** id : \u0026lt;type\u0026gt; **** id : \u0026lt;/film/performance/character\u0026gt; **** id : \u0026lt;/film/film/directed_by\u0026gt; **** id : \u0026lt;/film/film/starring\u0026gt; ----------- 6 Results Elapsed time: 720.486208 ms In the results we can see that these are the predicates that used in the graph:\n \u0026lt;/film/performance/actor\u0026gt; \u0026lt;name\u0026gt; \u0026lt;type\u0026gt; \u0026lt;/film/performance/character\u0026gt; \u0026lt;/film/film/directed_by\u0026gt; \u0026lt;/film/film/starring\u0026gt;  Try to visualize an initial schema that holds the collected info, that we will gradually extend as we discover the graph step-by-step. The Figure 1. shows the diagram.\n  Figure 1.: The predicates of the database   Step 2.: Form predicate groups according to their co-occurrence #  Let\u0026rsquo;s identify those predicates based on their co-occurrence on nodes, and form groups out of these predicates.\nStep 2.1.: Aggregate the outgoing predicates #  First collect those outgoing predicates, that have their inbound leg on the same node.\ncayley\u0026gt; g.V().In(\u0026#34;\u0026lt;/film/performance/actor\u0026gt;\u0026#34;).OutPredicates().All() **** id : \u0026lt;/film/performance/actor\u0026gt; **** id : \u0026lt;/film/performance/character\u0026gt; ----------- 2 Results Elapsed time: 174.893162 ms The result list shows that the \u0026lt;/film/performance/actor\u0026gt; and the \u0026lt;/film/performance/character\u0026gt; predicates belong to the same group, so it is very probable that usually the connect to the same node types as outbound predicates.\nWe have to gain the same result, whichever predicate from this group we use for the same type of query:\ncayley\u0026gt; g.V().In(\u0026#34;\u0026lt;/film/performance/character\u0026gt;\u0026#34;).OutPredicates().All() **** id : \u0026lt;/film/performance/actor\u0026gt; **** id : \u0026lt;/film/performance/character\u0026gt; ----------- 2 Results Elapsed time: 45.116628 ms Continue with the next predicate, that does not belong to this group, that we have just identified:\ncayley\u0026gt; g.V().In(\u0026#34;\u0026lt;name\u0026gt;\u0026#34;).OutPredicates().All() **** id : \u0026lt;name\u0026gt; **** id : \u0026lt;type\u0026gt; **** id : \u0026lt;/film/film/directed_by\u0026gt; **** id : \u0026lt;/film/film/starring\u0026gt; ----------- 4 Results Elapsed time: 178.340908 ms We could identify another group that contains all the remaining predicates. This way we have grouped all outgoing the predicates contained by the graph.\nNow assign these predicates to node variables, according to their grouping, and put them to the graph diagram, as we can see on Figure 2.\n  figure 2.: Outgoing predicates grouped by their co-occurrence   Step 2.2: Aggregate the incoming predicates #  Let\u0026rsquo;s crawl on the predicates that arrive as incoming edge to the previously discovered nodes, and assign them to these node variables.\nIn order to identify these incoming predicates, let\u0026rsquo;s iterate through each items of the grouped outgoing predicates, and check their co-occurrences. We can do this by executing the following series of queries:\ncayley\u0026gt; g.V().In(\u0026#34;\u0026lt;/film/performance/actor\u0026gt;\u0026#34;).InPredicates().All() **** id : \u0026lt;/film/film/starring\u0026gt; ----------- 1 Result Elapsed time: 190.712052 ms cayley\u0026gt; g.V().In(\u0026#34;\u0026lt;/film/performance/character\u0026gt;\u0026#34;).InPredicates().All() **** id : \u0026lt;/film/film/starring\u0026gt; ----------- 1 Result Elapsed time: 42.079836 ms cayley\u0026gt; g.V().In(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;).InPredicates().All() **** id : \u0026lt;/film/performance/actor\u0026gt; **** id : \u0026lt;/film/film/directed_by\u0026gt; ----------- 2 Results Elapsed time: 149.433856 ms cayley\u0026gt; g.V().In(\u0026#34;\u0026lt;film/film/directed_by\u0026gt;\u0026#34;).InPredicates().All() In this latter case, there is no co-occurrence found.\ncayley\u0026gt; g.V().In(\u0026#34;\u0026lt;film/film/starring\u0026gt;\u0026#34;).InPredicates().All() and neither in this case.\nPut the results of these queries onto the schema diagram as inbound edges, connecting to the corresponding node variables, as we can see on Figure 3.\n  Figure 3.: Incoming and outgoing predicates grouped by their co-occurrence   Merge the incoming and outgoing predicate groups #  Merge the results sets as well as the schema diagram, according to the Figure 4.\n  Figure 4.: The co-occurring predicates.   Important note:\nThe x and y node variables are not necessarily represent only one individual node type, because we put every inbound and outbound predicates into single groups.\n Step 3.: Find the terminal nodes #  The terminal nodes are the ones that has no more outgoing predicate to other nodes.\nLet\u0026rsquo;s study for each predicate that what kind of node it goes to.\nStart with the \u0026lt;/film/performance/character\u0026gt; predicate:\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;/film/performance/character\u0026gt;\u0026#34;).All() **** id : Luther Krank **** id : Roland **** id : Tomás de Torquemada **** id : Ferdinand VII of Spain **** id : Christopher Columbus ... Only the first 100 items of the result list will be printed by default. We can see that the results are string literals, the character names of the films.\nCount their number:\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;/film/performance/character\u0026gt;\u0026#34;).Count() =\u0026gt; 15058 ----------- 1 Result Elapsed time: 15.394561 ms Now let\u0026rsquo;s check, if there is any predicate that goes further from any of these nodes:\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;/film/performance/character\u0026gt;\u0026#34;).Out().Count() =\u0026gt; 0 ----------- 1 Result Elapsed time: 65.014376 ms The number of such nodes are 0, so these are terminal nodes, since they have no outgoing connections.\nNow do the same operation with the \u0026lt;name\u0026gt; predicate:\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;name\u0026gt;\u0026#34;).All() **** id : David Fisher **** id : 002 Operazione Luna **** id : 008: Operation Exterminate **** id : 02:37:00 AM **** id : 06/05 **** id : 10,000 BC **** ... These are also string literals.\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;name\u0026gt;\u0026#34;).Count() =\u0026gt; 74950 ----------- 1 Result Elapsed time: 44.480211 ms There are 74950.\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;name\u0026gt;\u0026#34;).Out().Count() =\u0026gt; 0 ----------- 1 Result Elapsed time: 52.163808 ms And these are also terminal nodes.\nLet\u0026rsquo;s continue with the \u0026lt;type\u0026gt; predicate:\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;).All() **** id : \u0026lt;/people/person\u0026gt; **** id : \u0026lt;/film/film\u0026gt; **** id : \u0026lt;/film/film\u0026gt; ... These are IRIs, and we have many different ones.\nLet\u0026rsquo;s collect these IRIs individually:\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;).Unique().All() **** id : \u0026lt;/people/person\u0026gt; **** id : \u0026lt;/film/film\u0026gt; ----------- 2 Results Elapsed time: 43.759725 ms In total, there are only two such IRIs, the \u0026lt;/people/person\u0026gt; and the \u0026lt;/film/film\u0026gt;.\nLet\u0026rsquo;s check if there were terminal nodes:\ncayley\u0026gt; g.V().Out(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;).Out().Count() =\u0026gt; 0 ----------- 1 Result Elapsed time: 48.857924 ms Yes, they are terminal nodes.\nPut these newly discovered IRI and literal nodes to the schema diagram, accompanied with the predicates that lead to them, as we can see on the Figure 5.\n  5. ábra: The schema diagram extended with the terminal node types.   4. Separate the different node types from each other #  As much as possible, try to differentiate among the node types, and separate the different types from each other in case they may receive or send the same predicates, but refer to different kind of entities.\nAnalysis of the y node variable #  We can observe on the diagram that the y node has the \u0026lt;type\u0026gt; outgoing predicate with two different values, so this y node might be split to two different node types, that identify different entities. Let\u0026rsquo;s separate the y node variable to two types, according to our hypotheses, as we can see on the Figure 6.\n  6. ábra: Separation of `person` and `film` node-types.   Use multi-step (2, 3, \u0026hellip;n) predicate chains for the further analysis.\nLet\u0026rsquo;s see which predicates points out from, and arrives to the node types derived from y, when we restrict the starting nodes to have their \u0026lt;type\u0026gt; relation with either the one type then the other type:\ncayley\u0026gt; y_film = g.V().Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/film/film\u0026gt;\u0026#34;) =\u0026gt; [internal Iterator] ----------- 1 Result Elapsed time: 0.469018 ms cayley\u0026gt; y_film.OutPredicates().All() **** id : \u0026lt;/film/film/directed_by\u0026gt; **** id : \u0026lt;/film/film/starring\u0026gt; **** id : \u0026lt;name\u0026gt; **** id : \u0026lt;type\u0026gt; ----------- 4 Results Elapsed time: 113.54646 ms Looking at the results, in case of films these seems to be normal.\nNow do the same check with the case of person node-type candidates:\ncayley\u0026gt; y_person = g.V().Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026gt;\u0026#34;) =\u0026gt; [internal Iterator] ----------- 1 Result Elapsed time: 0.552285 ms cayley\u0026gt; y_person.OutPredicates().All() **** id : \u0026lt;name\u0026gt; **** id : \u0026lt;type\u0026gt; **** id : \u0026lt;/film/film/directed_by\u0026gt; **** id : \u0026lt;/film/film/starring\u0026gt; ----------- 4 Results Elapsed time: 95.020065 ms We got the same results, that is a bit surprising, because it is hard to imagine that it makes sense to use the \u0026lt;/film/film/directed_by\u0026gt; nor the \u0026lt;/film/film/starring\u0026gt; predicates as outgoing connections.\nWe caught suspicion, so take a look at this a bit deeper:\nA film probably has a director, so it worth to check this kind of connection:\ncayley\u0026gt; y_film.Out(\u0026#34;\u0026lt;/film/film/directed_by\u0026gt;\u0026#34;).Count() =\u0026gt; 33310 ----------- 1 Result Elapsed time: 108.365305 ms We found 33310 hits of such kind of relation, and it seems to be obvious.\nLet\u0026rsquo;s check, if the target nodes this predicate points to, are really persons!\ncayley\u0026gt; y_film.Out(\u0026#34;\u0026lt;/film/film/directed_by\u0026gt;\u0026#34;).Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026gt;\u0026#34;).Count() =\u0026gt; 33310 ----------- 1 Result Elapsed time: 168.508677 ms Taking into consideration the numbers, it looks true. Let\u0026rsquo;s see some of them by name:\ncayley\u0026gt; y_film.Out(\u0026#34;\u0026lt;/film/film/directed_by\u0026gt;\u0026#34;).Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;name\u0026gt;\u0026#34;).GetLimit(5) **** id : Lucio Fulci **** id : Umberto Lenzi **** id : Murali K. Thalluri **** id : Theo van Gogh **** id : Roland Emmerich ----------- 5 Results Elapsed time: 1.071004 ms it seems that this type of connection, and node type are absolutely O.K.\nNow let\u0026rsquo;s see what about the same relation with the person node types. Has any node with \u0026lt;/people/person\u0026gt; type any \u0026ldquo;directed_by\u0026rdquo; relation?\ncayley\u0026gt; y_person.Out(\u0026#34;\u0026lt;/film/film/directed_by\u0026gt;\u0026#34;).Count() =\u0026gt; 6 ----------- 1 Result Elapsed time: 96.554532 ms Surprisingly we found 6 of them.\nLet\u0026rsquo;s see these 6 persons closer. We use tags to visualize the details, that makes easier to understand what is the situation.\ncayley\u0026gt; y_person.Tag(\u0026#34;person\u0026#34;).Out(\u0026#34;\u0026lt;/film/film/directed_by\u0026gt;\u0026#34;).Tag(\u0026#34;directed_by\u0026#34;).All() **** directed_by : \u0026lt;/en/quentin_tarantino\u0026gt; id : \u0026lt;/en/quentin_tarantino\u0026gt; person : \u0026lt;/en/death_proof\u0026gt; **** directed_by : \u0026lt;/en/mysterio\u0026gt; id : \u0026lt;/en/mysterio\u0026gt; person : \u0026lt;/en/jazmin\u0026gt; **** directed_by : \u0026lt;/en/robert_rodriguez\u0026gt; id : \u0026lt;/en/robert_rodriguez\u0026gt; person : \u0026lt;/en/planet_terror\u0026gt; **** directed_by : \u0026lt;/en/keenen_ivory_wayans\u0026gt; id : \u0026lt;/en/keenen_ivory_wayans\u0026gt; person : \u0026lt;/en/scary_movie_2\u0026gt; **** directed_by : \u0026lt;/en/david_zucker\u0026gt; id : \u0026lt;/en/david_zucker\u0026gt; person : \u0026lt;/en/scary_movie_3\u0026gt; **** directed_by : \u0026lt;/en/ralph_bakshi\u0026gt; id : \u0026lt;/en/ralph_bakshi\u0026gt; person : \u0026lt;/en/the_lord_of_the_rings_1978\u0026gt; ----------- 6 Results Elapsed time: 95.293387 ms As we can see on the results list, in case of these 6 nodes, the \u0026lt;directed_by\u0026gt; predicate is really point to persons, however we also can realize that the IRI of the origin node shows that in fact these origins are not persons, but films. We can say, it is very likely that the \u0026lt;type\u0026gt; predicate were defined badly in these six cases. These \u0026lt;type\u0026gt; predicates point to the \u0026lt;/people/person\u0026gt; IRI, instead of the correct \u0026lt;/film/film\u0026gt; IRI. So we consider this connection invalid, in spite the database contains such wrong links.\nThe figure 7. shows the schema drawing that contains our latest findings too, that are: the y_film node-types have outgoing \u0026lt;/film/film/directed_by\u0026gt; predicate that points to y_person node types, an the y_person node types has no such predicates.\n  Figure 7.: The outgoing predicates of `y_film` node types.   Now let\u0026rsquo;s continue with the analysis of the \u0026lt;/film/film/starring\u0026gt; predicate.\ncayley\u0026gt; y_film.Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).Count() =\u0026gt; 136737 ----------- 1 Result Elapsed time: 140.230179 ms cayley\u0026gt; y_film.Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).GetLimit(5) **** id : _:117646 **** id : _:117647 **** id : _:117648 **** id : _:117649 **** id : _:117240 ----------- 5 Results Elapsed time: 1.052197 ms The y_film node type has 136737 connections with this predicate, that point to Blank Nodes.\nLet\u0026rsquo;s see what kind of incoming and outgoing predicates these \u0026ldquo;character\u0026rdquo; nodes have:\ncayley\u0026gt; y_film.Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).OutPredicates().All() **** id : \u0026lt;/film/performance/actor\u0026gt; **** id : \u0026lt;/film/performance/character\u0026gt; ----------- 2 Results Elapsed time: 255.873653 ms cayley\u0026gt; y_film.Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).InPredicates().All() **** id : \u0026lt;/film/film/starring\u0026gt; ----------- 1 Result Elapsed time: 242.836008 ms The \u0026ldquo;character\u0026rdquo; Blank Nodes can be considered as the node type that we named to x on the schema diagram.\nAs a check, let\u0026rsquo;s see if we can find actors and roles connected to films, using the predicates:\ncayley\u0026gt; y_film = g.V().Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/film/film\u0026gt;\u0026#34;) =\u0026gt; [internal Iterator] ----------- 1 Result Elapsed time: 0.897193 ms cayley\u0026gt; filmWithTitle = y_film.Tag(\u0026#34;film\u0026#34;).Out(\u0026#34;\u0026lt;name\u0026gt;\u0026#34;).Tag(\u0026#34;filmTitle\u0026#34;).Back(\u0026#34;film\u0026#34;) =\u0026gt; [internal Iterator] ----------- 1 Result Elapsed time: 0.680148 ms cayley\u0026gt; filmStar = filmWithTitle.Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).Tag(\u0026#34;star\u0026#34;) =\u0026gt; [internal Iterator] ----------- 1 Result Elapsed time: 0.340275 ms cayley\u0026gt; {t(\u0026#34;\u0026lt;/film/performance/character\u0026gt;\u0026#34;).Tag(\u0026#34;character\u0026#34;).Back(\u0026#34;star\u0026#34;).Out(\u0026#34;\u0026lt;/film/performance/actor\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;name\u0026gt;\u0026#34;).Tag(\u0026#34;actorName\u0026#34;).GetLimit(\u0026#34;10\u0026#34;) **** actorName : Katherine Heigl character : Arlene film : \u0026lt;/en/100_girls\u0026gt; filmTitle : 100 Girls id : Katherine Heigl star : _:239 **** actorName : Joely Richardson character : Anita film : \u0026lt;/en/101_dalmatians\u0026gt; filmTitle : 101 Dalmatians id : Joely Richardson star : _:457 **** actorName : Susanne Blakeslee character : Cruella de Vil film : \u0026lt;/en/101_dalmatians_ii_patchs_london_adventure\u0026gt; filmTitle : 101 Dalmatians II: Patch\u0026#39;s London Adventure id : Susanne Blakeslee star : _:71373 **** actorName : Brian Markinson character : Daniel film : \u0026lt;/en/10_5_apocalypse\u0026gt; filmTitle : 10.5: Apocalypse id : Brian Markinson star : _:218 **** actorName : Heath Ledger character : Patrick Verona film : \u0026lt;/en/10_things_i_hate_about_you\u0026gt; filmTitle : 10 Things I Hate about You id : Heath Ledger star : _:503 **** actorName : James Marsden character : Tommy film : \u0026lt;/en/10th_wolf\u0026gt; filmTitle : 10th \u0026amp; Wolf id : James Marsden star : _:284 **** actorName : Jeana Tomasino character : Karen film : \u0026lt;/en/10_to_midnight\u0026gt; filmTitle : 10 to Midnight id : Jeana Tomasino star : _:100658 **** actorName : Jason Segel character : Leon (paramedic 1) film : \u0026lt;/en/11_14\u0026gt; filmTitle : 11:14 id : Jason Segel star : _:108561 **** actorName : Henry Fonda character : Juror #8 film : \u0026lt;/en/12_angry_men\u0026gt; filmTitle : 12 Angry Men id : Henry Fonda star : _:462 **** actorName : Lee J. Cobb character : Juror #3 film : \u0026lt;/en/12_angry_men\u0026gt; filmTitle : 12 Angry Men id : Lee J. Cobb star : _:463 ----------- 10 Results Elapsed time: 7.233902 ms It definitely works. So we can say that the x node variable represents the film stars.\nWe also can say that both the \u0026lt;/film/performance/actor\u0026gt; predicate, and the \u0026lt;/film/performance/character\u0026gt; predicate that origins from x and targets y_person are valid predicates, and represent real connections.\nNow emerges a new question, whether there is an outgoing \u0026lt;/film/performance/actor\u0026gt; predicate from x that targets a y_film node?\nfilmStar.Out(\u0026#34;\u0026lt;/film/performance/actor\u0026gt;\u0026#34;).Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/film/film\u0026gt;\u0026#34;).Count() =\u0026gt; 1 ----------- 1 Result Elapsed time: 1315.917655 ms It is strange, but we have found one.\nWhich is this starring character, and which actor does it point to?\ncayley\u0026gt; filmStar.Out(\u0026#34;\u0026lt;/film/performance/actor\u0026gt;\u0026#34;).Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/film/film\u0026gt;\u0026#34;).All() **** film : \u0026lt;/en/jazmin\u0026gt; filmTitle : Jazmin id : \u0026lt;/en/jazmin\u0026gt; star : _:23742 ----------- 1 Result Elapsed time: 1340.16577 ms We can see that the ID of this starring character is the _:23742 Blank Node, which points to a film instead of a person as the actor. Let\u0026rsquo;s check if this Blank Node also has a similar connection to a real person too:\ncayley\u0026gt; g.V(\u0026#34;_:23742\u0026#34;).Out(\u0026#34;\u0026lt;/film/performance/actor\u0026gt;\u0026#34;).Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026#34;).Count() =\u0026gt; 0 ----------- 1 Result Elapsed time: 0.68618 ms It has no such connection, so we have identified another bug in the database. We also make changes on the schema chart according to the new learnings, as it is shown on the Figure 8.\n  figure 8.: The connections between the `y_person` and `x_character` node types.   Finally there is only one predicate left, that we haven\u0026rsquo;t analyzed so far. It the the \u0026lt;/film/film/starring\u0026gt; that origins from the y_person node types.\ncayley\u0026gt; y_person = g.V().Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).Count() =\u0026gt; 96 ----------- 1 Result Elapsed time: 85.149164 ms It is again very surprising, but we have found 96 connections. Let\u0026rsquo;s find out how is this possible, and where do these connections point to.\ncayley\u0026gt; y_person = g.V().Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).GetLimit(5) **** id : _:95530 **** id : _:95531 **** id : _:95532 **** id : _:95533 **** id : _:95534 ----------- 5 Results Elapsed time: 12.859301 ms it is clearly visible that the Blank Nodes very likely points to x_character type nodes.\nExecute a query, where we start from person type nodes (\u0026ldquo;originPeson\u0026rdquo;) through a \u0026lt;/film/film/starring\u0026gt; predicate, towards an actor (\u0026ldquo;actor\u0026rdquo;), and retrieve the name and type of the node that is at the end of the chain.\ncayley\u0026gt; g.V().Tag(\u0026#34;originPerson\u0026#34;).Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;).Tag(\u0026#34;originType\u0026#34;).Back(\u0026#34;originPerson\u0026#34;).Out(\u0026#34;\u0026lt;/film/film/starring\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;/film/performance/actor\u0026gt;\u0026#34;).Tag(\u0026#34;actor\u0026#34;).Out(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;).Tag(\u0026#34;actorType\u0026#34;).Back(\u0026#34;person\u0026#34;).All() **** actor : \u0026lt;/en/jazmin\u0026gt; actorType : \u0026lt;/film/film\u0026gt; id : \u0026lt;/en/jazmin\u0026gt; originPerson : \u0026lt;/en/jazmin\u0026gt; originType : \u0026lt;/film/film\u0026gt; **** actor : \u0026lt;/en/jazmin\u0026gt; actorType : \u0026lt;/people/person\u0026gt; id : \u0026lt;/en/jazmin\u0026gt; originPerson : \u0026lt;/en/jazmin\u0026gt; originType : \u0026lt;/film/film\u0026gt; **** actor : \u0026lt;/en/jazmin\u0026gt; actorType : \u0026lt;/people/person\u0026gt; id : \u0026lt;/en/jazmin\u0026gt; originPerson : \u0026lt;/en/jazmin\u0026gt; originType : \u0026lt;/people/person\u0026gt; **** ... **** actor : \u0026lt;/en/anthony_daniels\u0026gt; actorType : \u0026lt;/people/person\u0026gt; id : \u0026lt;/en/the_lord_of_the_rings_1978\u0026gt; originPerson : \u0026lt;/en/the_lord_of_the_rings_1978\u0026gt; originType : \u0026lt;/people/person\u0026gt; **** actor : \u0026lt;/guid/9202a8c04000641f800000000112e07f\u0026gt; actorType : \u0026lt;/people/person\u0026gt; id : \u0026lt;/en/the_lord_of_the_rings_1978\u0026gt; originPerson : \u0026lt;/en/the_lord_of_the_rings_1978\u0026gt; originType : \u0026lt;/film/film\u0026gt; ----------- 100 Results Elapsed time: 965.035817 ms If we look through the result list, again we can observe contradictions among the relations in the database. We can detect several errors. Based on the results list, we can assume that some of the y nodes may have \u0026lt;type\u0026gt; predicates that points both to the \u0026lt;/film/film\u0026gt; and the \u0026lt;/people/person\u0026gt; IRI nodes.\nProve that this assumption is true:\ncayley\u0026gt; g.V().Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/people/person\u0026gt;\u0026#34;).And(g.V().Has(\u0026#34;\u0026lt;type\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/film/film\u0026gt;\u0026#34;)).All() **** id : \u0026lt;/en/death_proof\u0026gt; **** id : \u0026lt;/en/jazmin\u0026gt; **** id : \u0026lt;/en/planet_terror\u0026gt; **** id : \u0026lt;/en/scary_movie_2\u0026gt; **** id : \u0026lt;/en/scary_movie_3\u0026gt; **** id : \u0026lt;/en/the_lord_of_the_rings_1978\u0026gt; ----------- 6 Results Elapsed time: 72.999153 ms Unfortunately, our assumptions were correct, and these are real inconsistencies in the database. We can state that from the person node type, there is no \u0026lt;/film/film/starring\u0026gt; outgoing predicate towards the character nodes in normal cases.\nNow we can finish the schema diagram, that you can see on the figure 9.\n  Figure 9.: The schema diagram of the film database.   "});index.add({'id':3,'href':'/cayley-cookbook/docs/working-with-cayley/queries/find_all_vertices/','title':"Find All Vertices",'section':"Queries",'content':"Find All Vertices #  Problem #  How can I list all the nodes (subjects, predicates and objects) of the graph?\nTest Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format \u0026lt;alice\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;dani\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;emily\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;fred\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;follows\u0026gt; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;status\u0026gt; . \u0026lt;emily\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; .    Gizmo Query #  g.V().All(); Results:\n{\u0026#34;id\u0026#34;:\u0026#34;alice\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;follows\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;bob\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;fred\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;status\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;cool_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;dani\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;charlie\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;greg\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;emily\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;predicates\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;are\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_graph\u0026#34;} "});index.add({'id':4,'href':'/cayley-cookbook/docs/basic-concepts/graph-based-data-model/','title':"Graph Based Data Model",'section':"Basic Concepts",'content':"Graph Based Data Model #  When we build a knowledge-graph, then we create a conceptual model of a part of the real World.\nA conceptual model is a model of a subject area or area of knowledge, sometimes called a domain.\nA domain model typically represents:\n the primary entities (the things of the domain), the relationships among entities, the attributes and attribute values (sometimes called properties and property values) of the entities and the relationships, and sometimes rules that associate entities, relationships, and attributes (or all three) in more complicated ways.  The graph databases and semantic technologies can be very efficiently applied to solve problems, when we have to work with flexible, frequently changing, non-structured data models, and we have to analyze these data from different aspects. Therefore these technologies are very useful to describe and manage conceptual models.\nThe graphs are made of two basic elements:\n nodes, (or vertices). edges, that connect vertices.  We usually use graphs to represent knowledge. The nodes of the graphs are typically represent the things of the World, and the edges represent the associations among the things.\nThe edges are directed, and both the nodes and edges can have labels.\nthe Figure 1. shows a very simple graph, which contains two nodes, one with the \u0026ldquo;Luke\u0026rdquo; label, and another one with the label of \u0026ldquo;Leia\u0026rdquo;, moreover there is an edge between them, with the label of \u0026ldquo;knows\u0026rdquo;.\n  figure 1: A simple graph   Some graph databases allows us to give more than one labels to nodes and edges in the form of property-value maps. These kind of graphs are called property-graphs. in case of Cayley , our graphs will contain only one label per node and per edge.\n"});index.add({'id':5,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/list-namespaces/','title':"List Registered Namespaces",'section':"Namespaces and Vocabularies",'content':"List Registered Namespaces #  The following code fragment lists all the namespaces currently registered:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add some predefined vocabularies \t_ \u0026#34;github.com/cayleygraph/quad/voc/schema\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/xsd\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; ) func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } \ncd namespaces go run list_namespaces.go` The results:\nRegistered namespaces: schema: =\u0026gt; http://schema.org/  xsd: =\u0026gt; http://www.w3.org/2001/XMLSchema#  rdf: =\u0026gt; http://www.w3.org/1999/02/22-rdf-syntax-ns#  rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  "});index.add({'id':6,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/','title':"Namespaces and Vocabularies",'section':"Working with Knowledge Graph",'content':"This section demonstrates the usage of namespaces and vocabularies.\n"});index.add({'id':7,'href':'/cayley-cookbook/docs/working-with-cayley/impex/quads/','title':"Quads export",'section':"Data import / export",'content':"Quads #  This code creates a set of quads, then exports them into several formats:\nSee the full list of source code package main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; \u0026#34;reflect\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func main() { // Create Quads about some people using Blank Nodes as references \tquadsWithBNodes := makeQuadsWithBNodes() // Take a look at the resulted quads \tprintQuads(quadsWithBNodes) // Create Quads about some people using IRIs as references \tquadsWithIRIs := makeQuadsWithIRIs() // Take a look at the resulted quads \tprintQuads(quadsWithIRIs) } func makeQuadsWithBNodes() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Generate a Blank Node to represent the person internally \t// You can create a sequence of internal IDs for the Blank Nodes \tvar seq quad.Sequence luke := seq.Next() // Alternatively create a Blank Node with a random internal ID \t// luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) leia := seq.Next() quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func makeQuadsWithIRIs() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Create IRIs to represent the person globally, and universally \tluke := quad.IRI(\u0026#34;https://swapi.co/resource/human/luke_skywalker\u0026#34;) // Alternatively create a Blank Node with a random internal ID \t// luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) leia := quad.IRI(\u0026#34;https://swapi.co/resource/human/leia_organa\u0026#34;) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func printQuads(quads []quad.Quad) { fmt.Println(\u0026#34;The details of the quads created:\u0026#34;) for i, q := range quads { fmt.Printf(\u0026#34;quads[%d]:\\n\u0026#34;, i) fmt.Printf(\u0026#34; subject: %s %v\\n\u0026#34;, q.Get(quad.Subject), reflect.TypeOf(q.Get(quad.Subject))) fmt.Printf(\u0026#34; predicate: %s %v\\n\u0026#34;, q.Get(quad.Predicate), reflect.TypeOf(q.Get(quad.Predicate))) fmt.Printf(\u0026#34; object: %s %v\\n\u0026#34;, q.Get(quad.Object), reflect.TypeOf(q.Get(quad.Object))) fmt.Printf(\u0026#34; label: %s %v\\n\\n\u0026#34;, q.Get(quad.Label), reflect.TypeOf(q.Get(quad.Label))) } fmt.Println(\u0026#34;The quads in NQuad representation:\u0026#34;) for _, q := range quads { fmt.Printf(\u0026#34;%s\\n\u0026#34;, q.NQuad()) } }    \ncd quad/writer go run export_nquads_to_stdout.go data The results:\nGraphviz digraph cayley_graph { \u0026quot;_:n4894974106898606681\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n4894974106898606681\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Luke\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n4894974106898606681\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Skywalker\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; \u0026quot;_:n4894974106898606681\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;23\\\u0026quot;^^\u0026lt;xsd:integer\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:age\u0026gt;\u0026quot; ]; \u0026quot;_:n2322047325094835887\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n2322047325094835887\u0026quot; -\u0026gt; \u0026quot;_:n4894974106898606681\u0026quot; [ label = \u0026quot;\u0026lt;foaf:knows\u0026gt;\u0026quot; ]; \u0026quot;_:n2322047325094835887\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Leia\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n2322047325094835887\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Organa\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; } GML Creator \u0026#34;Cayley\u0026#34; graph [ directed 1 node [ id 0 label \u0026#34;_:n4894974106898606681\u0026#34; ] node [ id 1 label \u0026#34;\u0026lt;foaf:Person\u0026gt;\u0026#34; ] edge [ source 0 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] node [ id 2 label \u0026#34;\u0026amp;quot;Luke\u0026amp;quot;\u0026#34; ] edge [ source 0 target 2 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 3 label \u0026#34;\u0026amp;quot;Skywalker\u0026amp;quot;\u0026#34; ] edge [ source 0 target 3 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] node [ id 4 label \u0026#34;\u0026amp;quot;23\u0026amp;quot;^^\u0026lt;xsd:integer\u0026gt;\u0026#34; ] edge [ source 0 target 4 label \u0026#34;\u0026lt;foaf:age\u0026gt;\u0026#34; ] node [ id 5 label \u0026#34;_:n2322047325094835887\u0026#34; ] edge [ source 5 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] edge [ source 5 target 0 label \u0026#34;\u0026lt;foaf:knows\u0026gt;\u0026#34; ] node [ id 6 label \u0026#34;\u0026amp;quot;Leia\u0026amp;quot;\u0026#34; ] edge [ source 5 target 6 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 7 label \u0026#34;\u0026amp;quot;Organa\u0026amp;quot;\u0026#34; ] edge [ source 5 target 7 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] ] GraphML \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;graphml xmlns=\u0026#34;http://graphml.graphdrawing.org/xmlns\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd\u0026#34; xmlns:y=\u0026#34;http://www.yworks.com/xml/graphml\u0026#34;\u0026gt; \u0026lt;key id=\u0026#34;d0\u0026#34; for=\u0026#34;node\u0026#34; yfiles.type=\u0026#34;nodegraphics\u0026#34;/\u0026gt; \u0026lt;key id=\u0026#34;d1\u0026#34; for=\u0026#34;edge\u0026#34; yfiles.type=\u0026#34;edgegraphics\u0026#34;/\u0026gt; \u0026lt;graph id=\u0026#34;G\u0026#34; edgedefault=\u0026#34;directed\u0026#34;\u0026gt; \u0026lt;node id=\u0026#34;n0\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;220.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;_:n4894974106898606681\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;130.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#FFFF99\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;lt;foaf:Person\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n2\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;60.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Luke\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n2\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n3\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;110.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Skywalker\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n3\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n4\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;190.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;23\u0026amp;#34;^^\u0026amp;lt;xsd:integer\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n4\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:age\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n5\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;220.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;_:n2322047325094835887\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n0\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:knows\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n6\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;60.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Leia\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n6\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n7\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;80.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Organa\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n7\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;/graph\u0026gt; \u0026lt;/graphml\u0026gt; JSON [ {\u0026#34;subject\u0026#34;:\u0026#34;_:n4894974106898606681\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n4894974106898606681\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Luke\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n4894974106898606681\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Skywalker\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n4894974106898606681\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:age\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\\u0026#34;23\\\u0026#34;^^\\u003cxsd:integer\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n2322047325094835887\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n2322047325094835887\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:knows\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;_:n4894974106898606681\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n2322047325094835887\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Leia\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n2322047325094835887\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Organa\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;} ] n-quads _:n4894974106898606681 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n4894974106898606681 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Luke\u0026quot; \u0026quot;people\u0026quot; . _:n4894974106898606681 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Skywalker\u0026quot; \u0026quot;people\u0026quot; . _:n4894974106898606681 \u0026lt;foaf:age\u0026gt; \u0026quot;23\u0026quot;^^\u0026lt;xsd:integer\u0026gt; \u0026quot;people\u0026quot; . _:n2322047325094835887 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n2322047325094835887 \u0026lt;foaf:knows\u0026gt; _:n4894974106898606681 \u0026quot;people\u0026quot; . _:n2322047325094835887 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Leia\u0026quot; \u0026quot;people\u0026quot; . _:n2322047325094835887 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Organa\u0026quot; \u0026quot;people\u0026quot; .    Rendered Graphviz     Rendered yEd GraphML   "});index.add({'id':8,'href':'/cayley-cookbook/docs/working-with-cayley/stores/','title':"Stores",'section':"Working with Knowledge Graph",'content':"This section demonstrates the usage of stores and shows the internal representation of quads.\n"});index.add({'id':9,'href':'/cayley-cookbook/docs/cayley-overview/cayley-convert/','title':"The `cayley convert` command",'section':"Cayley Overview",'content':"The cayley convert command #  We can convert knowledge-content files from one representation format to another with the cayley convert command.\n  2. ábra: cayley convert   The following command converts the test data from n-quads format to JSON-LD format:\n$ cayley convert --load data/testdata.nq --dump data/testdata.jsonld The next command below does the same conversion, but the results will be written to the standard output:\n$ cayley convert --load data/testdata.nq --dump_format jsonld --dump - I0915 19:15:58.328789 30572 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0915 19:15:58.328974 30572 dump.go:20] writing quads to stdout I0915 19:15:58.328989 30572 convert.go:100] reading \u0026#34;data/testdata.nq\u0026#34; [{\u0026#34;@id\u0026#34;:\u0026#34;alice\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;}],\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;charlie\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;dani\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;dani\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;}],\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;emily\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;predicates\u0026#34;,\u0026#34;are\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;follows\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;status\u0026#34;}]},{\u0026#34;@graph\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;emily\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;smart_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;smart_person\u0026#34;}]}],\u0026#34;@id\u0026#34;:\u0026#34;smart_graph\u0026#34;}] [{\u0026#34;@id\u0026#34;:\u0026#34;alice\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;}],\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;charlie\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;dani\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;dani\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;}],\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;emily\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;predicates\u0026#34;,\u0026#34;are\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;follows\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;status\u0026#34;}]},{\u0026#34;@graph\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;emily\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;smart_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;smart_person\u0026#34;}]}],\u0026#34;@id\u0026#34;:\u0026#34;smart_graph\u0026#34;}] "});index.add({'id':10,'href':'/cayley-cookbook/docs/basic-concepts/','title':"Basic Concepts",'section':"Docs",'content':"This Chapter introduces some fundamental concepts required to work with Knowledge Graphs and especially with Cayley.\n"});index.add({'id':11,'href':'/cayley-cookbook/docs/working-with-cayley/impex/schema/','title':"Data import / export via struct annotation",'section':"Data import / export",'content':"Data import / export via struct annotation #  Structure annotations #  This section demonstrates how can we convert simple or complex objects and their properties to quads. it also shows how can we directly upload these data structures to the store, using the annotations placed into the struct declarations ob the objects. Moreover there are examples to the retrieval of these complex objects from the store.\nWithin this method it is much easier to store/retrieve complex data structures, than doing it directly with the quads that these data structures are made of, and collecting their properties one-by-one.\nCreate store #  In the examples we will use a simple in-memory store. We can start using such a store via calling the InitStore() function, that we can find in the store.go file.\nShow the source code of the `store.go` package kbase import ( \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;log\u0026#34; ) // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } return store }    Test data #  The bookmarks.yml file holds the test data in YAML format. it contains a list of bookmarks.\nWe will upload these bookmarks, then we will query them. The results of the queries will be retrieved via the help of struct annotations.\nShow the `bookmarks.yml` file - id: 9493efb9-be9a-4435-9b5d-f605fc9cddaa title: Gremlin\u0026#39;s Graph Traversal Machinery content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [gremlin, cayley, tinkerprop, gizmo, presentation, graph-db, query-language] urls: [\u0026#39;https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery\u0026#39;] - id: d6481271-d42d-487c-bec9-733ff383e029 title: Ontotext GraphDB content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [graphdb, nosql, knowledge-graph, linked-data, semantic-web, rdf] urls: [\u0026#39;https://ontotext.com/products/graphdb/\u0026#39;] - id: 058d41d5-6830-432b-8ebb-5733f8a2575b title: \u0026#39;Graphs and neural networks: Reading node properties\u0026#39; content: \u0026#34;\u0026#34; author: David Mack published: \u0026#34;\u0026#34; tags: [octavian-ai, graphs, neural-network, nlu, digital-assistant, dbms, brainputer, knowledge-graphs, graph-databases] urls: [\u0026#39;https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb\u0026#39;] - id: 324bacb5-8709-42b9-b38b-93755c48ef19 title: Towards building the next generation database query engine content: \u0026#34;\u0026#34; author: David Mack published: Nov 12, 2018 tags: [octavian-ai, graphs, neural-network, nlu, digital-assistant, dbms, brainputer, knowledge-graphs, graph-databases] urls: [\u0026#39;https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3\u0026#39;] - id: e0af0cdc-1795-482d-986e-96b08cc530f9 title: extracting-knowledge-from-knowledge-graphs content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [brainputer, pythorch, knowlendge-graph] urls: [\u0026#39;https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0\u0026#39;] - id: 2e75fc6a-148f-4016-a178-2a53a67e06c8 title: Platypus content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [knowledge-graph, wikidata, cognition, cui, platypus] urls: [\u0026#39;https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service\u0026#39;, \u0026#39;https://www.wikidata.org/wiki/Wikidata:Main_Page\u0026#39;, \u0026#39;https://hal.archives-ouvertes.fr/hal-01730479/document\u0026#39;] - id: 46721a5a-0eda-48f4-b190-b1c2544146a4 title: Grakn.AI - learn content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [grakn.ai, tutorials, blog, ai, inference-engine, knowledge-graph] urls: [\u0026#39;https://blog.grakn.ai/learn/home\u0026#39;] - id: 418b7162-fc1e-4dda-a6a5-80b9d4558f47 title: \u0026#39;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#39; content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [kagnet, cognitive-computating, python, graphs, networks, knowledge-graph, tools, commonsense, reasoning] urls: [\u0026#39;https://github.com/INK-USC/KagNet\u0026#39;] - id: a0b1b538-56e8-4fa9-a10b-be7c21ea2f90 title: Knowledge extraction from unstructured texts content: \u0026#34;\u0026#34; author: Heuritech published: \u0026#34;\u0026#34; tags: [lstm, knowledge-graph, text-extraction, konwledge-extraction, heuritech, semantics, universal-schema, triplet-extraction, word2vec] urls: [\u0026#39;https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f\u0026#39;] - id: 0b82f944-3f8c-4206-953e-a0d2d256dd60 title: Deep Learning with Knowledge Graphs content: \u0026#34;\u0026#34; author: Andrew Jefferson published: \u0026#34;\u0026#34; tags: [octavian, deep-neural-network, knowledge-graph, machine-learning, macgraph, brainputer] urls: [\u0026#39;https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a\u0026#39;] - id: e0d790fd-03de-4522-9ebc-3b931db52288 title: MacGraph content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [octavian, deep-neural-network, knowledge-graph, machine-learning, macgraph, brainputer, github, repository] urls: [\u0026#39;https://github.com/Octavian-ai/mac-graph\u0026#39;] - id: 17217149-1274-4ea4-a5f2-9bd48e6003c5 title: octavian.ai content: | We research new approaches to machine reasoning and graph-based learning. We\u0026#39;re working to build machines that can answer useful questions, using neural reasoning and knowledge graphs. We write articles, give talks and host workshops about our work. We\u0026#39;re an open-source research organization and welcome you to join us and contribute. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [octavian, machine-learning, open-source, research, graph, knowledge-graph, macgraph, brainputer] urls: [\u0026#39;https://www.octavian.ai/\u0026#39;] - id: 955d0202-d259-46c7-b71b-eb2434da2058 title: Build your own Knowledge Graph From unstructured dark data to valuable business insights content: \u0026#34;\u0026#34; author: Ignaz Wanders published: \u0026#34;\u0026#34; tags: [knowledge-graph, ai, machine-learning, ml, neo4j] urls: [\u0026#39;https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f\u0026#39;] - id: b34b66d4-81d2-4449-a049-4cb29fdc8f75 title: Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph. content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [knowledge-graph, kg, ai, graphs, facebook, pytorch, biggraph] urls: [\u0026#39;https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0\u0026#39;] - id: af631947-2a60-4ce6-a1a9-0b7ab88b9cfb title: Deep Learning with Knowledge Graphs content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [deep-learning, ml, machine-learning, knowledge-graph, ai] urls: [\u0026#39;https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a\u0026#39;] - id: f020ade1-4824-4c47-95c4-527c49fe2406 title: Knowledge Graphs in Natural Language Processing @ ACL 2020 content: State of the Art Mid 2020 author: Michael Galkin published: Jul 10, 2020 tags: [ai, kg, knowledge-graphs, nlp, acl] urls: [\u0026#39;https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1\u0026#39;] - id: a45c3713-89a4-44eb-947b-d0720d8ff9f4 title: Blog-Rolling-with-BrightstarDB-Express-and-Node-js content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [brightstardb, rdf, triple-store, nodejs, .net, database] urls: [\u0026#39;https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#39;, \u0026#39;http://brightstardb.com/\u0026#39;] - id: fba5c188-4c20-4cc3-aa99-720662d58ab8 title: FOAF Vocabulary Specification 0.99 content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [foaf, vocabulary, rdf] urls: [\u0026#39;http://xmlns.com/foaf/spec/\u0026#39;] - id: 8193a8a4-ae32-4867-924b-ecc9b856cad3 title: SuperMemo Website content: | SuperMemo is a program that keeps track of discrete bits of information you\u0026#39;ve learned and want to retain. SuperMemo tracks this so-called forgetting curve and reminds you to rehearse your knowledge when your chance of recalling it has dropped to, say, 90 percent. When you first learn a new vocabulary word, your chance of recalling it will drop quickly. But after SuperMemo reminds you of the word, the rate of forgetting levels out. The program tracks this new decline and waits longer to quiz you the next time. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [memory, learning, wozniak, brainputer, supermemo] urls: [\u0026#39;https://www.supermemo.com/en/archives1990-2015/articles/devour\u0026#39;] - id: 1d96dd4d-c30e-45a7-8f44-38dfb9a697f2 title: Gellish.net content: Gellish is a standard language, methodology and tools for expressing information in a computer interpretable and system independent way. It enables exchange and integration of data among systems of multiple parties without the need for data conversions. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [dictionary, gellish.net, gellish, nlp, cognitive-computing, electronic-dictionary, open-source, semantic-web, brainputer, robotics] urls: [\u0026#39;https://www.gellish.net/\u0026#39;] - id: bdd898dc-76de-4a41-86b1-8757aff5fe6c title: Semantic Web and Model-Driven Engineering content: Too theoretical author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [architecture, system-design, ddd, domain-driven-design, soo-poc, semantic-web] urls: [\u0026#39;http://www.allitebooks.org/semantic-web-and-model-driven-engineering/\u0026#39;] - id: 1deb716d-4ca8-4834-a771-7c68e8844067 title: MRD, Machine Readable dictionary content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [mrd, dictionary, nlp, cognitive-computing] urls: [\u0026#39;https://en.wikipedia.org/wiki/Machine-readable_dictionary\u0026#39;] - id: 9493efb9-be9a-4435-9b5d-f605fc9cddaa title: Gremlin\u0026#39;s Graph Traversal Machinery content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [gremlin, cayley, tinkerprop, gizmo, presentation, graph-db, query-language] urls: [\u0026#39;https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery\u0026#39;]    In the yaml.go file, there is the ReadFromYaml() function, that we will use to read the data in.\nThe yaml.go contains two relevant functions:\n The ReadFromYaml() reads data in from YAML files, the SaveToYaml() saves data into a YAML format file.  Show the `yaml.go` file package impex import ( \u0026#34;gopkg.in/yaml.v2\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;log\u0026#34; path \u0026#34;path/filepath\u0026#34; ) // Read YAML file and unmarshal its content into the `dst` data structure, // using the `yaml` annotation of the structs. func ReadFromYaml(yamlPath string, dst interface{}) error { absPath, err := path.Abs(yamlPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } buf, err := ioutil.ReadFile(absPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } err = yaml.Unmarshal([]byte(buf), dst) if err != nil { log.Printf(\u0026#34;YAML unmarshal error: %v\u0026#34;, err) return err } return nil } // Marshal the content from the `dst` data structure, and savel into a YAML file // using the `yaml` annotation of the structs. func SaveToYaml(yamlPath string, src interface{}) error { buf, err := yaml.Marshal(src) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } absPath, err := path.Abs(yamlPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } return ioutil.WriteFile(absPath, buf, 0644) }    Define structures with annotations #  The description of the bookmark objects, and their schema annotations are placed into the bookmarks.go file, as well as the functions to import and export these objects.\nShow the `bookmarks.go` file package main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/cayley/graph\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/impex\u0026#34; \u0026#34;log\u0026#34; ) type Bookmarks []Bookmark type Bookmark struct { ID quad.IRI `yaml:\u0026#34;id\u0026#34; quad:\u0026#34;id\u0026#34;` Title string `yaml:\u0026#34;title\u0026#34; quad:\u0026#34;title\u0026#34;` Content string `yaml:\u0026#34;content\u0026#34; quad:\u0026#34;content,optional\u0026#34;` Author string `yaml:\u0026#34;author\u0026#34; quad:\u0026#34;author,optional\u0026#34;` Published string `yaml:\u0026#34;published\u0026#34; quad:\u0026#34;published,optional\u0026#34;` Tags []string `yaml:\u0026#34;tags,flow\u0026#34; quad:\u0026#34;tags\u0026#34;` Urls []string `yaml:\u0026#34;urls,flow\u0026#34; quad:\u0026#34;urls\u0026#34;` } type BookmarkShort struct { ID quad.IRI `yaml:\u0026#34;id\u0026#34; quad:\u0026#34;id\u0026#34;` Title string `yaml:\u0026#34;title\u0026#34; quad:\u0026#34;title\u0026#34;` Urls []string `yaml:\u0026#34;urls,flow\u0026#34; quad:\u0026#34;urls\u0026#34;` } func init() { schema.RegisterType(\u0026#34;Bookmark\u0026#34;, Bookmark{}) schema.RegisterType(\u0026#34;BookmarkShort\u0026#34;, BookmarkShort{}) } func Import(store *cayley.Handle, dbPath string) { var bm Bookmarks impex.ReadFromYaml(dbPath, \u0026amp;bm) qw := graph.NewWriter(store) defer qw.Close() // don\u0026#39;t forget to close a writer; it has some internal buffering \tfor _, b := range bm { _, err := schema.WriteAsQuads(qw, b) if err != nil { log.Fatalf(\u0026#34;%v\u0026#34;, err) } } } func GetAllShortBookmarks(store *cayley.Handle) (Bookmarks, error) { var bms Bookmarks //p := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)) \tp := cayley.StartPath(store, quad.IRI(\u0026#34;Bookmark\u0026#34;)).In(quad.IRI(\u0026#34;rdf:type\u0026#34;)) schemaConfig := schema.NewConfig() err := p.Iterate(context.Background()).EachValuePair(nil, func(ref graph.Ref, value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) //log.Printf(\u0026#34;%v, %v, %v\\n\u0026#34;, reflect.TypeOf(ref), ref.Key(), b) \tbms = append(bms, b) }) if err != nil { log.Printf(\u0026#34;%v\u0026#34;, err) return nil, err } return bms, nil } func GetAllBookmarks(store *cayley.Handle) (Bookmarks, error) { var bms Bookmarks p := cayley.StartPath(store, quad.IRI(\u0026#34;Bookmark\u0026#34;)).In(quad.IRI(\u0026#34;rdf:type\u0026#34;)) schemaConfig := schema.NewConfig() err := p.Iterate(context.Background()).EachValuePair(nil, func(ref graph.Ref, value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) if err != nil { log.Printf(\u0026#34;%v\u0026#34;, err) return nil, err } return bms, nil } func FindBookmarksByAnyTag(store *cayley.Handle, tags []quad.Value) (Bookmarks, error) { schemaConfig := schema.NewConfig() var bms Bookmarks p := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)).Has(quad.IRI(\u0026#34;tags\u0026#34;), tags...) err := p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) return bms, err } func FindBookmarksByEveryTag(store *cayley.Handle, tags []quad.Value) (Bookmarks, error) { schemaConfig := schema.NewConfig() var bms Bookmarks bookmarksMorph := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)) p := bookmarksMorph for _, t := range tags { p = cayley.StartPath(store).Follow(p).Has(quad.IRI(\u0026#34;tags\u0026#34;), t) } err := p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) return bms, err }    In the source code there are two structures defined:\n The Bookmark which is the full variant, ant the BookmarkShort which is a simplified variant.  In the struct declaration we placed the annotations to the yaml and quad serialization/deserialization. So these annotations can be used for both formats.\nData import based on annotated structures #  First we read the data into a []Bookmarks variable, then upload it into the store. For the uploading, we use the schema.WriteAsQuads() that is defined in the \u0026quot;github.com/cayleygraph/cayley/schema\u0026quot; package-ben, as we can see in the example in the import_bookmarks_with_schema.go file.\nShow the `import_bookmarks_with_schema.go` file package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; uuid \u0026#34;github.com/satori/go.uuid\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase\u0026#34; ) const bookmarksFixtures = \u0026#34;./bookmarks.yml\u0026#34; func init() { schema.GenerateID = func(o interface{}) quad.Value { switch o.(type) { case Bookmark: return quad.IRI(o.(Bookmark).ID) default: return quad.IRI(uuid.NewV4().String()) } } } func main() { ImportBookmarksWithSchema() } func ImportBookmarksWithSchema() { // Create an in-memory store \tstore := kbase.InitStore() // Load Bookmarks from YAML and upload into the mem-store \tImport(store, bookmarksFixtures) // Check if Bookmarks have been uploaded \tstats, err := store.Stats(context.Background(), true) if err != nil { panic(err) } else { fmt.Printf(\u0026#34;Successfully imported bookmarks into the mem-store as %d nodes and %d quads.\\n\u0026#34;, stats.Nodes.Size, stats.Quads.Size) } }    Run the program: \ncd schema go run impex_bookmarks_with_schema.go yamlImpex.go store.go bookmarks.go The results:\nSuccessfully imported bookmarks into the mem-store as 176 nodes and 245 quads. Data export based on annotated structures #  The export operation begins similarly to the import operation. First we read the data in from the YAML file, then we upload it into the store.\nThe we retrieve all the Bookmarks from the store within the following two functions:\n The GetAllBookmarks() function will show the results with full details, the GetAllShortBookmarks() will show the simplified version.  Both functions are implemented in the bookmarks.go file, and they use the schemaConfig.LoadTo() method to collect the properties of the resulted objects. In order to call this method, first we need to create a schemaConfig object, using the schema.NewConfig() function.\nShow the `impex_bookmarks_with_schema.go` file package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; uuid \u0026#34;github.com/satori/go.uuid\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase\u0026#34; ) const bookmarksFixtures = \u0026#34;./bookmarks.yml\u0026#34; func init() { schema.GenerateID = func(o interface{}) quad.Value { switch o.(type) { case Bookmark: return quad.IRI(o.(Bookmark).ID) default: return quad.IRI(uuid.NewV4().String()) } } } func main() { // Create an in-memory store \tstore := kbase.InitStore() // Import bookmarks data from yaml using the `Bookmark` schema \tImportBookmarksWithSchema(store) // Find all Bookmarks, and convert to and array of object using `Bookmark` schema. \tbookmarks, _ := GetAllBookmarks(store) printBookmarks(bookmarks) // Find all Bookmarks, and convert to and array of object using `ShortBookmark` schema. \tshortBookmarks, _ := GetAllShortBookmarks(store) printShortBookmarks(shortBookmarks) } func ImportBookmarksWithSchema(store *cayley.Handle) { // Load Bookmarks from YAML and upload into the mem-store \tImport(store, bookmarksFixtures) // Check if Bookmarks have been uploaded \t_, err := store.Stats(context.Background(), true) if err != nil { panic(err) } else { fmt.Printf(\u0026#34;Successfully imported bookmarks into the mem-store.\\n\u0026#34;) } } func printBookmarks(bookmarks Bookmarks) { fmt.Println(\u0026#34;\\nFull Bookmarks:\u0026#34;) for _, bookmark := range bookmarks { if bookmark.Author == \u0026#34;\u0026#34; { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, bookmark.Title) } else { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34; by %s\\n\\n\u0026#34;, bookmark.Title, bookmark.Author) } fmt.Printf(\u0026#34; %s\\n\\n\u0026#34;, bookmark.Urls[0]) } } func printShortBookmarks(bookmarks Bookmarks) { fmt.Println(\u0026#34;\\nShort Bookmarks:\u0026#34;) for _, bookmark := range bookmarks { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, bookmark.Title) fmt.Printf(\u0026#34; %s\\n\\n\u0026#34;, bookmark.Urls[0]) } }    Run the program: \ncd schema go run impex_bookmarks_with_schema.go yamlImpex.go store.go bookmarks.go The results:\nShow the results Successfully imported bookmarks into the mem-store. Full Bookmarks: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery - \u0026#34;Ontotext GraphDB\u0026#34; https://ontotext.com/products/graphdb/ - \u0026#34;Graphs and neural networks: Reading node properties\u0026#34; by David Mack https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb - \u0026#34;Towards building the next generation database query engine\u0026#34; by David Mack https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3 - \u0026#34;extracting-knowledge-from-knowledge-graphs\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Platypus\u0026#34; https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service - \u0026#34;Grakn.AI - learn\u0026#34; https://blog.grakn.ai/learn/home - \u0026#34;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#34; https://github.com/INK-USC/KagNet - \u0026#34;Knowledge extraction from unstructured texts\u0026#34; by Heuritech https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; by Andrew Jefferson https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;MacGraph\u0026#34; https://github.com/Octavian-ai/mac-graph - \u0026#34;octavian.ai\u0026#34; https://www.octavian.ai/ - \u0026#34;Build your own Knowledge Graph From unstructured dark data to valuable business insights\u0026#34; by Ignaz Wanders https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f - \u0026#34;Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph.\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;Knowledge Graphs in Natural Language Processing @ ACL 2020\u0026#34; by Michael Galkin https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1 - \u0026#34;Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#34; https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js - \u0026#34;FOAF Vocabulary Specification 0.99\u0026#34; http://xmlns.com/foaf/spec/ - \u0026#34;SuperMemo Website\u0026#34; https://www.supermemo.com/en/archives1990-2015/articles/devour - \u0026#34;Gellish.net\u0026#34; https://www.gellish.net/ - \u0026#34;Semantic Web and Model-Driven Engineering\u0026#34; http://www.allitebooks.org/semantic-web-and-model-driven-engineering/ - \u0026#34;MRD, Machine Readable dictionary\u0026#34; https://en.wikipedia.org/wiki/Machine-readable_dictionary Short Bookmarks: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery - \u0026#34;Ontotext GraphDB\u0026#34; https://ontotext.com/products/graphdb/ - \u0026#34;Graphs and neural networks: Reading node properties\u0026#34; https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb - \u0026#34;Towards building the next generation database query engine\u0026#34; https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3 - \u0026#34;extracting-knowledge-from-knowledge-graphs\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Platypus\u0026#34; https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service - \u0026#34;Grakn.AI - learn\u0026#34; https://blog.grakn.ai/learn/home - \u0026#34;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#34; https://github.com/INK-USC/KagNet - \u0026#34;Knowledge extraction from unstructured texts\u0026#34; https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;MacGraph\u0026#34; https://github.com/Octavian-ai/mac-graph - \u0026#34;octavian.ai\u0026#34; https://www.octavian.ai/ - \u0026#34;Build your own Knowledge Graph From unstructured dark data to valuable business insights\u0026#34; https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f - \u0026#34;Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph.\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;Knowledge Graphs in Natural Language Processing @ ACL 2020\u0026#34; https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1 - \u0026#34;Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#34; https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js - \u0026#34;FOAF Vocabulary Specification 0.99\u0026#34; http://xmlns.com/foaf/spec/ - \u0026#34;SuperMemo Website\u0026#34; https://www.supermemo.com/en/archives1990-2015/articles/devour - \u0026#34;Gellish.net\u0026#34; https://www.gellish.net/ - \u0026#34;Semantic Web and Model-Driven Engineering\u0026#34; http://www.allitebooks.org/semantic-web-and-model-driven-engineering/ - \u0026#34;MRD, Machine Readable dictionary\u0026#34; https://en.wikipedia.org/wiki/Machine-readable_dictionary     Related pages: "});index.add({'id':12,'href':'/cayley-cookbook/docs/working-with-cayley/queries/find_all_predicates/','title':"Find All Predicates",'section':"Queries",'content':"Find All Predicates #  Problem #  How can I list all the predicates used in the graph?\nTest Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format \u0026lt;alice\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;dani\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;emily\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;fred\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;follows\u0026gt; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;status\u0026gt; . \u0026lt;emily\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; .    Gizmo Query #  // Find all predicates g.V().OutPredicates().Union(g.V().InPredicates()).Unique().All(); Results:\n{\u0026#34;id\u0026#34;:\u0026#34;follows\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;status\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;are\u0026#34;} "});index.add({'id':13,'href':'/cayley-cookbook/docs/working-with-cayley/stores/make-quads/','title':"Make Quads",'section':"Stores",'content':"Make Quads #  Problem #  How can I crate new quads?\nCreate Quads #  package main import ( \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally \tluke := quad.RandomBlankNode() leia := quad.IRI(\u0026#34;starwars:leia_organa\u0026#34;) //quad.RandomBlankNode()  // Create Quads about to export \tlabel := \u0026#34;people\u0026#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Organa\u0026#34;, label)) return quads } "});index.add({'id':14,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/register-namespace/','title':"Register a New Namespace",'section':"Namespaces and Vocabularies",'content':"Register a New Namespace #  The next code registers a new namespace:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add built-in vocabulary \t_ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; // Add own vocabulary \t_ \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func init() { // Register a new namespace with prefix \tvoc.RegisterPrefix(`acc:`, `http://mycompany.com/voc/accounting#`) } func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;) for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full) } } \ncd namespaces go run register_namespace.go The results:\nRegistered namespaces: rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  foaf: =\u0026gt; http://xmlns.com/foaf/0.1/#  acc: =\u0026gt; http://mycompany.com/voc/accounting#  "});index.add({'id':15,'href':'/cayley-cookbook/docs/basic-concepts/resources/','title':"Resources",'section':"Basic Concepts",'content':"Resources #  Resource #  The resource is a generic term, that we use both on the normal web and in the domain of semantic web. We usually mean a tangible or an abstract thing.\nA resource has two important properties:\n it has unique identity, it can be represented (described in a way that holds each relevant properties of the resource).  Taken into consideration these two properties, we can say that the resource is compatible with the entity term of the Domain Driven Design methodology. From the perspective of our study, we can take these two terms to be equal with each other. It is very important to note that, we have to be able to uniquely identify the resource of discussion both globally or in a local scope, so it needs to have at least one unique ID, and we also have to describe it somehow.\nThere are several possible ways of describing a thing. it can be textual, image, binary program code, in-memory state, etc. In the followings we are going to focus standard representational formats, especially to the ones that are created for symbolic representations, such as the standards worked out for the semantic web.\nExamples of resources:\n specific, or imagined persons, tangible, real-world objects, abstract concepts.  The following code fragment represents an imagined person in JSON format:\n{ \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;star-wars-universe:luke_skywalker\u0026gt;\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;Luke\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Skywalker\u0026#34;, \u0026#34;age\u0026#34;: 23 } The same person in YAML representation:\n--- id: \u0026lt;star-wars-universe:luke_skywalker\u0026gt; firstName: Luke lastName: Skywalker age: 23 The same person is represented in two different formats.\nTypically the resources are the nodes of the knowledge-graphs, but often, the edges among the nodes are also resources, as they represent abstract concepts. In many cases, we can use these edges, as connections between resources, then they also appear in the form of nodes, when we want to make assertions about their properties, or want to define rules about their validity and usage.\nIRIs #  The resources (or entities) have to be identified. For this purpose we use the so called IRIs. IRI is the acronym of Internationalized Resource Identifier.\nAn IRI is a Unicode character string. Its standard format is defined by RFC 3987, and it uniquely identifies an entity.\nThe IRI strings can contain alpha-numeric characters, escape sequences, and these are enclosed between the \u0026lt; and \u0026gt; characters. An IRI is very similar to the URIs, that stands for Uniform Resource Identifier, which are well known from the World-Wide-Web.\nThe IRIs can be taken to the generalized version of URIs. The exist only in absolute form. every absolute URI can be used as an IRI, but not every IRI can be used as URL.\nBy definition, the IRIs are defined within global scope. Accordingly, Appearances of a given IRI in different situations, and environments mean the very same entity.\nEach IRI identifies a well defined thing as resource in the matter of discussion. The resource, that the IRI refers to is called referent.\nExamples for IRIs:\n\u0026lt;star-wars-universe:luke_skywalker\u0026gt; \u0026lt;star-wars-universe:han_solo\u0026gt; \u0026lt;35345322-543555-534534532\u0026gt; \u0026lt;https://en.wikipedia.org/wiki/Millennium_Falcon\u0026gt; The IRIs can identify abstract things and concepts as well, for example the attributes of entities as well as the relations among entities. Here are some examples for this:\n\u0026lt;has\u0026gt; \u0026lt;is\u0026gt; \u0026lt;nameOf\u0026gt; \u0026lt;foaf:knows\u0026gt; Literal values #  The resources we want to represent, usually have internal details, that we also want to describe. These internal properties have specific values.\nFor example, in case of a specific person, such properties can be the name of the person, the date of birth, etc. The values of these properties then the actual name and date, that the properties can hold.\nThese property values are named literal values, or simply literals.\nWe can define the type of a literal value, e.g.: string, integer number, date, etc.\nWe usually add the type information to the literal in postfix form, using the ^^ separator.\nExamples for typed values:\n\u0026#34;Dantooine\u0026#34;^^xsd:string \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; In case of a string, beside the type, we also can tell what language is used for definition. It is defined via a language tag, as a postfix value, using the @ character as separator.\nExamples for language identification:\n\u0026#34;people\u0026#34;@en \u0026#34;emberek\u0026#34;@hu Among others, it is also possible to define the direction of writing in addition to the language definition, however these fine details are not necessary to know in order to start using the Cayley system.\n"});index.add({'id':16,'href':'/cayley-cookbook/docs/cayley-overview/cayley-init/','title':"The `cayley init` command",'section':"Cayley Overview",'content':"The cayley init command #  We can create an empty database with the cayley init command.\n  Figure 1.: cayley init   The following command will create a persistent database, using the Bolt key-value store type, in the /home/tombenke/tmp/cayleydb folder:\n$ cayley init --db bolt --dbpath /home/tombenke/tmp/cayleydb I0915 17:52:56.529687 24933 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0915 17:52:56.529904 24933 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayleydb) The resulted database can be used by the other commands, such as: load, dump, repl, query and http.\n"});index.add({'id':17,'href':'/cayley-cookbook/docs/working-with-cayley/queries/bidirectional/','title':"Bi-directional Relations",'section':"Queries",'content':"Bi-directional Relations #  Problem #  If I have a graph: A \u0026lt;-1-\u0026gt; B \u0026lt;-2-\u0026gt; C where A, B, C are subjects and objects linked with predicates 1, 2 (bidirectional). How can I get C using a path?\nTest data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format \u0026lt;A\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;B\u0026gt; . \u0026lt;B\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;A\u0026gt; . \u0026lt;B\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;C\u0026gt; . \u0026lt;C\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;B\u0026gt; . \u0026lt;A1\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;B1\u0026gt; . \u0026lt;B1\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;A1\u0026gt; . \u0026lt;B1\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;C1\u0026gt; . \u0026lt;C1\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;B1\u0026gt; . \u0026lt;A2\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;B2\u0026gt; . \u0026lt;B2\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;A2\u0026gt; . \u0026lt;B2\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;C2\u0026gt; . \u0026lt;C2\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;B2\u0026gt; .    Gizmo Query #  Simple query #  g.V().Tag(\u0026#34;source\u0026#34;).Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Tag(\u0026#39;target\u0026#39;).Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;).All() Results:\n{\u0026#34;id\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C1\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C2\u0026#34;} Query with bidirectional predicate #  g.V().Tag(\u0026#34;source\u0026#34;).Both(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;).Both(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Tag(\u0026#39;target\u0026#39;).All() Results:\n{\u0026#34;id\u0026#34;:\u0026#34;C\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;C1\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C1\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;C2\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C2\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;C\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;C1\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C1\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;C2\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C2\u0026#34;} Query with morphism #  // with morphism forth = g.V().Tag(\u0026#34;source\u0026#34;).Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Tag(\u0026#34;target\u0026#34;); back = g.M().Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;) forth.Follow(back).All() Results:\n{\u0026#34;id\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C1\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;source\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C2\u0026#34;} Golang Implementation #  Show the source code package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; ) func main() { // Create an in-memory store \tstore := InitStore() // Create Quads and uploads to the store \tquads := makeQuads() AddQuadsToStore(store, quads) // Execute the query \tdoQuery(store) } // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { panic(err) } return store } func makeQuads() []quad.Quad { quads := []quad.Quad{} quads = append(quads, quad.Make(\u0026#34;A\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;C\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;A1\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;B1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B1\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;A1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;C1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;C1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;B1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;A2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;B2\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;A2\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B2\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;C2\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;C2\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;B2\u0026#34;, \u0026#34;\u0026#34;)) return quads } func AddQuadsToStore(store *cayley.Handle, quads []quad.Quad) { for _, q := range quads { store.AddQuad(q) } } func doQuery(store *cayley.Handle) { p := cayley.StartPath(store).Tag(\u0026#34;source\u0026#34;).Out(\u0026#34;1\u0026#34;).Out(\u0026#34;2\u0026#34;).Tag(\u0026#34;target\u0026#34;).Out(\u0026#34;2\u0026#34;).Out(\u0026#34;1\u0026#34;) p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { fmt.Printf(\u0026#34;%v\\n\u0026#34;, value) }) p.Iterate(context.Background()).TagValues(store, func(t map[string]quad.Value) { fmt.Printf(\u0026#34;%v\\n\u0026#34;, t) }) }    Results:\n\u0026#34;A\u0026#34; \u0026#34;A1\u0026#34; \u0026#34;A2\u0026#34; map[source:\u0026#34;A\u0026#34; target:\u0026#34;C\u0026#34;] map[source:\u0026#34;A1\u0026#34; target:\u0026#34;C1\u0026#34;] map[source:\u0026#34;A2\u0026#34; target:\u0026#34;C2\u0026#34;] "});index.add({'id':18,'href':'/cayley-cookbook/docs/cayley-overview/','title':"Cayley Overview",'section':"Docs",'content':"This section gives an overview about the elements of the Cayley ecosystem. It shortly summarizes how can we use the individual commands and elements.\nThe detailed guidelines and help to these components can be found on the official documentation pages.\nInstallation #  This cookbook has been written on a Linux machine. The simplest way to install Cayley on Linux is using snap:\nsnap install --edge --devmode cayley The Usage of Cayley #  The Cayley can be used mainly in two ways:\n as a stand-alone binary, as a library, built-into another application, written in Go.  Using cayley as a Go library #  The Working with Knowledge Graph chapter brings several examples about how to use Cayley as a library.\nUsing cayley as stand-alone binary #  The binary application, provides several commands.\nYou can list all the available commands, by requesting the help:\n$ cayley -h Cayley is a graph store and graph query layer. Usage: cayley [command] Available Commands: convert Convert quad files between supported formats. dedup Deduplicate bnode values dump Bulk-dump the database into a quad file. help Help about any command http Serve an HTTP endpoint on the given host and port. init Create an empty database. load Bulk-load a quad file into the database. query Run a query in a specified database and print results. repl Drop into a REPL of the given query language. upgrade Upgrade Cayley database to current supported format. version Prints the version of Cayley. The following commands can be used to start the triple-store and the built-in query engine in different ways:\n as a HTTP server: cayley http. as a REPL server: cayley repl. as a Query server: cayley query.  This binary is also good for data management, such as:\n Creating a persistent database: cayley init, Load data into a (persistent) database from a file: cayley load, Save data from a (persistent) database into a file: cayley dump. convert resource descriptor files among different representational formats: cayley conv.  In the following subsections we will briefly summarize, how to use these commands.\nIn-memory vs. persistent stores #  The Cayley is a triple-store, which can load n-quads and/or n-triples into its database, and allows to run queries on the loaded data. There are several query languages supported. This cookbook is focusing only on the so called Gizmo language.\nThe database can be either in-memory or persistent, and we mostly use the store terminology instead of the database term. Actually Cayley offers several backing databases to store the quads persistently. The default persistent database is the Bolt key-value database, but we can change this via configuration. We can choose from several types of key-value, NoSQL and SQL databases. Read the documentation pages on configuration settings for more details.\nThe in-memory store can be immediately used by both the stand-alone application and by the built-in library. The in-memory store is the default one. The persistent store is different. It needs to be initialized before we can use it.\nWhen we use the stand-alone Cayley binary, we can initialize a new database by either using the --init switch or explicitly initialize the database with the cayley init command, before we start using this with the other commands.\nIf we want to use a persistent store we have to tell the cayley command which type of database we aim to use, that we can do either via the command line arguments or via a configuration file.\nThe config file can be written both in JSON or YAML format. This is an example config file, that defines a persistent key-value store, using Bolt, and the database file will be placed under the /home/tombenke/cayley/ folder:\n{ \u0026#34;store\u0026#34;: { \u0026#34;backend\u0026#34;: \u0026#34;bolt\u0026#34;, \u0026#34;address\u0026#34;: \u0026#34;/home/tombenke/tmp/cayley\u0026#34;, \u0026#34;read_only\u0026#34;: false, \u0026#34;options:\u0026#34;: { \u0026#34;nosync\u0026#34;: false } } } Note:\nWhen we run a cayley command, it locks the database, so it is not possible for example to load data into a persistent database that is currently used by another command, such as http, etc. So there are two ways to manipulate data in a persistent store:\n Use the cayley commands individually, one-by-one, for example: init, load, http, dump, Use the REST API of the cayley http mode, which makes possible to alter the content in parallel using the query functionalities at the same time.   "});index.add({'id':19,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/vocabularies/','title':"Create a New Vocabulary",'section':"Namespaces and Vocabularies",'content':"Create a New Vocabulary #  The following code demonstrates how can a new vocabulary be defined. The foaf.go package defines the most frequently used terms of the FOAF Vocabulary Specification. This package is used by several other examples of the cookbook as a vocabulary to use some terms as predicates.\n// Package foaf contains constants of the FOAF Concepts Vocabulary (RDF) package foaf import \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; func init() { voc.RegisterPrefix(Prefix, NS) } const ( NS = `http://xmlns.com/foaf/0.1/#` Prefix = `foaf:` ) const ( // Core  // An agent (eg. person, group, software or physical artifact).  Agent = Prefix + `Agent` // A person.  Person = Prefix + `Person` // A name for some thing.  Name = Prefix + `name` // Title (Mr, Mrs, Ms, Dr. etc)  Title = Prefix + `title` // An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one\u0026#39;s photo on a homepage).  Img = Prefix + `img` // A thing depicted in this representation.  Depiction = Prefix + `depiction` Depicts = Prefix + `depicts` // The family name of some person.  FamilyName = Prefix + `familyName` // The first name of some person.  GivenName = Prefix + `givenName` // The gender of this Agent (typically but not necessarily \u0026#39;male\u0026#39; or \u0026#39;female\u0026#39;).  Gender = Prefix + `gender` // A person known by this person (indicating some level of reciprocated interaction between the parties).  Knows = Prefix + `knows` // A location that something is based near, for some broadly human notion of near.  BasedNear = Prefix + `based_near` // The age in years of some agent.  Age = Prefix + `age` // The birthday of this Agent, represented in mm-dd string form, eg. \u0026#39;12-31\u0026#39;.  Birthday = Prefix + `birthday` // Something that was made by this agent.  Made = Prefix + `made` PrimaryTopic = Prefix + `primaryTopic (primaryTopicOf)` // A project (a collective endeavour of some kind).  Project = Prefix + `Project` // An organization.  Organization = Prefix + `Organization` // A class of Agents.  Group = Prefix + `Group` // A string expressing what the user is happy for the general public (normally) to know about their current activity.  Status = Prefix + `status` // Indicates a member of a Group  Member = Prefix + `member` // A document.  Document = Prefix + `Document` // An image.  Image = Prefix + `Image` // SocialWeb  // A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).  Nick = Prefix + `nick` // A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox.  Mbox = Prefix + `mbox` // A homepage for some thing.  Homepage = Prefix + `homepage` // A weblog of some thing (whether person, group, company etc.).  Weblog = Prefix + `weblog` // An OpenID for an Agent.  Openid = Prefix + `openid` // A jabber ID for something.  JabberID = Prefix + `jabberID` // sha1sum of a personal mailbox URI name - The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.  MboxSha1sum = Prefix + `mbox_sha1sum` // A page about a topic of interest to this person.  Interest = Prefix + `interest` // A thing of interest to this person.  TopicInterest = Prefix + `topic_interest` // A topic of some page or document.  Topic = Prefix + `topic` // A workplace homepage of some person; the homepage of an organization they work for.  WorkplaceHomepage = Prefix + `workplaceHomepage` // A work info homepage of some person; a page about their work for some organization.  WorkInfoHomepage = Prefix + `workInfoHomepage` // A homepage of a school attended by the person.  SchoolHomepage = Prefix + `schoolHomepage` // A link to the publications of this person.  Publications = Prefix + `publications` // A current project this person works on.  CurrentProject = Prefix + `currentProject` // A project this person has previously worked on.  PastProject = Prefix + `pastProject` // Indicates an account held by this agent.  Account = Prefix + `account` // An online account  OnlineAccount = Prefix + `OnlineAccount` // Indicates the name (identifier) associated with this online account.  AccountName = Prefix + `accountName` // Indicates a homepage of the service provide for this online account.  AccountServiceHomepage = Prefix + `accountServiceHomepage` // A personal profile RDF document  PersonalProfileDocument = Prefix + `PersonalProfileDocument` // A tipjar document for this agent, describing means for payment and reward.  Tipjar = Prefix + `tipjar` // A sha1sum hash, in hex.  Sha1 = Prefix + `sha1` // A derived thumbnail image.  Thumbnail = Prefix + `thumbnail` // A logo representing some thing.  Logo = Prefix + `logo` )  Related pages:   Vocabularies   "});index.add({'id':20,'href':'/cayley-cookbook/docs/working-with-cayley/impex/','title':"Data import / export",'section':"Working with Knowledge Graph",'content':"Data import / export #  This section demonstrates how to import and export simple quads and complex data structures.\n"});index.add({'id':21,'href':'/cayley-cookbook/docs/working-with-cayley/stores/print-all-nodes/','title':"List all nodes from store",'section':"Stores",'content':"List all nodes from store #  Problem #  How can I retrieve and print all nodes from the store?\nTest Data #  package main import ( \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally \tluke := quad.RandomBlankNode() leia := quad.IRI(\u0026#34;starwars:leia_organa\u0026#34;) //quad.RandomBlankNode()  // Create Quads about to export \tlabel := \u0026#34;people\u0026#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Organa\u0026#34;, label)) return quads } Retrieve and list all nodes from the store: #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllNodes(store) } func printAllNodes(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.NodesAllIterator() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it)) for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Println() } } Results:\nMemStoreAll *memstore.AllIterator Ref: 1 memstore.bnode Key: 1 memstore.bnode Value: _:n572635999122952936 quad.BNode Ref: 2 memstore.bnode Key: 2 memstore.bnode Value: \u0026lt;rdf:type\u0026gt; quad.IRI Ref: 3 memstore.bnode Key: 3 memstore.bnode Value: \u0026lt;foaf:Person\u0026gt; quad.IRI Ref: 4 memstore.bnode Key: 4 memstore.bnode Value: \u0026#34;people\u0026#34; quad.String Ref: 6 memstore.bnode Key: 6 memstore.bnode Value: \u0026lt;foaf:givenName\u0026gt; quad.IRI Ref: 7 memstore.bnode Key: 7 memstore.bnode Value: \u0026#34;Luke\u0026#34; quad.String Ref: 9 memstore.bnode Key: 9 memstore.bnode Value: \u0026lt;foaf:familyName\u0026gt; quad.IRI Ref: 10 memstore.bnode Key: 10 memstore.bnode Value: \u0026#34;Skywalker\u0026#34; quad.String Ref: 12 memstore.bnode Key: 12 memstore.bnode Value: \u0026lt;foaf:age\u0026gt; quad.IRI Ref: 13 memstore.bnode Key: 13 memstore.bnode Value: \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Int Ref: 15 memstore.bnode Key: 15 memstore.bnode Value: \u0026lt;starwars:leia_organa\u0026gt; quad.IRI Ref: 17 memstore.bnode Key: 17 memstore.bnode Value: \u0026lt;foaf:knows\u0026gt; quad.IRI Ref: 19 memstore.bnode Key: 19 memstore.bnode Value: \u0026#34;Leia\u0026#34; quad.String Ref: 21 memstore.bnode Key: 21 memstore.bnode Value: \u0026#34;Organa\u0026#34; quad.String "});index.add({'id':22,'href':'/cayley-cookbook/docs/basic-concepts/statements/','title':"Statements",'section':"Basic Concepts",'content':"Statements #  Subject, Predicate Object #  We use statements of facts to define knowledge. In general, we usually use declarative sentences to make statements of facts.\nFor example:\nLuke Skywalker is 23 years old. or, in other words:\nLuke Skywalker has age 23. It is possible to convert these declarative sentences into a subject-predicate-object structure.\nLuke-Skywalker has-age 23. The parts of this sentence:\n subject: Luke-Skywalker, predicate: has-age, object: 23.  As there may many Luke Skywalker exist in our World, therefor we will use the Luke-Skywalker-from-StarWars identifier to the specific person, that is the subject/object of our discussion.\nWe want to use this universal ID in standard format, so Luke\u0026rsquo;s ID will be the following IRI: \u0026lt;Luke-Skywalker-from-StarWars\u0026gt;.\nLuke is a resource, or entity in other words, that we can obviously identify by an IRI. He has the age property, that we can can express by the \u0026lt;has-age\u0026gt; IRI, since this is a generic term. In addition, we need a literal value, that is 23, with the type of integer. This is the value that belongs to the \u0026lt;has-age\u0026gt; property, in case of Luke.\nThe final statement looks like this:\n\u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-age\u0026gt; 23^^integer . We can observe on the Figure 1. that the subject-predicate-object triple can be visualized as a simple graph, where the subject and object show up as nodes, and the predicate appears as a labeled edge between these two nodes.\nImportant Note:\nInternally, the predicates are also represented in the form of graph nodes, such as IRIs or even as Literal values too. They can appear in the results of queries too. The Figure 1. shows the classical graph visualization of triples in the form of binary relations.\n   Figure 1.: Subject-Predicate-Object Graph   The statements written in this form mentioned above are also called triples.\nLet\u0026rsquo;s see how could we define for the computer the following facts:\nLuke Skywalker is a person in the StarWars Universe. His family name is Skywalker, and his given name is Luke. Luke is 23 years old. Leia Organa is a person in the StarWars Universe. Her family name is Organa, and her first name is Leia. Leia knows Luke. Let\u0026rsquo;s transform the sentences listed above to the subject-predicate-object format, using IRIs for the predicates:\n\u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;is-a\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-given-name\u0026gt; \u0026#34;Luke\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-family-name\u0026gt; \u0026#34;Skywalker\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-age\u0026gt; 23 . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;is-a\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;has-given-name\u0026gt; \u0026#34;Leia\u0026#34; . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;has-family-name\u0026gt; \u0026#34;Organa\u0026#34; . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;knows\u0026gt; \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; . These statements will be visualized as graph, including the resources, predicates and literals we have just introduced.\nThe resources (subjects and objects):\n Luke Skywalker in the StarWars Universe: \u0026lt;Luke-Skywalker-from-StarWars\u0026gt;, Leia Organa in the StarWars Universe: \u0026lt;Leia-Organa-from-StarWars\u0026gt;, Person (as concept): \u0026lt;Person\u0026gt;.  The predicates:\n \u0026lt;is-a\u0026gt;, \u0026lt;has-given-name\u0026gt;, \u0026lt;has-family-name\u0026gt;, \u0026lt;has-age\u0026gt;, \u0026lt;knows\u0026gt;.  The literals:\n \u0026quot;Luke\u0026quot;, \u0026quot;Skywalker\u0026quot;, \u0026quot;Leia\u0026quot;, \u0026quot;Organa\u0026quot;, 23.  The Figure 2. demonstrates how the statements listed above appear as graph:\n  Figure 2.: Predicates represented as graph   The entities appear in yellow color, and the literals are drawn in green color.\nBlank Nodes #  Often, when we define the knowledge, we do not want to use IRIs for identification with global scope, only with scope internal to the given graph, or source file, that holds the statements. In these cases, we only need to be able to express somehow that which subject and object are connected to each other via a predicate, so it is enough to use an internal ID, that can be auto-generated, and even a hidden one. These nodes are called Blank Nodes.\nA Blank Node also has a unique identifier, that has internal scope only for the actual graph, that is valid until the program is running.\nThe name of Blank nodes begin with the _:, that is followed by some (randomly-generated) alpha-numeric string.\nThe Figure 3. shows a graph, that is very similar to the one on Figure 2., but in this latter case the two persons are not identified by global IRIs, but by Blank nodes with local scope.\n  Figure 3.: Predicates represented as graph, using Blank nodes   The Blank Nodes appear in gray color.\n Related pages:   Knowledge-Graph Representations   "});index.add({'id':23,'href':'/cayley-cookbook/docs/cayley-overview/cayley-load/','title':"The `cayley load` command",'section':"Cayley Overview",'content':"The cayley load command #  The cayley load command loads resource descriptions into an existing database.\n  Figure 1.: cayley load   The following command loads the content of the data/testdata.nq file into a previously created database:\n$ cayley load --db bolt --dbpath /home/tombenke/tmp/cayley/ --load data/testdata.nq I0915 18:01:07.140303 25803 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0915 18:01:07.140500 25803 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) "});index.add({'id':24,'href':'/cayley-cookbook/docs/working-with-cayley/','title':"Working with Knowledge Graph",'section':"Docs",'content':"This chapter demonstrates how can we work with the Cayley Knowledge Graphs.\nThe individual examples, and use-cases try to demonstrate, how to use the several tools and capabilities of Cayley such as the Gizmo query language and the usage of built-in Go functions.\n"});index.add({'id':25,'href':'/cayley-cookbook/docs/working-with-cayley/stores/print-all-quads/','title':"List all quads from store",'section':"Stores",'content':"List all quads from store #  Problem #  How can I retrieve and print all quads from the store?\nRetrieve and list all quads from the store: #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllQuads(store) } func printAllQuads(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.QuadsAllIterator() //fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it))  for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) quad := store.Quad(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Printf(\u0026#34;Quad: %v %v\\n\u0026#34;, quad, reflect.TypeOf(quad)) fmt.Println() /* v := it.Result() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, v, reflect.TypeOf(v)) fmt.Printf(\u0026#34;%v\\n\u0026#34;, v.Key()) name := store.NameOf(v) fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, name, reflect.TypeOf(name)) q := store.Quad(v) fmt.Println(q) fmt.Println() */ } } Results:\nRef: {0xc00007a1c0} memstore.qprim Key: 5 int64 Value: _:memnode5 quad.BNode Quad: _:n8885344001569243985 -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007a3c0} memstore.qprim Key: 8 int64 Value: _:memnode8 quad.BNode Quad: _:n8885344001569243985 -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Luke\u0026#34; quad.Quad Ref: {0xc00007a500} memstore.qprim Key: 11 int64 Value: _:memnode11 quad.BNode Quad: _:n8885344001569243985 -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Skywalker\u0026#34; quad.Quad Ref: {0xc00007a640} memstore.qprim Key: 14 int64 Value: _:memnode14 quad.BNode Quad: _:n8885344001569243985 -- \u0026lt;foaf:age\u0026gt; -\u0026gt; \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Quad Ref: {0xc00007a740} memstore.qprim Key: 16 int64 Value: _:memnode16 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007a800} memstore.qprim Key: 18 int64 Value: _:memnode18 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:knows\u0026gt; -\u0026gt; _:n8885344001569243985 quad.Quad Ref: {0xc00007a900} memstore.qprim Key: 20 int64 Value: _:memnode20 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Leia\u0026#34; quad.Quad Ref: {0xc00007a9c0} memstore.qprim Key: 22 int64 Value: _:memnode22 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Organa\u0026#34; quad.Quad "});index.add({'id':26,'href':'/cayley-cookbook/docs/working-with-cayley/queries/','title':"Queries",'section':"Working with Knowledge Graph",'content':"This chapter demonstrates how to execute queries with Cayley .\n"});index.add({'id':27,'href':'/cayley-cookbook/docs/cayley-overview/cayley-dump/','title':"The `cayley dump` command",'section':"Cayley Overview",'content':"The cayley dump command #  The cayley dump command reads out the resource descriptions from an existing database and write that into a file or to the standard output. The format type is determined by the given file extension, but it is also can be selected by the --dump_format \u0026lt;format-name\u0026gt; argument, where the possible values of \u0026lt;format-name\u0026gt; are: \u0026ldquo;gml\u0026rdquo;, \u0026ldquo;graphml\u0026rdquo;, \u0026ldquo;graphviz\u0026rdquo;, \u0026ldquo;json\u0026rdquo;, \u0026ldquo;json-stream\u0026rdquo;, \u0026ldquo;jsonld\u0026rdquo;, \u0026ldquo;nquads\u0026rdquo;, \u0026ldquo;pquads\u0026rdquo;.\n  Figure 1.: cayley dump   The following command dumps the content to the dump.nq file:\n$ cayley dump --db bolt --dbpath /home/tombenke/tmp/cayley/ -o dump.out I0916 07:15:25.453665 5286 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0916 07:15:25.453848 5286 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) writing quads to file \u0026#34;dump.out\u0026#34; 15 entries were written Dump the actual content of a database to the stdout:\n$ cayley dump --db bolt --dbpath /home/tombenke/tmp/cayley/ I0915 18:03:30.188245 25985 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0915 18:03:30.188453 25985 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) I0915 18:03:30.191235 25985 dump.go:20] writing quads to stdout \u0026lt;alice\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;dani\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;emily\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;fred\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;follows\u0026gt; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;status\u0026gt; . \u0026lt;emily\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; . "});index.add({'id':28,'href':'/cayley-cookbook/docs/basic-concepts/vocabularies/','title':"Vocabularies",'section':"Basic Concepts",'content':"Vocabularies #  Vocabulary #  One of the big advantages of using knowledge-graphs is that the domain knowledge of the subject area is represented and manipulated in the symbolic space, so it is relatively easy to understand for human beings. What is even more important, it is possible to obviously identify and transmit concepts among the information processing agents, whether they are humans or computers. This way the mapping of tangible physical things, and abstract concepts are possible without misunderstanding.\nWhen we give a name an entity, or we use statements by predicates, the machine and the programmer must have to mean the same meaning behind that name. The human languages are rather redundant, and they are full with homonyms and synonyms. So we need to use well defined vocabularies that clearly define these one-to-one mappings among these entities and their names. In most of the cases these vocabularies contain IRIs to name the entities and predicates, accompanied with some details, that mention their meaning. The vocabularies may also contain application rules about the predicates and resources.\nThe IRIs of the vocabularies mostly are English words or acronyms. The same word -whether we use it to identify an entity or a predicate- may mean different thing in different contexts. For example the word robot can mean an industrial assembly robot or welding robot, in case our context is a car-assembly factory, but it can also mean an intelligent humanoid droid in case of a sci-fi novel. So the predicate IRIs such as \u0026lt;knows\u0026gt;, \u0026lt;Person\u0026gt; that we\u0026rsquo;ve been using so far were not precise enough.\nIn order to make the IRIs more specific, and unambiguous, it is typical to create dedicated vocabularies to the specific business or scientific domains. These vocabularies may contain generic terms, e. g. person, friend, knows, parent, typeOf, but they can be very particular, which belong to a narrow field, such as antibiotics research. It is also possible that the same word exists in several vocabularies, with similar or even with different meanings.\nThe FOAF is a very good example to a generic vocabulary, that holds IRIs to describe personal and/or organizational properties and profiles.\nWhen we use the IRIs, we usually indicate which vocabulary the IRI belongs to, so that ensure unambiguity of its meaning. We can do this via an identifier string, that we put to the front of the IRI. This string uniquely and globally identifies the vocabulary, the given IRI belongs to.\nLet\u0026rsquo;s extend the previously defined predicates with an identifier, which indicates that these predicates belong to the FOAF vocabulary:\n\u0026lt;http://xmlns.com/foaf/0.1/#age\u0026gt; \u0026lt;http://xmlns.com/foaf/0.1/#familyName\u0026gt; \u0026lt;http://xmlns.com/foaf/0.1/#givenName\u0026gt; \u0026lt;http://xmlns.com/foaf/0.1/#Person\u0026gt; Namespaces #  In the previous section we introduced the vocabulary identifier string (e.g. http://xmlns.com/foaf/0.1/#), which makes unambiguous the meaning of the IRIs that we use as subjects, objects or predicates. This identifier string defines a so called namespace, in which the words are interpreted. These IRIs are unambiguous, but not too readable for humans. In order to make more convenient to read and write the predicates, we apply a so called prefix, which is a short version of the ID, and that we append to the front of the IRI, separated by an : from the word.\nIn case of the FOAF vocabulary we use the foaf: prefix:\n namespace: http://xmlns.com/foaf/0.1/ prefix: foaf  Now, let\u0026rsquo;s see our predicates in this prefixed form:\n\u0026lt;foaf:age\u0026gt; \u0026lt;foaf:familyName\u0026gt; \u0026lt;foaf:givenName\u0026gt; \u0026lt;foaf:Person\u0026gt; The full IRIs and the prefixed IRIs are equivalent. The only difference between the two formats is that the full IRIs can be used everywhere, but the prefixed version may used only we have introduced the prefix and namespace, and tied them up with each other. It means, we need to define which prefix identifies which namespace. Each standard knowledge representational formats (RDF, Turtle, etc.) makes this possible via special syntax elements.\nThese are the most relevant vocabularies, that are registered by default in Cayley :\n   prefix namespace     owl http://www.w3.org/2002/07/owl#   rdf http://www.w3.org/1999/02/22-rdf-syntax-ns#   rdfs http://www.w3.org/2000/01/rdf-schema#   schema http://schema.org/   xsd http://www.w3.org/2001/XMLSchema#    We can create vocabularies too. For example we can introduce the following namespace/prefix pair for the Star-Wars Universe:\n namespace: http://starwars.universe/# prefix: starwars  then we can use it, in the followings:\n\u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;starwars:Leia-Organa\u0026gt; Within a specific knowledge representation file, we can combine the IRIs defined by several vocabularies. Let\u0026rsquo;s see how do our statements look like using the prefixed IRIs:\n\u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;rdf:type\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;foaf:givenName\u0026gt; \u0026#34;Luke\u0026#34; . \u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;foaf:familyName\u0026gt; \u0026#34;Skywalker\u0026#34; . \u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;foaf:age\u0026gt; 23 . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;rdf:type\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;foaf:givenName\u0026gt; \u0026#34;Leia\u0026#34; . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;foaf:familyName\u0026gt; \u0026#34;Organa\u0026#34; . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;knows\u0026gt; \u0026lt;starwars:Luke-Skywalker\u0026gt; . Ontologies #  For the sake of completeness, it is important to note that many of the vocabularies offers much more information, than simply just introduce the list of words with prefixes.\nThe semantic web technology enables us to define resources and predicates that hold additional, meta-information on other resources, and predicates. For example, we can describe the properties of predicates, whether they are reflexive, or transitive, etc.). This meta-information can be used by the inference engines to deduce implicit information from the graphs, that are not written explicitly, and do reasoning, by applying the rules of logic. These extended knowledge representations, that hold such meta-informations are called Ontologies.\nFor example, if we would know that the \u0026lt;foaf:knows\u0026gt; relation is reflexive, then it were enough to say that\n\u0026lt;starwars:Luke_Skywalker\u0026gt; \u0026lt;foaf:knows\u0026gt; \u0026lt;starwars:Leia_Organa\u0026gt; . moreover, we could apply the rule of logic to the statement, and infer another, implicit statement that is also true:\n\u0026lt;starwars:Leia_Organa\u0026gt; \u0026lt;foaf:knows\u0026gt; \u0026lt;starwars:Luke_Skywalker\u0026gt; .  Related pages:   Create a New Vocabulary     List Registered Namespaces     Register a New Namespace   "});index.add({'id':29,'href':'/cayley-cookbook/docs/working-with-cayley/crud-operations/','title':"CRUD Operations",'section':"Working with Knowledge Graph",'content':"This section demonstrates how to execute the Create / Retrieve / Update / Delete (CRUD) operations on the knowledge-graph.\n"});index.add({'id':30,'href':'/cayley-cookbook/docs/basic-concepts/rdf-graphs/','title':"Knowledge-Graph Representations",'section':"Basic Concepts",'content':"Knowledge-Graph Representations #  In the previous sections we described, how can we make statements of facts by the application of resources, predicates and literal values. These statements are named triples.\nWe also introduced the concept of IRI, that makes possible to write unambiguous statements in standardized format, that are generally applicable. This way we have a simple solution to define the nodes and edges of the knowledge graph, including their labels, by the use of a plain text editor. We can store these graph descriptions in plain text files, that we can load into a graph database, as well as we can export the graphs from the database into text files.\nThe graph database has its own internal representation to store and index the nodes and edges. When we store the knowledge representation in text files, we have several options to choose a standard format for this. In the following sub-sections, we summarize the most widespread formats we can choose from, when we work with Cayley .\nThe most fundamental, base framework we use to describe resources is called RDF. The RDF is the acronym of Resource Description Framework expression.\nThe RDF standard defines several file-serialization formats. The most frequently used formats are text based formats, that also have their corresponding mime-types.\nThe next table briefly summarizes the nuts-and-bolts of these formats:\nNote:\nThis table lists these format only for the sake of completeness. In the first approximation to this topic, it is not needed to dive into the details of all these formats and the complete semantic technology stack. We focus on the practical aspects.\nIn order to use Cayleywe only need to know n-quads, n-triples formats. The Turtle format is also very useful and we will use it in some of our examples.\n    format file extension mime-type when to use?     n-triples .nt application/n-triples In case we need acceptable performance, and want to ensure high level of compatibility.   n-quads .nq application/n-quads The same as with n-triples   Turtle .ttl application/x-turtle In case we need to read and write the content manually.   N3 .n3 text/n3 in case we need to apply RDF rules.   RDF/XML .xml application/rdf+xml If we have to use XML.   JSON-LD .jsonld application/ld+json When we want to provide a JSON API, or we need to connect to a JSON-LD API, and there is no high performance need.    n-triples, n-quads #  These two formats are nearly identical. In fact, the n-triples are the statements that we introduced in the previous sections. In the text file, each statement is placed a separate line that is closed by the . character. For example:\n\u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;is-a\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-given-name\u0026gt; \u0026#34;Luke\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-family-name\u0026gt; \u0026#34;Skywalker\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-age\u0026gt; 23 . The n-quads format differs only slightly from the n-triples format. The n-quads statements may contain a fourth element, that is a string that called (graph-) label. this label can identify the graph the statement belongs to. This way it is possible to store more than one graphs in the database, that are not fully connected with each other, that makes the performance optimization easier in case of indexing and querying.\nThe following code fragment contains n-quads statements, that are extended with the \u0026quot;a-new-hope\u0026quot; label:\n\u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;is-a\u0026gt; \u0026lt;Person\u0026gt; \u0026#34;a-new-hope\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-given-name\u0026gt; \u0026#34;Luke\u0026#34; \u0026#34;a-new-hope\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-family-name\u0026gt; \u0026#34;Skywalker\u0026#34; \u0026#34;a-new-hope\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-age\u0026gt; 23 \u0026#34;a-new-hope\u0026#34; . This label refers to the film episode in which the characters appeared first time.\nThe next code fragment describes the Dantooine planet in n-triples format. This example is made for the sake of comparison with the other formats that we will describe below. The same planet will be represented by the several formats in the upcoming examples.\n\u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type\u0026gt; \u0026lt;https://swapi.co/vocabulary/Planet\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;http://www.w3.org/2000/01/rdf-schema#label\u0026gt; \u0026#34;Dantooine\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#string\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;http://www.ontotext.com/business-object/type\u0026gt; \u0026#34;Planet\u0026#34; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/climate\u0026gt; \u0026#34;temperate\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#string\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/desc\u0026gt; \u0026#34;None\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#string\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/diameter\u0026gt; \u0026#34;9830\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#integer\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/gravity\u0026gt; \u0026#34;1 standard\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#string\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/orbitalPeriod\u0026gt; \u0026#34;378\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#integer\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/population\u0026gt; \u0026#34;1000\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#integer\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/rotationPeriod\u0026gt; \u0026#34;25\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#integer\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; \u0026lt;https://swapi.co/vocabulary/terrain\u0026gt; \u0026#34;oceans, savannas, mountains, grasslands\u0026#34;^^\u0026lt;http://www.w3.org/2001/XMLSchema#string\u0026gt; . Turtle #  The Turtle is a very popular format. It looks very similar to the n-quads format, but it is much less verbose. Moreover we can define the prefixes and namespaces in the head part of the file, then we can use the prefixed version of IRIs in the main part of the file, which makes the knowledge description much more dense, and eye-friendly.\nWhen we define the statements to a specific subject, we need to refer to the subject only once, then we only have to list the predicate/object pairs, that we close with a ; character, then we need to close the whole statement-set with the final . character.\nAmong these features, the Turtle format offers other facilitation and convenience services, so this format is really perfect to use for describing knowledge in case we need to manage manually the content.\nThe Dantooine planet in Turtle format:\n@prefix bo: \u0026lt;http://www.ontotext.com/business-object/\u0026gt; . @prefix rdf: \u0026lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#\u0026gt; . @prefix rdfs: \u0026lt;http://www.w3.org/2000/01/rdf-schema#\u0026gt; . @prefix voc: \u0026lt;https://swapi.co/vocabulary/\u0026gt; . @prefix xml: \u0026lt;http://www.w3.org/XML/1998/namespace\u0026gt; . @prefix xsd: \u0026lt;http://www.w3.org/2001/XMLSchema#\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; a voc:Planet ; rdfs:label \u0026#34;Dantooine\u0026#34;^^xsd:string ; bo:type \u0026#34;Planet\u0026#34; ; voc:climate \u0026#34;temperate\u0026#34;^^xsd:string ; voc:desc \u0026#34;None\u0026#34;^^xsd:string ; voc:diameter 9830 ; voc:gravity \u0026#34;1 standard\u0026#34;^^xsd:string ; voc:orbitalPeriod 378 ; voc:population 1000 ; voc:rotationPeriod 25 ; voc:terrain \u0026#34;oceans, savannas, mountains, grasslands\u0026#34;^^xsd:string . N3 #  The N3 format (Notation3 in longer form) was worked out by Tim-Berners Lee, who also created the original RDF/XML format.\nThe N3 format is suitable to make complete semantic specifications. It is equivalent to the XML/RDF format, but it is much more readable than the XML content, so much transparent to human eyes. The N3 format is very similar to the Turtle. in fact the Turtle format is a subset of the N3 format.\nthe Dantooine planet in N3 format:\n@prefix rdfs: \u0026lt;http://www.w3.org/2000/01/rdf-schema#\u0026gt; . @prefix xsd: \u0026lt;http://www.w3.org/2001/XMLSchema#\u0026gt; . @prefix ns0: \u0026lt;http://www.ontotext.com/business-object/\u0026gt; . @prefix ns1: \u0026lt;https://swapi.co/vocabulary/\u0026gt; . \u0026lt;https://swapi.co/resource/planet/25\u0026gt; a \u0026lt;https://swapi.co/vocabulary/Planet\u0026gt; ; rdfs:label \u0026#34;Dantooine\u0026#34;^^xsd:string ; ns0:type \u0026#34;Planet\u0026#34; ; ns1:climate \u0026#34;temperate\u0026#34;^^xsd:string ; ns1:desc \u0026#34;None\u0026#34;^^xsd:string ; ns1:diameter 9830 ; ns1:gravity \u0026#34;1 standard\u0026#34;^^xsd:string ; ns1:orbitalPeriod 378 ; ns1:population 1000 ; ns1:rotationPeriod 25 ; ns1:terrain \u0026#34;oceans, savannas, mountains, grasslands\u0026#34;^^xsd:string . RDF/XML #  The RDF/XML is the serialization format the was primarily created, and which is able to completely satisfy all the expectations against the knowledge representation on the semantic web.\nUnfortunately the RDF/XML format is rather verbose, so it is not really well readable for human beings. We use it in cases we must use XML format.\nThe Dantooine planet in XML/RDF format:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; ?\u0026gt; \u0026lt;rdf:RDF xmlns:rdf=\u0026#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#\u0026#34; xmlns:rdfs=\u0026#34;http://www.w3.org/2000/01/rdf-schema#\u0026#34; xmlns:ns0=\u0026#34;http://www.ontotext.com/business-object/\u0026#34; xmlns:ns1=\u0026#34;https://swapi.co/vocabulary/\u0026#34;\u0026gt; \u0026lt;rdf:Description rdf:about=\u0026#34;https://swapi.co/resource/planet/25\u0026#34;\u0026gt; \u0026lt;rdf:type rdf:resource=\u0026#34;https://swapi.co/vocabulary/Planet\u0026#34;/\u0026gt; \u0026lt;rdfs:label rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;Dantooine\u0026lt;/rdfs:label\u0026gt; \u0026lt;ns0:type\u0026gt;Planet\u0026lt;/ns0:type\u0026gt; \u0026lt;ns1:climate rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;temperate\u0026lt;/ns1:climate\u0026gt; \u0026lt;ns1:desc rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;None\u0026lt;/ns1:desc\u0026gt; \u0026lt;ns1:diameter rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;9830\u0026lt;/ns1:diameter\u0026gt; \u0026lt;ns1:gravity rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;1 standard\u0026lt;/ns1:gravity\u0026gt; \u0026lt;ns1:orbitalPeriod rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;378\u0026lt;/ns1:orbitalPeriod\u0026gt; \u0026lt;ns1:population rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;1000\u0026lt;/ns1:population\u0026gt; \u0026lt;ns1:rotationPeriod rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#integer\u0026#34;\u0026gt;25\u0026lt;/ns1:rotationPeriod\u0026gt; \u0026lt;ns1:terrain rdf:datatype=\u0026#34;http://www.w3.org/2001/XMLSchema#string\u0026#34;\u0026gt;oceans, savannas, mountains, grasslands\u0026lt;/ns1:terrain\u0026gt; \u0026lt;/rdf:Description\u0026gt; \u0026lt;/rdf:RDF\u0026gt; JSON-LD #  The JSON-LD representations are documents that conform with the JSON standard. The JSON representation format is widely used by the REST APIs, as the main format of the requests and responses. It is well readable for humans too. Unfortunately the size of this format is farther big, relative to the other formats, and bigger files may consume too much computational resources for processing, so it is not the most perfect format if we need high throughput, and processing speed.\nThe Dantooine planet in JSON-LD format:\n[ { \u0026#34;@id\u0026#34;: \u0026#34;https://swapi.co/resource/planet/25\u0026#34;, \u0026#34;@type\u0026#34;: [ \u0026#34;https://swapi.co/vocabulary/Planet\u0026#34; ], \u0026#34;http://www.ontotext.com/business-object/type\u0026#34;: [ { \u0026#34;@value\u0026#34;: \u0026#34;Planet\u0026#34; } ], \u0026#34;http://www.w3.org/2000/01/rdf-schema#label\u0026#34;: [ { \u0026#34;@value\u0026#34;: \u0026#34;Dantooine\u0026#34; } ], \u0026#34;https://swapi.co/vocabulary/climate\u0026#34;: [ { \u0026#34;@value\u0026#34;: \u0026#34;temperate\u0026#34; } ], \u0026#34;https://swapi.co/vocabulary/desc\u0026#34;: [ { \u0026#34;@value\u0026#34;: \u0026#34;None\u0026#34; } ], \u0026#34;https://swapi.co/vocabulary/diameter\u0026#34;: [ { \u0026#34;@value\u0026#34;: 9830 } ], \u0026#34;https://swapi.co/vocabulary/gravity\u0026#34;: [ { \u0026#34;@value\u0026#34;: \u0026#34;1 standard\u0026#34; } ], \u0026#34;https://swapi.co/vocabulary/orbitalPeriod\u0026#34;: [ { \u0026#34;@value\u0026#34;: 378 } ], \u0026#34;https://swapi.co/vocabulary/population\u0026#34;: [ { \u0026#34;@value\u0026#34;: 1000 } ], \u0026#34;https://swapi.co/vocabulary/rotationPeriod\u0026#34;: [ { \u0026#34;@value\u0026#34;: 25 } ], \u0026#34;https://swapi.co/vocabulary/terrain\u0026#34;: [ { \u0026#34;@value\u0026#34;: \u0026#34;oceans, savannas, mountains, grasslands\u0026#34; } ] }, { \u0026#34;@id\u0026#34;: \u0026#34;https://swapi.co/vocabulary/Planet\u0026#34; } ] "});index.add({'id':31,'href':'/cayley-cookbook/docs/cayley-overview/cayley-repl/','title':"The `cayley repl` command",'section':"Cayley Overview",'content':"The cayley repl command #  The REPL is the acronym of Read-Eval-Print-Loop. We can use the cayley repl command to open a console to an existing database, and interactively execute queries and other operations on the database.\nThe console works similar to a normal Linux console. We can type in the expressions, then press the Enter, and the interpreter will execute, then prints the results. It is also possible to use the up/down arrows to navigate among the previously entered commands. The expressions we execute will be stored into a .cayley_history file, that we can open with a text editor, and extract the expressions we used previously. This way the REPL is a very efficient tool to experiment with queries, then move the results of experiments to the final query files.\n  Figure 3.: cayley repl   The following session starts REPL on an existing database, then queries and prints all the nodes stored in the database:\n$ cayley repl --db bolt --dbpath /home/tombenke/tmp/cayley/ I0915 18:02:08.623789 25897 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0915 18:02:08.623971 25897 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) cayley\u0026gt; g.V().All() **** id : \u0026lt;bob\u0026gt; **** id : \u0026lt;status\u0026gt; **** id : cool_person **** id : \u0026lt;alice\u0026gt; **** id : \u0026lt;greg\u0026gt; **** id : \u0026lt;emily\u0026gt; **** id : \u0026lt;smart_graph\u0026gt; **** id : \u0026lt;predicates\u0026gt; **** id : \u0026lt;dani\u0026gt; **** id : \u0026lt;fred\u0026gt; **** id : smart_person **** id : \u0026lt;charlie\u0026gt; **** id : \u0026lt;are\u0026gt; **** id : \u0026lt;follows\u0026gt; ----------- 14 Results Elapsed time: 3.046727 ms cayley\u0026gt; Let\u0026rsquo;s see the content of the .cayley_history file after the session:\n$ cat .cayley_history g.V().All() The [Discover and unknown graph]({{\u0026gt; relref \u0026ldquo;/docs/working-with-cayley/graph-discovery\u0026rdquo; \u0026gt;}}) section demonstrates how can we use the cayley repl command to discover a graph we know nothing about.\n"});index.add({'id':32,'href':'/cayley-cookbook/docs/working-with-cayley/stores/internals/','title':"The internal representation of nodes and quads",'section':"Stores",'content':"The internal representation of nodes and quads #    Figure 1.: Internal Representation   "});index.add({'id':33,'href':'/cayley-cookbook/docs/working-with-cayley/queries/bookmarks/','title':"Find bookmarks by tags",'section':"Queries",'content':"Find bookmarks by tags #  Run the program: \ncd schema go run find_bookmarks_by_tags.go yamlImpex.go store.go bookmarks.go The output of the program:\nShow the results Results of finding any of `nosql` or `gremlin` tags: - \u0026#34;Ontotext GraphDB\u0026#34; [graphdb nosql knowledge-graph linked-data semantic-web rdf] https://ontotext.com/products/graphdb/ - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery Results of finding every tags of `cayley` or `gremlin`: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery    "});index.add({'id':34,'href':'/cayley-cookbook/docs/cayley-overview/cayley-query/','title':"The `cayley query` command",'section':"Cayley Overview",'content':"The cayley query command #  With the cayley query we can run a query expression on an existing database.\nThe query that we want to execute can be forwarded to the command through the standard input. The simpler expressions we can directly put into the command line via the echo utility, the longer ones we\u0026rsquo;d better put into query files, then forward the via the cat utility.\nWe can select the query language type by the --lang \u0026lt;query-language-type\u0026gt; parameter, where the possible values for the query language are: \u0026ldquo;gizmo\u0026rdquo;, \u0026ldquo;graphql\u0026rdquo;, \u0026ldquo;mql\u0026rdquo;, \u0026ldquo;sexp\u0026rdquo;. The default is \u0026ldquo;gizmo\u0026rdquo;.\n  Figure 4.: cayley query   Run a query on a previously created database that has data:\necho \u0026#34;g.V().All();\u0026#34; | cayley query --logtostderr false --db bolt --dbpath /home/tombenke/tmp/cayley --logs ~/tmp {\u0026#34;id\u0026#34;:\u0026#34;bob\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;status\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;cool_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;alice\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;greg\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;emily\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_graph\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;predicates\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;dani\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;fred\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;charlie\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;are\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;follows\u0026#34;} In case we want to feed the results into another program, then we may want to hide the logs printed out by the command. The next example shows how can we do this. The logs are written into the /home/tombenke/tmp directory:\n$ cat ~/tmp/cayley.tombenke-Latitude-E5470.tombenke.log.INFO.20200915-182850.27351 Log file created at: 2020/09/15 18:28:50 Running on machine: tombenke-Latitude-E5470 Binary: Built with gc go1.11.2 for linux/amd64 Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg This trick we can apply to the other commands as well.\nOften, when we need to test our query expressions, we do not need a persistent database. It can be much easier and shorter to load the test data into an in-memory store by the --load \u0026lt;data-file\u0026gt; CLI parameter, and run the query on it. The following command executes the same query on the same data like in the previous example, but it uses a temporary, in-memory database.\n$ echo \u0026#34;g.V().All();\u0026#34; | cayley query --logtostderr false --load data/testdata.nq --logs ~/tmp {\u0026#34;id\u0026#34;:\u0026#34;alice\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;follows\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;bob\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;fred\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;status\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;cool_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;dani\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;charlie\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;greg\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;emily\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;predicates\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;are\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_graph\u0026#34;} "});index.add({'id':35,'href':'/cayley-cookbook/docs/working-with-cayley/transactions/','title':"Transactions",'section':"Working with Knowledge Graph",'content':"This section demonstrates the execution of transactions.\n"});index.add({'id':36,'href':'/cayley-cookbook/docs/cayley-overview/cayley-http/','title':"The `cayley http` command",'section':"Cayley Overview",'content':"The cayley http command #  Maybe the cayley http is the most well known, and most frequently used cayley command. It is an application, which contains the quad-store, the query engines and a HTTP server, that provides all of the functionalities through a REST API for utilities and 3rd-party applications, as well as provides a web-based graphical UI for the end users.\nThe Figure 1. shows all the components that can be used together with the Cayley running in the cayley http mode.\n  Figure 1.: cayley http   The cayley http exposes REST API endpoints which are described in the official documentation. See also the documentation pages of the 3rd party APIs available for accessing to the cayley http server.\nStarting the Cayley HTTP Server #  Start with default settings #  The execution of the cayley http command starts the server with the default settings:\n$ cayley http I0916 08:00:12.107989 6702 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0916 08:00:12.108196 6702 database.go:187] using backend \u0026#34;memstore\u0026#34; I0916 08:00:12.108322 6702 http.go:197] using assets from \u0026#34;/snap/cayley/2\u0026#34; I0916 08:00:12.108805 6702 http.go:42] listening on 127.0.0.1:64210, web interface at http://127.0.0.1:64210 The server uses an in-memory database, and the store will be empty. The server will listen on the 64210 port by default. We can open the http://127.0.0.1:64210 URL with a browser, then the web UI will appear, where we can run queries on the database.\nStart with in-memory store with automatic data loading #  We can tell to the cayley http to load data into the store immediately after starting it. We can use the --load \u0026lt;data-file-path\u0026gt; argument for this.\n$ cayley http --load data/testdata.nq I0916 08:10:40.473364 7087 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0916 08:10:40.473602 7087 database.go:187] using backend \u0026#34;memstore\u0026#34; I0916 08:10:40.473935 7087 database.go:250] loaded \u0026#34;data/testdata.nq\u0026#34; in 266.525µs I0916 08:10:40.474084 7087 http.go:197] using assets from \u0026#34;/snap/cayley/2\u0026#34; I0916 08:10:40.474498 7087 http.go:42] listening on 127.0.0.1:64210, web interface at http://127.0.0.1:64210 The data will be available immediately for querying through both the UI and through the REST API for the client applications. Yet the store is in-memory.\nStart with persistent store, including data #  The cayley http can be started with a persistent database as well. Here we have two options:\n We initialize an empty persistent store, and may also load data into it immediately after the database has been created. Open a previously created persistent store, that may be empty or filled with some data. To prepare such a database we can use the cayley init and cayley load commands.  Start an empty persistent store, and load data into it:\n$ cayley http --init --db bolt --dbpath /home/tombenke/tmp/cayley/ --load data/testdata.nq I0916 08:20:05.039047 7367 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0916 08:20:05.039234 7367 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) I0916 08:20:05.070109 7367 database.go:250] loaded \u0026#34;data/testdata.nq\u0026#34; in 9.150519ms I0916 08:20:05.070347 7367 http.go:197] using assets from \u0026#34;/snap/cayley/2\u0026#34; I0916 08:20:05.071829 7367 http.go:42] listening on 127.0.0.1:64210, web interface at http://127.0.0.1:64210 I0916 08:20:11.371920 7367 http.go:100] started POST /api/v1/query/gizmo for 127.0.0.1:39426 I0916 08:20:11.372573 7367 http.go:102] completed 200 OK /api/v1/query/gizmo in 666.087µs I0916 08:20:17.928216 7367 http.go:100] started POST /api/v1/query/gizmo for 127.0.0.1:39426 I0916 08:20:17.932551 7367 http.go:102] completed 200 OK /api/v1/query/gizmo in 4.335239ms Prepare a persistent store with init and load, start the http server, using it:\n$ cayley init --db bolt --dbpath /home/tombenke/tmp/cayley/ I0916 08:21:00.701903 7460 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0916 08:21:00.702107 7460 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) $ cayley load --db bolt --dbpath /home/tombenke/tmp/cayley/ --load data/testdata.nq I0916 08:21:42.843042 7509 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0916 08:21:42.843269 7509 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) $ cayley http --db bolt --dbpath /home/tombenke/tmp/cayley/ I0916 08:22:08.376538 7573 cayley.go:63] Cayley version: 0.7.5 (cf576babb7db) I0916 08:22:08.376726 7573 database.go:187] using backend \u0026#34;bolt\u0026#34; (/home/tombenke/tmp/cayley/) I0916 08:22:08.379455 7573 http.go:197] using assets from \u0026#34;/snap/cayley/2\u0026#34; I0916 08:22:08.380016 7573 http.go:42] listening on 127.0.0.1:64210, web interface at http://127.0.0.1:64210 In both cases, we will be able to reach the same database content through the HTTP server.\nNote:\nBoth the cayley load and cayley save can be used to store data into, and dump from the database that the cayley http uses, however it can happen only in case the server is stopped. That is why these utilities are connected via dotted line on Figure 1.\n The web UI #  Start the cayley http server either with an in-memory or persistent database, that has data loaded into it (according to examples of the previous subsections), then open the http://127.0.0.1:64210 URL with a browser. In the text area on the right top, enter the g.V().GetLimit(2) query expression, then press the \u0026ldquo;Run Query\u0026rdquo; button on the left. The results will appear on the right bottom part of the window, as you can see on Figure 2.\n  Figure 2.: cayley http UI   See the official documentation on the UI for further details.\nData import and export #  If you want to upload data into the database, or want to dump the database, meanwhile the cayley http server is working, you have to use the REST interface. There are two utilities, that you can find in the source code of Cayley : cayleyimport and cayleyexport.\nClone the cayleygraph/cayley, and you can run these utilities with the go run command, as the examples show below.\nImport data to the database, through the REST API:\n$ go run \u0026lt;path-to-the-cayley-source\u0026gt;/cmd/cayleyimport/cayleyimport.go data/testdata.nq Successfully wrote 15 quads. Export data from the database, into a file, through the REST API:\ngo run \u0026lt;path-to-the-cayley-source\u0026gt;/cmd/cayleyexport/cayleyexport.go -o out.nq Export data from the database, to the standard output, through the REST API. Since there is no output file name is defined, the utility can not determine the format, so we need to set it by the --format argument:\n$ go run ~/sandbox/cayley/cayley/cmd/cayleyexport/cayleyexport.go --format jsonld [{\u0026#34;@id\u0026#34;:\u0026#34;alice\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;}],\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;charlie\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;dani\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;dani\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;bob\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;}],\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;emily\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;fred\u0026#34;,\u0026#34;follows\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;cool_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;predicates\u0026#34;,\u0026#34;are\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;follows\u0026#34;},{\u0026#34;@id\u0026#34;:\u0026#34;status\u0026#34;}]},{\u0026#34;@graph\u0026#34;:[{\u0026#34;@id\u0026#34;:\u0026#34;emily\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;smart_person\u0026#34;}]},{\u0026#34;@id\u0026#34;:\u0026#34;greg\u0026#34;,\u0026#34;status\u0026#34;:[{\u0026#34;@value\u0026#34;:\u0026#34;smart_person\u0026#34;}]}],\u0026#34;@id\u0026#34;:\u0026#34;smart_graph\u0026#34;}] "});})();