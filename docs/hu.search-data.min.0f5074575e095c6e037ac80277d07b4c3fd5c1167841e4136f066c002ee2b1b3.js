'use strict';(function(){const indexCfg={};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/cayley-cookbook/docs/about/','title':"Bevezetés",'section':"Docs",'content':"Bevezetés #  A tartalom három fő fejezetre tagolódik.\n Az \u0026ldquo;Alapfogalmak\u0026rdquo; c. fejezet ismerteti azokat a tudnivalókat, amelyek szükségesek ahhoz, hogy a Cayley-t használni tudjuk. \u0026ldquo;A Cayley rendszer áttekintése\u0026rdquo; c. fejezet segít eligazodni abban, hogy milyen elemekből áll a Cayley \u0026ldquo;ökoszisztéma\u0026rdquo;, és az egyes elemeit milyen módon lehet használni, hol találunk hozzá dokumentációt. A \u0026ldquo;Cayley mint Go package\u0026rdquo; c. fejezet alkotja a szakácskönyv fő tartalmát. Ebben találhatjuk az egyes használati eseteket, kezdve az egyszerűbbekkel, majd haladva a bonyolultabbak irányában.  "});index.add({'id':1,'href':'/cayley-cookbook/docs/basic-concepts/','title':"Alapfogalmak",'section':"Docs",'content':"Alapfogalmak #  Ez a fejezet azokat az alapfogalmakat ismerteti, amelyek szükségesek ahhoz, hogy tudásgráfokkal dolgozzunk, és hogy a Cayley-t használni tudjuk.\n"});index.add({'id':2,'href':'/cayley-cookbook/docs/basic-concepts/graph-based-data-model/','title':"Gráf alapú adatmodellezés",'section':"Alapfogalmak",'content':"Gráf alapú adatmodellezés #  "});index.add({'id':3,'href':'/cayley-cookbook/docs/cayley-as-package/vocabularies/','title':"Namespace-ek és szótárak",'section':"Cayley mint Package",'content':"Namespace-ek és szótárak #  Namespace-ek #  Az alábbi kód kilistázza az összes, jelenleg regisztrált namespace-t:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add some predefined vocabularies \t_ \u0026#34;github.com/cayleygraph/quad/voc/schema\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/xsd\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; ) func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } \ncd namespaces go run list_namespaces.go` a program kimenete:\nRegistered namespaces: schema: =\u0026gt; http://schema.org/  xsd: =\u0026gt; http://www.w3.org/2001/XMLSchema#  rdf: =\u0026gt; http://www.w3.org/1999/02/22-rdf-syntax-ns#  rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  Az alábbi kód regisztrál egy új namespace-t:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add built-in vocabulary \t_ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; // Add own vocabulary \t_ \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func init() { // Register a new namespace with prefix  voc.RegisterPrefix(`acc:`, `http://mycompany.com/voc/accounting#`) } func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } \ncd namespaces go run register_namespace.go a program kimenete:\nRegistered namespaces: acc: =\u0026gt; http://mycompany.com/voc/accounting#  rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  foaf: =\u0026gt; http://xmlns.com/foaf/0.1/#  Szótárak #  A következő kódrészlet bemutatja, hogyan lehet egy új szótárat definiálni.\nA foaf.go package FOAF Vocabulary Specification leggyakrabban használt kifejezéseit definiálja. Ezt a package-et több példában is használjuk. A szótárban definiált szavakat predikátumként alkalmazzuk.\n// Package foaf contains constants of the FOAF Concepts Vocabulary (RDF) package foaf import \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; func init() { voc.RegisterPrefix(Prefix, NS) } const ( NS = `http://xmlns.com/foaf/0.1/#` Prefix = `foaf:` ) const ( // Core  // An agent (eg. person, group, software or physical artifact).  Agent = Prefix + `Agent` // A person.  Person = Prefix + `Person` // A name for some thing.  Name = Prefix + `name` // Title (Mr, Mrs, Ms, Dr. etc)  Title = Prefix + `title` // An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one\u0026#39;s photo on a homepage).  Img = Prefix + `img` // A thing depicted in this representation.  Depiction = Prefix + `depiction` Depicts = Prefix + `depicts` // The family name of some person.  FamilyName = Prefix + `familyName` // The first name of some person.  GivenName = Prefix + `givenName` // The gender of this Agent (typically but not necessarily \u0026#39;male\u0026#39; or \u0026#39;female\u0026#39;).  Gender = Prefix + `gender` // A person known by this person (indicating some level of reciprocated interaction between the parties).  Knows = Prefix + `knows` // A location that something is based near, for some broadly human notion of near.  BasedNear = Prefix + `based_near` // The age in years of some agent.  Age = Prefix + `age` // The birthday of this Agent, represented in mm-dd string form, eg. \u0026#39;12-31\u0026#39;.  Birthday = Prefix + `birthday` // Something that was made by this agent.  Made = Prefix + `made` PrimaryTopic = Prefix + `primaryTopic (primaryTopicOf)` // A project (a collective endeavour of some kind).  Project = Prefix + `Project` // An organization.  Organization = Prefix + `Organization` // A class of Agents.  Group = Prefix + `Group` // A string expressing what the user is happy for the general public (normally) to know about their current activity.  Status = Prefix + `status` // Indicates a member of a Group  Member = Prefix + `member` // A document.  Document = Prefix + `Document` // An image.  Image = Prefix + `Image` // SocialWeb  // A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).  Nick = Prefix + `nick` // A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox.  Mbox = Prefix + `mbox` // A homepage for some thing.  Homepage = Prefix + `homepage` // A weblog of some thing (whether person, group, company etc.).  Weblog = Prefix + `weblog` // An OpenID for an Agent.  Openid = Prefix + `openid` // A jabber ID for something.  JabberID = Prefix + `jabberID` // sha1sum of a personal mailbox URI name - The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.  MboxSha1sum = Prefix + `mbox_sha1sum` // A page about a topic of interest to this person.  Interest = Prefix + `interest` // A thing of interest to this person.  TopicInterest = Prefix + `topic_interest` // A topic of some page or document.  Topic = Prefix + `topic` // A workplace homepage of some person; the homepage of an organization they work for.  WorkplaceHomepage = Prefix + `workplaceHomepage` // A work info homepage of some person; a page about their work for some organization.  WorkInfoHomepage = Prefix + `workInfoHomepage` // A homepage of a school attended by the person.  SchoolHomepage = Prefix + `schoolHomepage` // A link to the publications of this person.  Publications = Prefix + `publications` // A current project this person works on.  CurrentProject = Prefix + `currentProject` // A project this person has previously worked on.  PastProject = Prefix + `pastProject` // Indicates an account held by this agent.  Account = Prefix + `account` // An online account  OnlineAccount = Prefix + `OnlineAccount` // Indicates the name (identifier) associated with this online account.  AccountName = Prefix + `accountName` // Indicates a homepage of the service provide for this online account.  AccountServiceHomepage = Prefix + `accountServiceHomepage` // A personal profile RDF document  PersonalProfileDocument = Prefix + `PersonalProfileDocument` // A tipjar document for this agent, describing means for payment and reward.  Tipjar = Prefix + `tipjar` // A sha1sum hash, in hex.  Sha1 = Prefix + `sha1` // A derived thumbnail image.  Thumbnail = Prefix + `thumbnail` // A logo representing some thing.  Logo = Prefix + `logo` ) "});index.add({'id':4,'href':'/cayley-cookbook/docs/cayley-overview/','title':"A Cayley rendszer áttekintése",'section':"Docs",'content':"A Cayley rendszer áttekintése #  Ez a fejezet, abban segít eligazodni, hogy milyen elemekből áll a Cayley \u0026ldquo;ökoszisztéma\u0026rdquo;, és az egyes elemeit milyen módon lehet használni, hol találunk hozzá dokumentációt.    Cayley Components   "});index.add({'id':5,'href':'/cayley-cookbook/docs/basic-concepts/resources/','title':"Erőforrások",'section':"Alapfogalmak",'content':"Erőforrások #  "});index.add({'id':6,'href':'/cayley-cookbook/docs/cayley-as-package/quads/','title':"Quad-ok",'section':"Cayley mint Package",'content':"Quad-ok #  Az alábbi példa létrehoz egy quad halmazt, majd kiexportálja többféle formátumban:\nA teljes kódlista megtekintése package main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func main() { // Create Quads about some people using Blank Nodes as references  quadsWithBNodes := makeQuadsWithBNodes() // Take a look at the resulted quads  printQuads(quadsWithBNodes) // Create Quads about some people using IRIs as references  quadsWithIRIs := makeQuadsWithIRIs() // Take a look at the resulted quads  printQuads(quadsWithIRIs) } func makeQuadsWithBNodes() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Generate a Blank Node to represent the person internally  // You can create a sequence of internal IDs for the Blank Nodes  var seq quad.Sequence luke := seq.Next() // Alternatively create a Blank Node with a random internal ID  // luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) leia := seq.Next() quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func makeQuadsWithIRIs() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Create IRIs to represent the person globally, and universally  luke := quad.IRI(\u0026#34;https://swapi.co/resource/human/luke_skywalker\u0026#34;) // Alternatively create a Blank Node with a random internal ID  // luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) leia := quad.IRI(\u0026#34;https://swapi.co/resource/human/leia_organa\u0026#34;) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func printQuads(quads []quad.Quad) { fmt.Println(\u0026#34;The details of the quads created:\u0026#34;) for i, q := range quads { fmt.Printf(\u0026#34;quads[%d]:\\n\u0026#34;, i) fmt.Printf(\u0026#34; subject: %s %v\\n\u0026#34;, q.Get(quad.Subject), reflect.TypeOf(q.Get(quad.Subject))) fmt.Printf(\u0026#34; predicate: %s %v\\n\u0026#34;, q.Get(quad.Predicate), reflect.TypeOf(q.Get(quad.Predicate))) fmt.Printf(\u0026#34; object: %s %v\\n\u0026#34;, q.Get(quad.Object), reflect.TypeOf(q.Get(quad.Object))) fmt.Printf(\u0026#34; label: %s %v\\n\\n\u0026#34;, q.Get(quad.Label), reflect.TypeOf(q.Get(quad.Label))) } fmt.Println(\u0026#34;The quads in NQuad representation:\u0026#34;) for _, q := range quads { fmt.Printf(\u0026#34;%s\\n\u0026#34;, q.NQuad()) } }    \ncd quad/writer go run export_nquads_to_stdout.go data A program kimenete:\nGraphviz digraph cayley_graph { \u0026quot;_:n5079306756625392705\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n5079306756625392705\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Luke\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n5079306756625392705\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Skywalker\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; \u0026quot;_:n5079306756625392705\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;23\\\u0026quot;^^\u0026lt;xsd:integer\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:age\u0026gt;\u0026quot; ]; \u0026quot;_:n7661432613624903373\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n7661432613624903373\u0026quot; -\u0026gt; \u0026quot;_:n5079306756625392705\u0026quot; [ label = \u0026quot;\u0026lt;foaf:knows\u0026gt;\u0026quot; ]; \u0026quot;_:n7661432613624903373\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Leia\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n7661432613624903373\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Organa\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; } GML Creator \u0026#34;Cayley\u0026#34; graph [ directed 1 node [ id 0 label \u0026#34;_:n5079306756625392705\u0026#34; ] node [ id 1 label \u0026#34;\u0026lt;foaf:Person\u0026gt;\u0026#34; ] edge [ source 0 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] node [ id 2 label \u0026#34;\u0026amp;quot;Luke\u0026amp;quot;\u0026#34; ] edge [ source 0 target 2 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 3 label \u0026#34;\u0026amp;quot;Skywalker\u0026amp;quot;\u0026#34; ] edge [ source 0 target 3 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] node [ id 4 label \u0026#34;\u0026amp;quot;23\u0026amp;quot;^^\u0026lt;xsd:integer\u0026gt;\u0026#34; ] edge [ source 0 target 4 label \u0026#34;\u0026lt;foaf:age\u0026gt;\u0026#34; ] node [ id 5 label \u0026#34;_:n7661432613624903373\u0026#34; ] edge [ source 5 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] edge [ source 5 target 0 label \u0026#34;\u0026lt;foaf:knows\u0026gt;\u0026#34; ] node [ id 6 label \u0026#34;\u0026amp;quot;Leia\u0026amp;quot;\u0026#34; ] edge [ source 5 target 6 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 7 label \u0026#34;\u0026amp;quot;Organa\u0026amp;quot;\u0026#34; ] edge [ source 5 target 7 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] ] GraphML \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;no\u0026#34;?\u0026gt; \u0026lt;graphml xmlns=\u0026#34;http://graphml.graphdrawing.org/xmlns\u0026#34; xmlns:java=\u0026#34;http://www.yworks.com/xml/yfiles-common/1.0/java\u0026#34; xmlns:sys=\u0026#34;http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0\u0026#34; xmlns:x=\u0026#34;http://www.yworks.com/xml/yfiles-common/markup/2.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns:y=\u0026#34;http://www.yworks.com/xml/graphml\u0026#34; xmlns:yed=\u0026#34;http://www.yworks.com/xml/yed/3\u0026#34; xsi:schemaLocation=\u0026#34;http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd\u0026#34;\u0026gt; \u0026lt;!--Created by yEd 3.16.2.1--\u0026gt; \u0026lt;key for=\u0026#34;port\u0026#34; id=\u0026#34;d0\u0026#34; yfiles.type=\u0026#34;portgraphics\u0026#34;/\u0026gt; \u0026lt;key for=\u0026#34;port\u0026#34; id=\u0026#34;d1\u0026#34; yfiles.type=\u0026#34;portgeometry\u0026#34;/\u0026gt; \u0026lt;key for=\u0026#34;port\u0026#34; id=\u0026#34;d2\u0026#34; yfiles.type=\u0026#34;portuserdata\u0026#34;/\u0026gt; \u0026lt;key attr.name=\u0026#34;url\u0026#34; attr.type=\u0026#34;string\u0026#34; for=\u0026#34;node\u0026#34; id=\u0026#34;d3\u0026#34;/\u0026gt; \u0026lt;key attr.name=\u0026#34;description\u0026#34; attr.type=\u0026#34;string\u0026#34; for=\u0026#34;node\u0026#34; id=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;key for=\u0026#34;node\u0026#34; id=\u0026#34;d5\u0026#34; yfiles.type=\u0026#34;nodegraphics\u0026#34;/\u0026gt; \u0026lt;key for=\u0026#34;graphml\u0026#34; id=\u0026#34;d6\u0026#34; yfiles.type=\u0026#34;resources\u0026#34;/\u0026gt; \u0026lt;key attr.name=\u0026#34;url\u0026#34; attr.type=\u0026#34;string\u0026#34; for=\u0026#34;edge\u0026#34; id=\u0026#34;d7\u0026#34;/\u0026gt; \u0026lt;key attr.name=\u0026#34;description\u0026#34; attr.type=\u0026#34;string\u0026#34; for=\u0026#34;edge\u0026#34; id=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;key for=\u0026#34;edge\u0026#34; id=\u0026#34;d9\u0026#34; yfiles.type=\u0026#34;edgegraphics\u0026#34;/\u0026gt; \u0026lt;graph edgedefault=\u0026#34;directed\u0026#34; id=\u0026#34;G\u0026#34;\u0026gt; \u0026lt;node id=\u0026#34;n0\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;220.0\u0026#34; x=\u0026#34;263.57829476163903\u0026#34; y=\u0026#34;125.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;166.708984375\u0026#34; x=\u0026#34;26.6455078125\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;_:n5079306756625392705\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n1\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;130.0\u0026#34; x=\u0026#34;491.3866158129342\u0026#34; y=\u0026#34;44.62826479335121\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#FFFF99\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;92.048828125\u0026#34; x=\u0026#34;18.9755859375\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;\u0026amp;lt;foaf:Person\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n2\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;60.0\u0026#34; x=\u0026#34;498.99999999999994\u0026#34; y=\u0026#34;193.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;43.662109375\u0026#34; x=\u0026#34;8.1689453125\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;\u0026#34;Luke\u0026#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n3\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;110.0\u0026#34; x=\u0026#34;192.0\u0026#34; y=\u0026#34;198.3717352066488\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;76.474609375\u0026#34; x=\u0026#34;16.7626953125\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;\u0026#34;Skywalker\u0026#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n4\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;190.0\u0026#34; x=\u0026#34;309.0\u0026#34; y=\u0026#34;247.6282647933512\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;138.501953125\u0026#34; x=\u0026#34;25.7490234375\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;\u0026#34;23\u0026#34;^^\u0026amp;lt;xsd:integer\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n5\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;220.0\u0026#34; x=\u0026#34;618.3866158129342\u0026#34; y=\u0026#34;125.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;166.708984375\u0026#34; x=\u0026#34;26.6455078125\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;_:n7661432613624903373\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n6\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;60.0\u0026#34; x=\u0026#34;859.3866158129342\u0026#34; y=\u0026#34;193.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;39.794921875\u0026#34; x=\u0026#34;10.1025390625\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;\u0026#34;Leia\u0026#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n7\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d4\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry height=\u0026#34;30.0\u0026#34; width=\u0026#34;80.0\u0026#34; x=\u0026#34;589.0\u0026#34; y=\u0026#34;198.3717352066488\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel alignment=\u0026#34;center\u0026#34; autoSizePolicy=\u0026#34;content\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasBackgroundColor=\u0026#34;false\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;internal\u0026#34; modelPosition=\u0026#34;c\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;59.34765625\u0026#34; x=\u0026#34;10.326171875\u0026#34; y=\u0026#34;6.015625\u0026#34;\u0026gt;\u0026#34;Organa\u0026#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/node\u0026gt; \u0026lt;edge id=\u0026#34;e0\u0026#34; source=\u0026#34;n0\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;71.734375\u0026#34; x=\u0026#34;22.950411830255348\u0026#34; y=\u0026#34;-34.84354430010174\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;edge id=\u0026#34;e1\u0026#34; source=\u0026#34;n0\u0026#34; target=\u0026#34;n2\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;119.740234375\u0026#34; x=\u0026#34;-6.882829539213901\u0026#34; y=\u0026#34;14.198596509465915\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;edge id=\u0026#34;e2\u0026#34; source=\u0026#34;n0\u0026#34; target=\u0026#34;n3\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;123.736328125\u0026#34; x=\u0026#34;-99.96750545121171\u0026#34; y=\u0026#34;13.100097950004084\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;edge id=\u0026#34;e3\u0026#34; source=\u0026#34;n0\u0026#34; target=\u0026#34;n4\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;73.650390625\u0026#34; x=\u0026#34;-25.333411212930457\u0026#34; y=\u0026#34;37.33833283612873\u0026#34;\u0026gt;\u0026amp;lt;foaf:age\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;edge id=\u0026#34;e4\u0026#34; source=\u0026#34;n5\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;71.734375\u0026#34; x=\u0026#34;-91.05167764409703\u0026#34; y=\u0026#34;-34.77085905840252\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;edge id=\u0026#34;e5\u0026#34; source=\u0026#34;n5\u0026#34; target=\u0026#34;n0\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;89.259765625\u0026#34; x=\u0026#34;-112.0340242049009\u0026#34; y=\u0026#34;-8.984375\u0026#34;\u0026gt;\u0026amp;lt;foaf:knows\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;edge id=\u0026#34;e6\u0026#34; source=\u0026#34;n5\u0026#34; target=\u0026#34;n6\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;119.740234375\u0026#34; x=\u0026#34;-4.169730407194493\u0026#34; y=\u0026#34;14.541242800884362\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;edge id=\u0026#34;e7\u0026#34; source=\u0026#34;n5\u0026#34; target=\u0026#34;n7\u0026#34;\u0026gt; \u0026lt;data key=\u0026#34;d8\u0026#34;/\u0026gt; \u0026lt;data key=\u0026#34;d9\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;0.0\u0026#34; tx=\u0026#34;0.0\u0026#34; ty=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;y:LineStyle color=\u0026#34;#000000\u0026#34; type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; modelPosition=\u0026#34;center\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34; width=\u0026#34;123.736328125\u0026#34; x=\u0026#34;-91.58104512087675\u0026#34; y=\u0026#34;12.95101958086346\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;y:PreferredPlacementDescriptor angle=\u0026#34;0.0\u0026#34; angleOffsetOnRightSide=\u0026#34;0\u0026#34; angleReference=\u0026#34;absolute\u0026#34; angleRotationOnRightSide=\u0026#34;co\u0026#34; distance=\u0026#34;-1.0\u0026#34; frozen=\u0026#34;true\u0026#34; placement=\u0026#34;anywhere\u0026#34; side=\u0026#34;anywhere\u0026#34; sideReference=\u0026#34;relative_to_edge_flow\u0026#34;/\u0026gt; \u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/edge\u0026gt; \u0026lt;/graph\u0026gt; \u0026lt;data key=\u0026#34;d6\u0026#34;\u0026gt; \u0026lt;y:Resources/\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;/graphml\u0026gt; JSON [ {\u0026#34;subject\u0026#34;:\u0026#34;_:n5079306756625392705\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n5079306756625392705\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Luke\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n5079306756625392705\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Skywalker\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n5079306756625392705\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:age\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\\u0026#34;23\\\u0026#34;^^\\u003cxsd:integer\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n7661432613624903373\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n7661432613624903373\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:knows\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;_:n5079306756625392705\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n7661432613624903373\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Leia\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n7661432613624903373\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Organa\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;} ] n-quads _:n5079306756625392705 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n5079306756625392705 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Luke\u0026quot; \u0026quot;people\u0026quot; . _:n5079306756625392705 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Skywalker\u0026quot; \u0026quot;people\u0026quot; . _:n5079306756625392705 \u0026lt;foaf:age\u0026gt; \u0026quot;23\u0026quot;^^\u0026lt;xsd:integer\u0026gt; \u0026quot;people\u0026quot; . _:n7661432613624903373 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n7661432613624903373 \u0026lt;foaf:knows\u0026gt; _:n5079306756625392705 \u0026quot;people\u0026quot; . _:n7661432613624903373 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Leia\u0026quot; \u0026quot;people\u0026quot; . _:n7661432613624903373 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Organa\u0026quot; \u0026quot;people\u0026quot; .    Graphviz-ből előállított diagram     yEd GraphML-ből előállított diagram   "});index.add({'id':7,'href':'/cayley-cookbook/docs/cayley-as-package/','title':"Cayley mint Package",'section':"Docs",'content':"Cayley mint Package #  Ez a fejezet azt demonstrálja, hogyan lehet a Cayley-t Golang package-ként alkalmazni.\n"});index.add({'id':8,'href':'/cayley-cookbook/docs/basic-concepts/statements/','title':"Statements",'section':"Alapfogalmak",'content':"Statements #  "});index.add({'id':9,'href':'/cayley-cookbook/docs/cayley-as-package/stores/','title':"Store-ok",'section':"Cayley mint Package",'content':"Store-ok #  Teszt adatok előállítása #  package main import ( \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally  luke := quad.RandomBlankNode() leia := quad.IRI(\u0026#34;starwars:leia_organa\u0026#34;) //quad.RandomBlankNode()  // Create Quads about to export  label := \u0026#34;people\u0026#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Organa\u0026#34;, label)) return quads } Node-ok a Store-ban #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllNodes(store) } func printAllNodes(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.NodesAllIterator() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it)) for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Println() } } A program kimenete:\nMemStoreAll *memstore.AllIterator Ref: 1 memstore.bnode Key: 1 memstore.bnode Value: _:n242152451495997854 quad.BNode Ref: 2 memstore.bnode Key: 2 memstore.bnode Value: \u0026lt;rdf:type\u0026gt; quad.IRI Ref: 3 memstore.bnode Key: 3 memstore.bnode Value: \u0026lt;foaf:Person\u0026gt; quad.IRI Ref: 4 memstore.bnode Key: 4 memstore.bnode Value: \u0026#34;people\u0026#34; quad.String Ref: 6 memstore.bnode Key: 6 memstore.bnode Value: \u0026lt;foaf:givenName\u0026gt; quad.IRI Ref: 7 memstore.bnode Key: 7 memstore.bnode Value: \u0026#34;Luke\u0026#34; quad.String Ref: 9 memstore.bnode Key: 9 memstore.bnode Value: \u0026lt;foaf:familyName\u0026gt; quad.IRI Ref: 10 memstore.bnode Key: 10 memstore.bnode Value: \u0026#34;Skywalker\u0026#34; quad.String Ref: 12 memstore.bnode Key: 12 memstore.bnode Value: \u0026lt;foaf:age\u0026gt; quad.IRI Ref: 13 memstore.bnode Key: 13 memstore.bnode Value: \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Int Ref: 15 memstore.bnode Key: 15 memstore.bnode Value: \u0026lt;starwars:leia_organa\u0026gt; quad.IRI Ref: 17 memstore.bnode Key: 17 memstore.bnode Value: \u0026lt;foaf:knows\u0026gt; quad.IRI Ref: 19 memstore.bnode Key: 19 memstore.bnode Value: \u0026#34;Leia\u0026#34; quad.String Ref: 21 memstore.bnode Key: 21 memstore.bnode Value: \u0026#34;Organa\u0026#34; quad.String Quad-ok a Store-ban #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllQuads(store) } func printAllQuads(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.QuadsAllIterator() //fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it))  for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) quad := store.Quad(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Printf(\u0026#34;Quad: %v %v\\n\u0026#34;, quad, reflect.TypeOf(quad)) fmt.Println() /* v := it.Result() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, v, reflect.TypeOf(v)) fmt.Printf(\u0026#34;%v\\n\u0026#34;, v.Key()) name := store.NameOf(v) fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, name, reflect.TypeOf(name)) q := store.Quad(v) fmt.Println(q) fmt.Println() */ } } A program kimenete:\nRef: {0xc00007c1c0} memstore.qprim Key: 5 int64 Value: _:memnode5 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007c3c0} memstore.qprim Key: 8 int64 Value: _:memnode8 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Luke\u0026#34; quad.Quad Ref: {0xc00007c500} memstore.qprim Key: 11 int64 Value: _:memnode11 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Skywalker\u0026#34; quad.Quad Ref: {0xc00007c640} memstore.qprim Key: 14 int64 Value: _:memnode14 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;foaf:age\u0026gt; -\u0026gt; \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Quad Ref: {0xc00007c740} memstore.qprim Key: 16 int64 Value: _:memnode16 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007c800} memstore.qprim Key: 18 int64 Value: _:memnode18 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:knows\u0026gt; -\u0026gt; _:n6272731111119989818 quad.Quad Ref: {0xc00007c900} memstore.qprim Key: 20 int64 Value: _:memnode20 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Leia\u0026#34; quad.Quad Ref: {0xc00007c9c0} memstore.qprim Key: 22 int64 Value: _:memnode22 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Organa\u0026#34; quad.Quad A node-ok és quad-ok belső reprezentációja #    Belső reprezentáció   "});index.add({'id':10,'href':'/cayley-cookbook/docs/cayley-as-package/crud-operations/','title':"CRUD Műveletek",'section':"Cayley mint Package",'content':"CRUD Műveletek #  "});index.add({'id':11,'href':'/cayley-cookbook/docs/basic-concepts/vocabularies/','title':"Szótárak",'section':"Alapfogalmak",'content':"Szótárak #  "});index.add({'id':12,'href':'/cayley-cookbook/docs/basic-concepts/rdf-graphs/','title':"Rdf Gráfok",'section':"Alapfogalmak",'content':"Rdf Gráfok #  "});index.add({'id':13,'href':'/cayley-cookbook/docs/cayley-as-package/transactions/','title':"Tranzakciók",'section':"Cayley mint Package",'content':"Tranzakciók #  "});index.add({'id':14,'href':'/cayley-cookbook/docs/cayley-as-package/queries/','title':"Lekérdezések",'section':"Cayley mint Package",'content':"Lekérdezések #  "});index.add({'id':15,'href':'/cayley-cookbook/docs/cayley-as-package/schemas/','title':"Sémák",'section':"Cayley mint Package",'content':"Sémák #  "});})();