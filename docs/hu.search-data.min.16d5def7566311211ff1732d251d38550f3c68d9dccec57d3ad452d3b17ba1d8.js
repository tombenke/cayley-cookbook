'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/cayley-cookbook/docs/about/','title':"Bevezetés",'section':"Docs",'content':"Bevezetés #  Amikor manapság Mesterséges Intelligenciáról beszélünk, többnyire a Gépi Tanulásra gondolunk, amit Statisztikus Tanulásnak is neveznek. A Gépi Tanulás módszereivel nagyon látványos eredményeket lehet elérni, ugyanakkor komoly hátránya, hogy a tanulás során keletkezett eredmények elemzése, magyarázata ember számára szinte egyáltalán nem, vagy csak nehezen értelmezhető.\nA Gépi Tanulás azonban csak az egyik lehetséges megközelítés. Korábban, az MI kutatások kezdetén, az 50-es 60-as években a fő csapásirány a szimbolikus megközelítés volt. Előnye, a Gépi Tanulással szemben, hogy ember számára is átlátható a tanulás eredménye, a tudás, és a következtetési folyamat egésze jól leírható, a klasszikus programozáshoz hasonló eszközökkel. Ebbe a kategóriába sorolhatóak a szemantikus web technológik. A szimbolikus módszerek nagy hátránya, hogy az emberi intelligenciával összemérhető tudás, olyan méretű adatbázisokat igényel, ami az eddig kifejlesztett szimbolikus technológiákkal nem működtethető hatékonyan, a következtetés számításigénye és ezáltal a futási idő túlságosan nagy.\nAhhoz, hogy az emberi intelligenciához közelítő, valóban intelligens rendszereket hozzunk létre, elengedhetetlenül szükséges két összetevő:\n A rendszer képessége az irányított és önálló tanulásra, A tudás konverziójára a rendszer \u0026ldquo;agyában\u0026rdquo; lévő, belső reprezentáció és a szimbolikus térbeli (ember által is érthető és szerkeszthető) reprezentáció között.  A tudás szimbolikus reprezentációjára, és az így leírt tudás kezelésére jó alapot nyújtanak a szemantikus web számára kidolgozott technológiák, és az újabb gráf alapú adatbázisok és kereső motorok. Ide sorolható a Google Tudásgráfja is, amely az inspirációt adta a Cayley kifejlesztéséhez.\nEz a szakácskönyv alapvetően praktikus oldalról közelíti meg a problémát. Nem kíván szabatos, kimerítő áttekintést adni a fent felsorolt technológiákról, és elméletekről. Kizárólag azokat a fogalmakat próbálja közérthető, egyszerű, tömör formában leírni, amelyekre a Cayley épít.\nA tartalom három fő fejezetre tagolódik.\n Az \u0026ldquo;Alapfogalmak\u0026rdquo; c. fejezet ismerteti azokat a tudnivalókat, amelyek szükségesek ahhoz, hogy a Cayley -t használni tudjuk. \u0026ldquo;A Cayley rendszer áttekintése\u0026rdquo; c. fejezet segít eligazodni abban, hogy milyen elemekből áll a Cayley \u0026ldquo;ökoszisztéma\u0026rdquo;, és az egyes elemeit milyen módon lehet használni, hol találunk hozzá dokumentációt. A \u0026ldquo;Cayley mint Go package\u0026rdquo; c. fejezet alkotja a szakácskönyv fő tartalmát. Ebben találhatjuk az egyes használati eseteket, kezdve az egyszerűbbekkel, majd haladva a bonyolultabbak irányában.  Alapfogalmak \u0026#9659;  "});index.add({'id':1,'href':'/cayley-cookbook/docs/basic-concepts/','title':"Alapfogalmak",'section':"Docs",'content':"Alapfogalmak #  Ez a fejezet azokat az alapfogalmakat ismerteti, amelyek szükségesek ahhoz, hogy tudásgráfokkal dolgozzunk, és hogy a Cayley -t használni tudjuk.\nÁltalános elv, hogy a továbbiakban azokat a fogalmakat, amelyekkel a forráskódban is találkozni fogunk, az angol nevükön fogjuk nevezni, az egyértelműség és egyszerűség kedvéért.\n \u0026#9669; Bevezetés  Gráf alapú adat modell \u0026#9659;  "});index.add({'id':2,'href':'/cayley-cookbook/docs/basic-concepts/graph-based-data-model/','title':"Gráf alapú adatmodellezés",'section':"Alapfogalmak",'content':"Gráf alapú adatmodellezés #  Amikor tudásgráfot építünk, akkor a világ egy részéről építünk fel egy koncepcionális modellt.\nEgy koncepcionális modell jellemzően egy meghatározott szakterületet fed le, ezért ezt a modellt domain-nek, tudás-tartománynak is nevezzük.\nEgy domain a következőket képviseli:\n az elsődleges entitásokat (a dolgokat, amelyek a domain-be beletartoznak). Az entitásokra használni fogjuk a resource kifejezést is; az entitások között fennálló kapcsolatokat; az entitások és kapcsolatok tulajdonságait, másszóval attributumait. Ezeket property-knek is nevezzzük; esetleg a szabályokat, amelyek az entitások és attributumaik kapcsolatára, azok belső tulajdonságaira vonatkoznak.  A gráf alapú adatbáziskezelők, és a szemantikus technológiák hatékonyan alkalmazhatók olyan esetben, ahol rugalmas, gyakran változó, nem struktúrált adamodellel kell dolgozni, és sokféle keresési szempont alapján kell lekérdezéseket végrehajtanunk. Ebből adódóan jók a koncepcionális modellek leírására.\nA gráfok két fontos alkotóelemből állnak:\n csomópontok, másnével csúcsok, angolul node, vagy vertex. élek, amelyek a csomópontokat összekötik, angolul edge.  A tudásreprezentációnál a node-okat jellemzően fogalmak, dolgok ábrázolására használjuk, az edge-eket pedig a köztük fennáló kapcsolatok, asszociációk jelölésére.\nAz élek irányítottak, és mind a node-oknak, mind az edge-eknek lehetnek cimkéi, angolul label.\nAz 1. ábra egy egyszerű gráfot ábrázol, amin két csomópont (node) található a \u0026ldquo;Luke\u0026rdquo; és \u0026ldquo;Leia\u0026rdquo; cimkékkel, továbbá köztük egy él (edge) a \u0026ldquo;knows\u0026rdquo; cimkével.\n  1. ábra: Egyszerű Gráf   Bizonyos gráf adatbáziskezelők megengedik, hogy a node-ok és edge-ek több tulajdonságot is hordozzanak, a Cayley esetében számunkra ezek egyetlen értéket fognak jelenteni.\n \u0026#9669; Alapfogalmak  Erőforrások \u0026#9659;  "});index.add({'id':3,'href':'/cayley-cookbook/docs/cayley-as-package/vocabularies/','title':"Namespace-ek és szótárak",'section':"Cayley mint Package",'content':"Namespace-ek és szótárak #  Namespace-ek #  Az alábbi kód kilistázza az összes, jelenleg regisztrált namespace-t:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add some predefined vocabularies \t_ \u0026#34;github.com/cayleygraph/quad/voc/schema\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/xsd\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; ) func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } \ncd namespaces go run list_namespaces.go` a program kimenete:\nRegistered namespaces: rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  schema: =\u0026gt; http://schema.org/  xsd: =\u0026gt; http://www.w3.org/2001/XMLSchema#  rdf: =\u0026gt; http://www.w3.org/1999/02/22-rdf-syntax-ns#  Az alábbi kód regisztrál egy új namespace-t:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add built-in vocabulary \t_ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; // Add own vocabulary \t_ \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func init() { // Register a new namespace with prefix  voc.RegisterPrefix(`acc:`, `http://mycompany.com/voc/accounting#`) } func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } \ncd namespaces go run register_namespace.go a program kimenete:\nRegistered namespaces: rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  foaf: =\u0026gt; http://xmlns.com/foaf/0.1/#  acc: =\u0026gt; http://mycompany.com/voc/accounting#  Szótárak #  A következő kódrészlet bemutatja, hogyan lehet egy új szótárat definiálni.\nA foaf.go package FOAF Vocabulary Specification leggyakrabban használt kifejezéseit definiálja. Ezt a package-et több példában is használjuk. A szótárban definiált szavakat predikátumként alkalmazzuk.\n// Package foaf contains constants of the FOAF Concepts Vocabulary (RDF) package foaf import \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; func init() { voc.RegisterPrefix(Prefix, NS) } const ( NS = `http://xmlns.com/foaf/0.1/#` Prefix = `foaf:` ) const ( // Core  // An agent (eg. person, group, software or physical artifact).  Agent = Prefix + `Agent` // A person.  Person = Prefix + `Person` // A name for some thing.  Name = Prefix + `name` // Title (Mr, Mrs, Ms, Dr. etc)  Title = Prefix + `title` // An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one\u0026#39;s photo on a homepage).  Img = Prefix + `img` // A thing depicted in this representation.  Depiction = Prefix + `depiction` Depicts = Prefix + `depicts` // The family name of some person.  FamilyName = Prefix + `familyName` // The first name of some person.  GivenName = Prefix + `givenName` // The gender of this Agent (typically but not necessarily \u0026#39;male\u0026#39; or \u0026#39;female\u0026#39;).  Gender = Prefix + `gender` // A person known by this person (indicating some level of reciprocated interaction between the parties).  Knows = Prefix + `knows` // A location that something is based near, for some broadly human notion of near.  BasedNear = Prefix + `based_near` // The age in years of some agent.  Age = Prefix + `age` // The birthday of this Agent, represented in mm-dd string form, eg. \u0026#39;12-31\u0026#39;.  Birthday = Prefix + `birthday` // Something that was made by this agent.  Made = Prefix + `made` PrimaryTopic = Prefix + `primaryTopic (primaryTopicOf)` // A project (a collective endeavour of some kind).  Project = Prefix + `Project` // An organization.  Organization = Prefix + `Organization` // A class of Agents.  Group = Prefix + `Group` // A string expressing what the user is happy for the general public (normally) to know about their current activity.  Status = Prefix + `status` // Indicates a member of a Group  Member = Prefix + `member` // A document.  Document = Prefix + `Document` // An image.  Image = Prefix + `Image` // SocialWeb  // A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).  Nick = Prefix + `nick` // A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox.  Mbox = Prefix + `mbox` // A homepage for some thing.  Homepage = Prefix + `homepage` // A weblog of some thing (whether person, group, company etc.).  Weblog = Prefix + `weblog` // An OpenID for an Agent.  Openid = Prefix + `openid` // A jabber ID for something.  JabberID = Prefix + `jabberID` // sha1sum of a personal mailbox URI name - The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.  MboxSha1sum = Prefix + `mbox_sha1sum` // A page about a topic of interest to this person.  Interest = Prefix + `interest` // A thing of interest to this person.  TopicInterest = Prefix + `topic_interest` // A topic of some page or document.  Topic = Prefix + `topic` // A workplace homepage of some person; the homepage of an organization they work for.  WorkplaceHomepage = Prefix + `workplaceHomepage` // A work info homepage of some person; a page about their work for some organization.  WorkInfoHomepage = Prefix + `workInfoHomepage` // A homepage of a school attended by the person.  SchoolHomepage = Prefix + `schoolHomepage` // A link to the publications of this person.  Publications = Prefix + `publications` // A current project this person works on.  CurrentProject = Prefix + `currentProject` // A project this person has previously worked on.  PastProject = Prefix + `pastProject` // Indicates an account held by this agent.  Account = Prefix + `account` // An online account  OnlineAccount = Prefix + `OnlineAccount` // Indicates the name (identifier) associated with this online account.  AccountName = Prefix + `accountName` // Indicates a homepage of the service provide for this online account.  AccountServiceHomepage = Prefix + `accountServiceHomepage` // A personal profile RDF document  PersonalProfileDocument = Prefix + `PersonalProfileDocument` // A tipjar document for this agent, describing means for payment and reward.  Tipjar = Prefix + `tipjar` // A sha1sum hash, in hex.  Sha1 = Prefix + `sha1` // A derived thumbnail image.  Thumbnail = Prefix + `thumbnail` // A logo representing some thing.  Logo = Prefix + `logo` )  Kapcsolódó oldalak:   Szótárak   "});index.add({'id':4,'href':'/cayley-cookbook/docs/cayley-overview/','title':"A Cayley rendszer áttekintése",'section':"Docs",'content':"A Cayley rendszer áttekintése #  Ez a fejezet, abban segít eligazodni, hogy milyen elemekből áll a Cayley \u0026ldquo;ökoszisztéma\u0026rdquo;, és az egyes elemeit milyen módon lehet használni, hol találunk hozzá dokumentációt.\n  Cayley Components   "});index.add({'id':5,'href':'/cayley-cookbook/docs/basic-concepts/resources/','title':"Erőforrások",'section':"Alapfogalmak",'content':"Erőforrások #  Erőforrás #  Az erőforrás egy általános fogalom, amelyet a web-en, és a szemantikus web-en gyakran használunk. Lényegében a világban létező konkrét és absztrakt dolgokat értjük alatta. A resource-nak van két fontos tulajdonsága:\n van egyedi azonossága, identitása (identity), ábrázolható valamilyen módon (representation).  Tekintetbe véve a fenti két jellemzőt, a resource megfeleltethető a Domain Driven Design entity (entitás) és aggregate fogalmainak. A mi vizsgálatunk szempontjából a két dolgot azonosnak tekinthetjük, a lényeg, hogy egy adott dologot egyértelműen tudjunk azonosítani, akág glóbálisan, akár egy szükebb értelmezési tartományban, vagyis rendelkezzen legalább egy egyedi azonosítóval, valamint le tudjuk írni valamilyen formában.\nA leírásnak sokféle formája lehet: szöveges, képi, számítógépes program kód, memóriabeli állapot, stb. Mi a szabványos reprezentációs formátumokra fogunk fókuszálni. Ezek közül is azokra, amelyek a tudás szimbolikus leírására lettek kidolgozva, mint például a szemantikus web számára.\nPéldák resource-okra:\n konkrét, vagy elképzelt személyek tárgyak absztrakt fogalmak  Az alábbi kód részlet egy képzeletbeli személyt reprezentál JSON formátumban:\n{ \u0026#34;id\u0026#34;: \u0026#34;\u0026lt;star-wars-universe:luke_skywalker\u0026gt;\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;Luke\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Skywalker\u0026#34;, \u0026#34;age\u0026#34;: 23 } Ugyanez a személy YAML reprezentációs formátumban:\n--- id: \u0026lt;star-wars-universe:luke_skywalker\u0026gt; firstName: Luke lastName: Skywalker age: 23 Két különböző reprezentáció, de ugyanaz a személy.\nTipikusan a resource-ok alkotják a tudásgráf csomópontjait, de gyakran előfordul olyan eset, hogy az entitások között fennáló kapcsolat, gráf él szerepel mint resource, amennyiben rá vonatkozóa akarunk további megállapításokat, szabályokat leírni.\nIRI-k #  Az erőforrásokat, másként nevezve az entitásokat azonosítani kell. Erre szolgálnak az IRI-k. Az IRI az Internationalized Resource Identifier kifejezés rövidítése.\nAz IRI egy Unicode string, amelynek a formátumát az RFC 3987 definiálja, és ami egyedileg azonosít egy entitást. Az IRI stringeket a \u0026lt; és \u0026gt; karakterek zárják közre, és a karaktereken és számokon kívül numerikus escape szekvenciákat is tartalmazhatnak. formájukban nagyon hasonlítanak az URI-kre, a Uniform Resource Identifier-ekre, mint amilyenek a webről jól ismert URL-ek.\nAz IRI-k az URI-k általánosított változatának tekinthetők, Csak abszolút formában léteznek. Minden abszolút URI és URL IRI-ként tekintendő, viszont nem minden IRI számít URI-nek.\nAz IRI-k alapértelmezés szerint globális hatáskörrel rendelkeznek. Ennek megfelelően egy IRI két különbőző környezetben történő megjelenése ugyanazt az entitást jelenti.\nMinden IRI egy jól meghatározott dolgot, erőforrrást azonosít a tárgyalás körét jelentő világban. Az erőforrást, amire az IRI hivatkozik, és amit azonosít az azonosítás tárgyának (referent) nevezzük.\nPéldák IRI-kre:\n\u0026lt;star-wars-universe:luke_skywalker\u0026gt; \u0026lt;star-wars-universe:han_solo\u0026gt; \u0026lt;35345322-543555-534534532\u0026gt; \u0026lt;https://en.wikipedia.org/wiki/Millennium_Falcon\u0026gt; Az IRI-k absztrakt dolgokat, fogalmakat is kifejezhetnek, mint például dolgok tulajdonságainak azonosítását, vagy a entitások közötti viszony kifejezését. Erre példa az alábbi néhány IRI:\n\u0026lt;has\u0026gt; \u0026lt;is\u0026gt; \u0026lt;nameOf\u0026gt; \u0026lt;foaf:knows\u0026gt; Literál értékek #  Az erőforrásnak általában vannak tulajdonságai, amelyeket az ábrázolásban leírunk. Ezek a tulajdonságok valamilyen értéket vesznek fel.\nIlyen tulajdonság értékek például egy konkrét személy esetében a személy neve, születési időpontja, stb. a tulajdonságok értékei pedig a konkrét adatok (név, időpont) amiket az említett tulajdonságok felvesznek.\nEzeket a tulajdonság értékeket literál értékeknek, vagy csak egyszerűen literáloknak hívjuk.\nA literál értékeknek megadhatjuk a típusát, pl.: string, egész szám, dátum, stb..\nA típusokat postfix formában adjuk meg, az értékhez hozzáragasztva a ^^ jelőléssel.\nPéldák típusokra:\n\u0026quot;Dantooine\u0026quot;^^xsd:string \u0026quot;23\u0026quot;^^\u0026lt;xsd:integer\u0026gt; Azt is megadhatjuk, hogy milyen nyelven kell értelmezni az adott literál értéket. Ezt a nyelvi tag-gel, mint postfix-szel adhatjuk meg, a @ karaktert használva elválasztóként.\nPéldák nyelvi azonosításra:\n\u0026quot;people\u0026quot;@en \u0026quot;emberek\u0026quot;@hu A nyelv azonosítása mellett az írás irányát is lehet, jelezni, és még sok finom részletet tárgyalnak a specifikációk, de ezek ismerete nem szükséges az itt leírtak megértéséhez és a Cayley használatához.\n \u0026#9669; Gráf alapú adat modell  Állítások \u0026#9659;  "});index.add({'id':6,'href':'/cayley-cookbook/docs/cayley-as-package/quads/','title':"Quad-ok",'section':"Cayley mint Package",'content':"Quad-ok #  Az alábbi példa létrehoz egy quad halmazt, majd kiexportálja többféle formátumban:\nA teljes kódlista megtekintése package main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func main() { // Create Quads about some people using Blank Nodes as references  quadsWithBNodes := makeQuadsWithBNodes() // Take a look at the resulted quads  printQuads(quadsWithBNodes) // Create Quads about some people using IRIs as references  quadsWithIRIs := makeQuadsWithIRIs() // Take a look at the resulted quads  printQuads(quadsWithIRIs) } func makeQuadsWithBNodes() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Generate a Blank Node to represent the person internally  // You can create a sequence of internal IDs for the Blank Nodes  var seq quad.Sequence luke := seq.Next() // Alternatively create a Blank Node with a random internal ID  // luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) leia := seq.Next() quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func makeQuadsWithIRIs() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Create IRIs to represent the person globally, and universally  luke := quad.IRI(\u0026#34;https://swapi.co/resource/human/luke_skywalker\u0026#34;) // Alternatively create a Blank Node with a random internal ID  // luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) leia := quad.IRI(\u0026#34;https://swapi.co/resource/human/leia_organa\u0026#34;) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func printQuads(quads []quad.Quad) { fmt.Println(\u0026#34;The details of the quads created:\u0026#34;) for i, q := range quads { fmt.Printf(\u0026#34;quads[%d]:\\n\u0026#34;, i) fmt.Printf(\u0026#34; subject: %s %v\\n\u0026#34;, q.Get(quad.Subject), reflect.TypeOf(q.Get(quad.Subject))) fmt.Printf(\u0026#34; predicate: %s %v\\n\u0026#34;, q.Get(quad.Predicate), reflect.TypeOf(q.Get(quad.Predicate))) fmt.Printf(\u0026#34; object: %s %v\\n\u0026#34;, q.Get(quad.Object), reflect.TypeOf(q.Get(quad.Object))) fmt.Printf(\u0026#34; label: %s %v\\n\\n\u0026#34;, q.Get(quad.Label), reflect.TypeOf(q.Get(quad.Label))) } fmt.Println(\u0026#34;The quads in NQuad representation:\u0026#34;) for _, q := range quads { fmt.Printf(\u0026#34;%s\\n\u0026#34;, q.NQuad()) } }    Futtassuk a programot: \ncd quad/writer go run export_nquads_to_stdout.go data A program kimenete:\nGraphviz digraph cayley_graph { \u0026quot;_:n6340084149380325359\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n6340084149380325359\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Luke\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n6340084149380325359\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Skywalker\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; \u0026quot;_:n6340084149380325359\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;23\\\u0026quot;^^\u0026lt;xsd:integer\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:age\u0026gt;\u0026quot; ]; \u0026quot;_:n3716355040095307863\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n3716355040095307863\u0026quot; -\u0026gt; \u0026quot;_:n6340084149380325359\u0026quot; [ label = \u0026quot;\u0026lt;foaf:knows\u0026gt;\u0026quot; ]; \u0026quot;_:n3716355040095307863\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Leia\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n3716355040095307863\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Organa\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; } GML Creator \u0026#34;Cayley\u0026#34; graph [ directed 1 node [ id 0 label \u0026#34;_:n6340084149380325359\u0026#34; ] node [ id 1 label \u0026#34;\u0026lt;foaf:Person\u0026gt;\u0026#34; ] edge [ source 0 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] node [ id 2 label \u0026#34;\u0026amp;quot;Luke\u0026amp;quot;\u0026#34; ] edge [ source 0 target 2 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 3 label \u0026#34;\u0026amp;quot;Skywalker\u0026amp;quot;\u0026#34; ] edge [ source 0 target 3 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] node [ id 4 label \u0026#34;\u0026amp;quot;23\u0026amp;quot;^^\u0026lt;xsd:integer\u0026gt;\u0026#34; ] edge [ source 0 target 4 label \u0026#34;\u0026lt;foaf:age\u0026gt;\u0026#34; ] node [ id 5 label \u0026#34;_:n3716355040095307863\u0026#34; ] edge [ source 5 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] edge [ source 5 target 0 label \u0026#34;\u0026lt;foaf:knows\u0026gt;\u0026#34; ] node [ id 6 label \u0026#34;\u0026amp;quot;Leia\u0026amp;quot;\u0026#34; ] edge [ source 5 target 6 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 7 label \u0026#34;\u0026amp;quot;Organa\u0026amp;quot;\u0026#34; ] edge [ source 5 target 7 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] ] GraphML \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;graphml xmlns=\u0026#34;http://graphml.graphdrawing.org/xmlns\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd\u0026#34; xmlns:y=\u0026#34;http://www.yworks.com/xml/graphml\u0026#34;\u0026gt; \u0026lt;key id=\u0026#34;d0\u0026#34; for=\u0026#34;node\u0026#34; yfiles.type=\u0026#34;nodegraphics\u0026#34;/\u0026gt; \u0026lt;key id=\u0026#34;d1\u0026#34; for=\u0026#34;edge\u0026#34; yfiles.type=\u0026#34;edgegraphics\u0026#34;/\u0026gt; \u0026lt;graph id=\u0026#34;G\u0026#34; edgedefault=\u0026#34;directed\u0026#34;\u0026gt; \u0026lt;node id=\u0026#34;n0\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;220.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;_:n6340084149380325359\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;130.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#FFFF99\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;lt;foaf:Person\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n2\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;60.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Luke\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n2\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n3\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;110.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Skywalker\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n3\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n4\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;190.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;23\u0026amp;#34;^^\u0026amp;lt;xsd:integer\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n4\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:age\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n5\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;220.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;_:n3716355040095307863\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n0\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:knows\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n6\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;60.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Leia\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n6\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n7\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;80.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Organa\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n7\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;/graph\u0026gt; \u0026lt;/graphml\u0026gt; JSON [ {\u0026#34;subject\u0026#34;:\u0026#34;_:n6340084149380325359\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n6340084149380325359\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Luke\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n6340084149380325359\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Skywalker\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n6340084149380325359\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:age\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\\u0026#34;23\\\u0026#34;^^\\u003cxsd:integer\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n3716355040095307863\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n3716355040095307863\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:knows\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;_:n6340084149380325359\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n3716355040095307863\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Leia\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n3716355040095307863\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Organa\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;} ] n-quads _:n6340084149380325359 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n6340084149380325359 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Luke\u0026quot; \u0026quot;people\u0026quot; . _:n6340084149380325359 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Skywalker\u0026quot; \u0026quot;people\u0026quot; . _:n6340084149380325359 \u0026lt;foaf:age\u0026gt; \u0026quot;23\u0026quot;^^\u0026lt;xsd:integer\u0026gt; \u0026quot;people\u0026quot; . _:n3716355040095307863 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n3716355040095307863 \u0026lt;foaf:knows\u0026gt; _:n6340084149380325359 \u0026quot;people\u0026quot; . _:n3716355040095307863 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Leia\u0026quot; \u0026quot;people\u0026quot; . _:n3716355040095307863 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Organa\u0026quot; \u0026quot;people\u0026quot; .    Graphviz-ből előállított diagram     yEd GraphML-ből előállított diagram   "});index.add({'id':7,'href':'/cayley-cookbook/docs/cayley-as-package/','title':"Cayley mint Package",'section':"Docs",'content':"Cayley mint Package #  Ez a fejezet azt demonstrálja, hogyan lehet a Cayley-t Golang package-ként alkalmazni.\n"});index.add({'id':8,'href':'/cayley-cookbook/docs/cayley-as-package/stores/','title':"Store-ok",'section':"Cayley mint Package",'content':"Store-ok #  Teszt adatok előállítása #  package main import ( \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally  luke := quad.RandomBlankNode() leia := quad.IRI(\u0026#34;starwars:leia_organa\u0026#34;) //quad.RandomBlankNode()  // Create Quads about to export  label := \u0026#34;people\u0026#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Organa\u0026#34;, label)) return quads } Node-ok a Store-ban #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllNodes(store) } func printAllNodes(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.NodesAllIterator() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it)) for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Println() } } A program kimenete:\nMemStoreAll *memstore.AllIterator Ref: 1 memstore.bnode Key: 1 memstore.bnode Value: _:n8179238725398674346 quad.BNode Ref: 2 memstore.bnode Key: 2 memstore.bnode Value: \u0026lt;rdf:type\u0026gt; quad.IRI Ref: 3 memstore.bnode Key: 3 memstore.bnode Value: \u0026lt;foaf:Person\u0026gt; quad.IRI Ref: 4 memstore.bnode Key: 4 memstore.bnode Value: \u0026#34;people\u0026#34; quad.String Ref: 6 memstore.bnode Key: 6 memstore.bnode Value: \u0026lt;foaf:givenName\u0026gt; quad.IRI Ref: 7 memstore.bnode Key: 7 memstore.bnode Value: \u0026#34;Luke\u0026#34; quad.String Ref: 9 memstore.bnode Key: 9 memstore.bnode Value: \u0026lt;foaf:familyName\u0026gt; quad.IRI Ref: 10 memstore.bnode Key: 10 memstore.bnode Value: \u0026#34;Skywalker\u0026#34; quad.String Ref: 12 memstore.bnode Key: 12 memstore.bnode Value: \u0026lt;foaf:age\u0026gt; quad.IRI Ref: 13 memstore.bnode Key: 13 memstore.bnode Value: \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Int Ref: 15 memstore.bnode Key: 15 memstore.bnode Value: \u0026lt;starwars:leia_organa\u0026gt; quad.IRI Ref: 17 memstore.bnode Key: 17 memstore.bnode Value: \u0026lt;foaf:knows\u0026gt; quad.IRI Ref: 19 memstore.bnode Key: 19 memstore.bnode Value: \u0026#34;Leia\u0026#34; quad.String Ref: 21 memstore.bnode Key: 21 memstore.bnode Value: \u0026#34;Organa\u0026#34; quad.String Quad-ok a Store-ban #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllQuads(store) } func printAllQuads(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.QuadsAllIterator() //fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it))  for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) quad := store.Quad(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Printf(\u0026#34;Quad: %v %v\\n\u0026#34;, quad, reflect.TypeOf(quad)) fmt.Println() /* v := it.Result() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, v, reflect.TypeOf(v)) fmt.Printf(\u0026#34;%v\\n\u0026#34;, v.Key()) name := store.NameOf(v) fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, name, reflect.TypeOf(name)) q := store.Quad(v) fmt.Println(q) fmt.Println() */ } } A program kimenete:\nRef: {0xc00007a1c0} memstore.qprim Key: 5 int64 Value: _:memnode5 quad.BNode Quad: _:n2570521104147429163 -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007a3c0} memstore.qprim Key: 8 int64 Value: _:memnode8 quad.BNode Quad: _:n2570521104147429163 -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Luke\u0026#34; quad.Quad Ref: {0xc00007a500} memstore.qprim Key: 11 int64 Value: _:memnode11 quad.BNode Quad: _:n2570521104147429163 -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Skywalker\u0026#34; quad.Quad Ref: {0xc00007a640} memstore.qprim Key: 14 int64 Value: _:memnode14 quad.BNode Quad: _:n2570521104147429163 -- \u0026lt;foaf:age\u0026gt; -\u0026gt; \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Quad Ref: {0xc00007a740} memstore.qprim Key: 16 int64 Value: _:memnode16 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007a800} memstore.qprim Key: 18 int64 Value: _:memnode18 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:knows\u0026gt; -\u0026gt; _:n2570521104147429163 quad.Quad Ref: {0xc00007a900} memstore.qprim Key: 20 int64 Value: _:memnode20 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Leia\u0026#34; quad.Quad Ref: {0xc00007a9c0} memstore.qprim Key: 22 int64 Value: _:memnode22 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Organa\u0026#34; quad.Quad A node-ok és quad-ok belső reprezentációja #    Belső reprezentáció   "});index.add({'id':9,'href':'/cayley-cookbook/docs/basic-concepts/statements/','title':"Állítások",'section':"Alapfogalmak",'content':"Állítások #  Alany, Állítmány, Tárgy #  A tudást tény-állításokként rögzítjük. A tényeket kijelentő mondatokként megfogalmazott állítások formájában írtuk le. Például:\nLuke Skywalker életkora kora 23 év. angolul:\nLuke Skywalker has age 23. A mondatokat át lehet alakítani olyan formába, hogy azok az alany-állítmány-tárgy szerkezetet tükrözzék. Ezeket a szerkezeti elemeket angolul subject-predicate-object névvel azonosítjuk.\nLuke-Skywalker has-age 23. A mondat elemei:\n subject (alany): Luke-Skywalker, predicate (állítmány): has-age, object (tárgy): 23.  Mivel sok Luke Skywalker létezhet, ezért az egyértelműség kedvéért a konkrét személyre a Luke-Skywalker-from-StarWars azonosítóval fogunk hivatkozni. Mivel szabványosított formátumú, univerzális azonosítót akarunk használni, ezért Luke azonosítója a következő IRI lesz: \u0026lt;Luke-Skywalker-from-StarWars\u0026gt;.\nLuke egyértelműen egy resource, vagy más néven entitás, akit egy IRI-vel egyértelműen azonosítunk. Van egy tulajdonsága, az életkor, amit a \u0026lt;has-age\u0026gt; IRI-vel tudunk kifejezni, mivel ez egy általános fogalom. Ezen felül szükségünk vagy egy literál-ra, aminek az értéke 23 és a típusa egész szám. Ezt az értéket veszi fel Luke esetében a has-age tulajdonság. Végleges formában tehát a kijelentés az alábbi lesz:\n\u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-age\u0026gt; 23^^integer . Láthatjuk az 1. ábrán, hogy a subject-predicate-object hármas felrajzolható gráfként, ahol a subject és az object node-okként jelenik meg, és a predicate lesz a két node-ot összekötő, irányított él.\n  1. ábra: Subject-Predicate-Object Gráf   Az ilyen formában felírt kijelentést triplet-nek is nevezik.\nPéldaképpen vizsgáljuk meg, hogyan tudnánk reprezentálni a számítógép számára az alábbi tényeket:\nLuke Skywalker egy személy a StarWars világban. Családi neve Skywalker, keresztneve Luke. Luke Skywalker jelenleg 23 éves. Leia Organa egy személy a StarWars világban. Családi neve Organa, keresztneve Leia. Leia ismeri Luke-ot. Alakítsuk át a fenti mondatokat subject-predicat-object szerkezetűvé.\nNézzük hogyan néz ki átfogalmazva a fenti néhány mondat. Az átrendezett mondatokat angolul fogjuk leírni, mert ezzel egyszerűbb lesz követni a gráffá alakítás során a jelölésmódot. A subject-eket és predicate-eket rögtön IRI formátumba alakítottuk.\n\u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;is-a\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-given-name\u0026gt; \u0026#34;Luke\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-family-name\u0026gt; \u0026#34;Skywalker\u0026#34; . \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; \u0026lt;has-age\u0026gt; 23 . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;is-a\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;has-given-name\u0026gt; \u0026#34;Leia\u0026#34; . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;has-family-name\u0026gt; \u0026#34;Organa\u0026#34; . \u0026lt;Leia-Organa-from-StarWars\u0026gt; \u0026lt;knows\u0026gt; \u0026lt;Luke-Skywalker-from-StarWars\u0026gt; . Gráfként fogjuk ábrázolni a tényeket, azokkal az elemekkel, amit az előző fejezetben bevezettünk, resource-okkal, IRI-kkel, és literál értékekkel.\nA resource-ok (subject-ek és object-ek):\n Luke Skywalker a StarWars világban: \u0026lt;Luke-Skywalker-from-StarWars\u0026gt;, Leia Organa a StarWars világban: \u0026lt;Leia-Organa-from-StarWars\u0026gt;, Személy (mint fogalom): \u0026lt;Person\u0026gt;.  A predikátumok:\n \u0026lt;is-a\u0026gt;, \u0026lt;has-given-name\u0026gt;, \u0026lt;has-family-name\u0026gt;, \u0026lt;has-age\u0026gt;, \u0026lt;knows\u0026gt;.  A literálok:\n \u0026quot;Luke\u0026quot;, \u0026quot;Skywalker\u0026quot;, \u0026quot;Leia\u0026quot;, \u0026quot;Organa\u0026quot;, 23.  A 2. ábra azt szemléltei, hogy a fenti állítások hogyan jelennek meg gráfként:\n  2. ábra: Predikátumok gráfként ábrázolva   Az entitások sárga színnel, a literálok pedig zöld színnel vannak megjelenítve.\nÜres node-ok #  Előfordul olyan eset, amikor az állításokat úgy akarjuk hozzákapcsolni egy entitáshoz, hogy ahhoz nem akarunk globális azonosítót, IRI-t rendelni, mivel az entitásra csak az adott gráfon berül van szükségünk, és annak a kapcsolatai a lényegesek, nem pedig az, hogy a külvilág felé egyértelmű legyen az azonossága. Ebben az esetben úgynevezett üres csomópontokat, angolul Blank Node-okat alkalmazunk.\nA Blank Node-oknak is van saját azonosítója, ami egy adott gráfon belül egyedi ameddig a program fut.\nA Blank Node-ok a _: prefix-szel kezdődnek, és többnyire valamilyen véletlenszerűen generált számmal, vagy stringgel folytatódnak.\nA 3. ábra hasonló a 2. ábrán látható gráfhoz, azzal a különbséggel, hogy azon a két személyt nem azonosítjuk, gobális hatáskörű IRI-kkel, hanem csak lokális hatáskörű Blank node-okkal.\n  3. ábra: Predikátumok gráfként ábrázolva, Blank node-okkal   A Blank Node-okat szürke színnel jelöljük.\n Kapcsolódó oldalak:   Erőforrások    \u0026#9669; Erőforrások  Szótárak \u0026#9659;  "});index.add({'id':10,'href':'/cayley-cookbook/docs/cayley-as-package/crud-operations/','title':"CRUD Műveletek",'section':"Cayley mint Package",'content':"CRUD Műveletek #  "});index.add({'id':11,'href':'/cayley-cookbook/docs/basic-concepts/vocabularies/','title':"Szótárak",'section':"Alapfogalmak",'content':"Szótárak #  Szótár #  A tudásgráfok alkalmazásának egyik fő előnye, hogy a segítségükkel leírt tudás-területek ismeretanyagát a szimbólkus térben tárgyalja, vagyis olyan kódolási, és reprezentációs formákat alkalmaz, ami az emberek számára is érthetővé teszi a fogalmak, dolgok egyértelmű azonosítását.\nAmikor egy entitást megnevezünk, vagy állításokat teszünk, predikátumok alkalmazásával, a gépnek és az embernek ugyanazt a jelentéstartalmat kell értenie a kifejezések mögött. Ahhoz, hogy a kifejezések jelentése is egyértelmű legyen, szótárakat hozunk létre. A szótárak definiálják mindazokat a azonosítókat és predikátumokat, amelyek a szótár hatáskörébe tartoznak. A szótárak a legtöbb esetben IRI-ket sorolnak fel, azok jelentésével és alkalmazási lehetőségeivel, szabályaival.\nA szótárakban szereplő IRI-k általában angol szavak, vagy rövidítések. Ugyanaz a szó akár egy entitás azonosítására használjuk, akár predikátumként egy viszony vagy tulajdonság kifejezésére, különböző szövegkörnyezetekben mást és mást jelenthet. Pl. az a szó, hogy robot egy autó-összeszerelő ipari üzemben szerelő robotot fog jelenteni, de egy sci-fi novellában már egy intelligens droidot.\nAz eddig bemutatott predikátumaink, mint \u0026lt;knows\u0026gt;, \u0026lt;Person\u0026gt;, tehát nem eléggé precízek, és egyértelműek.\nAzért, hogy az IRI-k globális érvényessége ne sérüljön, és, hogy a jelentés egyértelmű legyen, az egyes szakterületekre külön-külön szótárakat hoznak létre. Ezek a szótárak lehetnek általános fogalmakat (ember, barát, ismer, szülő, gyerek, stb.) leíró szótárak, és fókuszálhatnak egy szűk területre, pl. gyógyszerkutatás. Az is lehetséges, hogy ugyanaz a szó több szótárban is szerepel, hasonló, vagy némileg eltérő jelentéssel.\nJó példa egy szótárra a FOAF, ami jól használható emberek és szervezetek profiljának leírására.\nAmikor használjuk az IRI-ket, akkor azt is jelezzük, hogy melyik szótár értelmezésében értjük azt. Ezt úgy tehetjük meg, hogy megadjuk a szótár azonosítóját, ami egy egyedi string, többnyire egy URL. Ezt a szótár azonosítót az IRI elejére illesztjük.\nHa most átalakítjuk a predicate-ként használt IRI-jeinket, úgy, hogy azok megfeleljenek a FOAF szótárnak, akkor az alábbi formát fogják ölteni:\n\u0026lt;http://xmlns.com/foaf/0.1/#age\u0026gt; \u0026lt;http://xmlns.com/foaf/0.1/#familyName\u0026gt; \u0026lt;http://xmlns.com/foaf/0.1/#givenName\u0026gt; \u0026lt;http://xmlns.com/foaf/0.1/#Person\u0026gt; Névtartományok #  Az előző fejezetben bevezetett szótár azonosító string (pl.: http://xmlns.com/foaf/0.1/#) egyértelműen meghatároz egy név-tartományt, angolul namespace-t, amiben pontosan definiáltuk a szó azonosságát, és jelentését. Az IRI-k ebben a hosszú formában nem túl kényelmesen olvashatóak ember számára, ezért azokban a reprezentációkban, amiket szerkeszteni, vagy olvasni akarunk, és nem csak a gépek olvasnak, lehet egy rövidebb változatot is alkalmazni, amit prefix-nek nevezünk. A FOAF szótár esetében jellemzően a foaf: prefixet használjuk, tehát:\n namespace: http://xmlns.com/foaf/0.1/ prefix: foaf  A prefix-es változtatban a predikátumaink a következőképpen festenek:\n\u0026lt;foaf:age\u0026gt; \u0026lt;foaf:familyName\u0026gt; \u0026lt;foaf:givenName\u0026gt; \u0026lt;foaf:Person\u0026gt; A prefixes és a teljes namespace-szel leírt formák azonosak egymással. A különbség az, hogy a teljes változatot bárhol használhatjuk, mert az a teljes információt és azonosságot magában hordozza. A prefix-es változatnál minden esetben jeleznünk kell az adott reprezentációban (forrás file), a prefix definícióját. Erre minden reprezentációs formátumnak (RDF, Turtle, stb.) ami megengedi a prefix-ek alkalmazását meghatározott nyelvi elemei vannak.\nFontos szótárak, amelyek alapértelmezésben a Cayley -ben is definiálva vannak:\n   prefix namespace     owl http://www.w3.org/2002/07/owl#   rdf http://www.w3.org/1999/02/22-rdf-syntax-ns#   rdfs http://www.w3.org/2000/01/rdf-schema#   schema http://schema.org/   xsd http://www.w3.org/2001/XMLSchema#    Mi magunk is létre tudunk hozni namespace-eket és prefix-eket. Például a StarWars univerzum számára bevezethetjük a következő párost:\n namespace: http://starwars.universe/# prefix: starwars  és ezen túl, ebben tudjuk értelmezni a resource-ainkat:\n\u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;starwars:Leia-Organa\u0026gt; A szótárakat egy adott tudásreprezentációs file-on, ill. adatbázison belül kombináltan használhatjuk egymással, a kijelentésekben. A prefixekkel kiegészített kijelentéseink az alábbiak lesznek:\n\u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;rdf:type\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;foaf:givenName\u0026gt; \u0026#34;Luke\u0026#34; . \u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;foaf:familyName\u0026gt; \u0026#34;Skywalker\u0026#34; . \u0026lt;starwars:Luke-Skywalker\u0026gt; \u0026lt;foaf:age\u0026gt; 23 . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;rdf:type\u0026gt; \u0026lt;Person\u0026gt; . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;foaf:givenName\u0026gt; \u0026#34;Leia\u0026#34; . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;foaf:familyName\u0026gt; \u0026#34;Organa\u0026#34; . \u0026lt;starwars:Leia-Organa\u0026gt; \u0026lt;knows\u0026gt; \u0026lt;starwars:Luke-Skywalker\u0026gt; . Ontológiák #  A teljesség kedvéért fontos megemlíteni, hogy a szótárak az esetek jelentős részében jóval több mindent tartalmaznak, mint a nevek listáját, és szöveges értelmezését.\nA szementikus web technológiájával olyan erőforrásokat és predikátumokat is használunk, amelyek meta információt tartalmaznak más erőforrásokról, és predikátumokról. Pl. a predikátumoknak, mint relációknak leírhatóak a tulajdonságai (reflexív, tranzitív, stb.). Ezek olyan tudás-leírások, amelyek a következtetés végrehajtásához szükséges meta információkat is tartalmazzák, és megfelelő eszköz, pl. következtető gép segítségével olyan adatok is kinyerhetőek ezekből a gráfokból, amelyek explicit módon nincsenek leírva, de implicit módon ki lehet következtetni őket. Az ilyen leírásokat ontológiáknak nevezzük.\nPéldául ha a \u0026lt;foaf:knows\u0026gt; kapcsolatról tudjuk, hogy az reflexív, akkor elegendő azt kijelenteni, hogy\n\u0026lt;starwars:Luke_Skywalker\u0026gt; \u0026lt;foaf:knows\u0026gt; \u0026lt;starwars:Leia_Organa\u0026gt; . Megfelelő séma alkalmazása esetén, ebből a kijelentésből, a logika szabályai alapján, kikövetkeztethető, hogy az alábbi állítás is igaz:\n\u0026lt;starwars:Leia_Organa\u0026gt; \u0026lt;foaf:knows\u0026gt; \u0026lt;starwars:Luke_Skywalker\u0026gt; .  Kapcsolódó oldalak:   Namespace-ek és szótárak   "});index.add({'id':12,'href':'/cayley-cookbook/docs/basic-concepts/rdf-graphs/','title':"Rdf Gráfok",'section':"Alapfogalmak",'content':"Rdf Gráfok #  "});index.add({'id':13,'href':'/cayley-cookbook/docs/cayley-as-package/transactions/','title':"Tranzakciók",'section':"Cayley mint Package",'content':"Tranzakciók #   Kapcsolódó oldalak: "});index.add({'id':14,'href':'/cayley-cookbook/docs/cayley-as-package/queries/','title':"Lekérdezések",'section':"Cayley mint Package",'content':"Lekérdezések #  Futtassuk a programot: \ncd schema go run find_bookmarks_by_tags.go yamlImpex.go store.go bookmarks.go A program kimenete:\nAz eredmények megjelenítése Results of finding any of `nosql` or `gremlin` tags: - \u0026#34;Ontotext GraphDB\u0026#34; [graphdb nosql knowledge-graph linked-data semantic-web rdf] https://ontotext.com/products/graphdb/ - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery Results of finding every tags of `cayley` or `gremlin`: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery    "});index.add({'id':15,'href':'/cayley-cookbook/docs/cayley-as-package/schemas/','title':"Sémák",'section':"Cayley mint Package",'content':"Sémák #  Ez a fejezet arra mutat példát, hogyan lehet egyszerű vagy összetett objektumokat, azok tulajdonságait quad-okká alakítani, és feltölteni a store-ba, az adatstruktúra deklarációjában elhelyezett annotációk segítségével. Továbbá hogyan lehet a store-ból, az eredmény listákból egyszerűen összeszedni az objektumok property-jeit, és objektumként visszakapni az eredményeket.\nEzzel a módszerrel jelentősen egyszerűbb az összetett adatoszerkezetek store-ba való feltöltése és lekérdezése, nem kell saját implementációt készíteni arra például, hogy egy adott Blank Node-dal, vagy IRI-vel azonosított objektum minden egyes tulajdonság-értékét egyenként szedegessük össze.\nStore létrehozása #  A példákban egyszerű, in-memory store-t fogunk használni, aminek a megnyitását a store.go file-banimplementált initStore() funkció végzi el.\nA store.go megjelenítése package main import ( \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;log\u0026#34; ) // Create a mem-store for testing func initStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } return store }    Teszt adatok #  A bookmarks.yml file YAML formátumban reprezentált teszt adatokat tartalmaz. Könyvjelzők listája található benne.\nEzeket a könyvjelzőket fogjuk feltölteni, és lekérdezni a séma annotációk segítségével.\nA bookmarks.yml megjelenítése - id: 9493efb9-be9a-4435-9b5d-f605fc9cddaa title: Gremlin\u0026#39;s Graph Traversal Machinery content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [gremlin, cayley, tinkerprop, gizmo, presentation, graph-db, query-language] urls: [\u0026#39;https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery\u0026#39;] - id: d6481271-d42d-487c-bec9-733ff383e029 title: Ontotext GraphDB content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [graphdb, nosql, knowledge-graph, linked-data, semantic-web, rdf] urls: [\u0026#39;https://ontotext.com/products/graphdb/\u0026#39;] - id: 058d41d5-6830-432b-8ebb-5733f8a2575b title: \u0026#39;Graphs and neural networks: Reading node properties\u0026#39; content: \u0026#34;\u0026#34; author: David Mack published: \u0026#34;\u0026#34; tags: [octavian-ai, graphs, neural-network, nlu, digital-assistant, dbms, brainputer, knowledge-graphs, graph-databases] urls: [\u0026#39;https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb\u0026#39;] - id: 324bacb5-8709-42b9-b38b-93755c48ef19 title: Towards building the next generation database query engine content: \u0026#34;\u0026#34; author: David Mack published: Nov 12, 2018 tags: [octavian-ai, graphs, neural-network, nlu, digital-assistant, dbms, brainputer, knowledge-graphs, graph-databases] urls: [\u0026#39;https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3\u0026#39;] - id: e0af0cdc-1795-482d-986e-96b08cc530f9 title: extracting-knowledge-from-knowledge-graphs content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [brainputer, pythorch, knowlendge-graph] urls: [\u0026#39;https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0\u0026#39;] - id: 2e75fc6a-148f-4016-a178-2a53a67e06c8 title: Platypus content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [knowledge-graph, wikidata, cognition, cui, platypus] urls: [\u0026#39;https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service\u0026#39;, \u0026#39;https://www.wikidata.org/wiki/Wikidata:Main_Page\u0026#39;, \u0026#39;https://hal.archives-ouvertes.fr/hal-01730479/document\u0026#39;] - id: 46721a5a-0eda-48f4-b190-b1c2544146a4 title: Grakn.AI - learn content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [grakn.ai, tutorials, blog, ai, inference-engine, knowledge-graph] urls: [\u0026#39;https://blog.grakn.ai/learn/home\u0026#39;] - id: 418b7162-fc1e-4dda-a6a5-80b9d4558f47 title: \u0026#39;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#39; content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [kagnet, cognitive-computating, python, graphs, networks, knowledge-graph, tools, commonsense, reasoning] urls: [\u0026#39;https://github.com/INK-USC/KagNet\u0026#39;] - id: a0b1b538-56e8-4fa9-a10b-be7c21ea2f90 title: Knowledge extraction from unstructured texts content: \u0026#34;\u0026#34; author: Heuritech published: \u0026#34;\u0026#34; tags: [lstm, knowledge-graph, text-extraction, konwledge-extraction, heuritech, semantics, universal-schema, triplet-extraction, word2vec] urls: [\u0026#39;https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f\u0026#39;] - id: 0b82f944-3f8c-4206-953e-a0d2d256dd60 title: Deep Learning with Knowledge Graphs content: \u0026#34;\u0026#34; author: Andrew Jefferson published: \u0026#34;\u0026#34; tags: [octavian, deep-neural-network, knowledge-graph, machine-learning, macgraph, brainputer] urls: [\u0026#39;https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a\u0026#39;] - id: e0d790fd-03de-4522-9ebc-3b931db52288 title: MacGraph content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [octavian, deep-neural-network, knowledge-graph, machine-learning, macgraph, brainputer, github, repository] urls: [\u0026#39;https://github.com/Octavian-ai/mac-graph\u0026#39;] - id: 17217149-1274-4ea4-a5f2-9bd48e6003c5 title: octavian.ai content: | We research new approaches to machine reasoning and graph-based learning. We\u0026#39;re working to build machines that can answer useful questions, using neural reasoning and knowledge graphs. We write articles, give talks and host workshops about our work. We\u0026#39;re an open-source research organization and welcome you to join us and contribute. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [octavian, machine-learning, open-source, research, graph, knowledge-graph, macgraph, brainputer] urls: [\u0026#39;https://www.octavian.ai/\u0026#39;] - id: 955d0202-d259-46c7-b71b-eb2434da2058 title: Build your own Knowledge Graph From unstructured dark data to valuable business insights content: \u0026#34;\u0026#34; author: Ignaz Wanders published: \u0026#34;\u0026#34; tags: [knowledge-graph, ai, machine-learning, ml, neo4j] urls: [\u0026#39;https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f\u0026#39;] - id: b34b66d4-81d2-4449-a049-4cb29fdc8f75 title: Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph. content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [knowledge-graph, kg, ai, graphs, facebook, pytorch, biggraph] urls: [\u0026#39;https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0\u0026#39;] - id: af631947-2a60-4ce6-a1a9-0b7ab88b9cfb title: Deep Learning with Knowledge Graphs content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [deep-learning, ml, machine-learning, knowledge-graph, ai] urls: [\u0026#39;https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a\u0026#39;] - id: f020ade1-4824-4c47-95c4-527c49fe2406 title: Knowledge Graphs in Natural Language Processing @ ACL 2020 content: State of the Art Mid 2020 author: Michael Galkin published: Jul 10, 2020 tags: [ai, kg, knowledge-graphs, nlp, acl] urls: [\u0026#39;https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1\u0026#39;] - id: a45c3713-89a4-44eb-947b-d0720d8ff9f4 title: Blog-Rolling-with-BrightstarDB-Express-and-Node-js content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [brightstardb, rdf, triple-store, nodejs, .net, database] urls: [\u0026#39;https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#39;, \u0026#39;http://brightstardb.com/\u0026#39;] - id: fba5c188-4c20-4cc3-aa99-720662d58ab8 title: FOAF Vocabulary Specification 0.99 content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [foaf, vocabulary, rdf] urls: [\u0026#39;http://xmlns.com/foaf/spec/\u0026#39;] - id: 8193a8a4-ae32-4867-924b-ecc9b856cad3 title: SuperMemo Website content: | SuperMemo is a program that keeps track of discrete bits of information you\u0026#39;ve learned and want to retain. SuperMemo tracks this so-called forgetting curve and reminds you to rehearse your knowledge when your chance of recalling it has dropped to, say, 90 percent. When you first learn a new vocabulary word, your chance of recalling it will drop quickly. But after SuperMemo reminds you of the word, the rate of forgetting levels out. The program tracks this new decline and waits longer to quiz you the next time. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [memory, learning, wozniak, brainputer, supermemo] urls: [\u0026#39;https://www.supermemo.com/en/archives1990-2015/articles/devour\u0026#39;] - id: 1d96dd4d-c30e-45a7-8f44-38dfb9a697f2 title: Gellish.net content: Gellish is a standard language, methodology and tools for expressing information in a computer interpretable and system independent way. It enables exchange and integration of data among systems of multiple parties without the need for data conversions. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [dictionary, gellish.net, gellish, nlp, cognitive-computing, electronic-dictionary, open-source, semantic-web, brainputer, robotics] urls: [\u0026#39;https://www.gellish.net/\u0026#39;] - id: bdd898dc-76de-4a41-86b1-8757aff5fe6c title: Semantic Web and Model-Driven Engineering content: Too theoretical author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [architecture, system-design, ddd, domain-driven-design, soo-poc, semantic-web] urls: [\u0026#39;http://www.allitebooks.org/semantic-web-and-model-driven-engineering/\u0026#39;] - id: 1deb716d-4ca8-4834-a771-7c68e8844067 title: MRD, Machine Readable dictionary content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [mrd, dictionary, nlp, cognitive-computing] urls: [\u0026#39;https://en.wikipedia.org/wiki/Machine-readable_dictionary\u0026#39;] - id: 9493efb9-be9a-4435-9b5d-f605fc9cddaa title: Gremlin\u0026#39;s Graph Traversal Machinery content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [gremlin, cayley, tinkerprop, gizmo, presentation, graph-db, query-language] urls: [\u0026#39;https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery\u0026#39;]    Az adatok file-ból történő beolvasására a yamlImpex.go-ban található ReadFromYaml() funkciót használjuk.\nA yamlImpex.go két függvény tartalmaz:\n A ReadFromYaml() az adatok YAML file-ból történő beolvasását végzi el, a SaveToYaml() a YAML formátumba történő kiírását teszi lehetővé.  A yamlImpex.go megjelenítése package main import ( \u0026#34;gopkg.in/yaml.v2\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;log\u0026#34; path \u0026#34;path/filepath\u0026#34; ) // Read YAML file and unmarshal its content into the `dst` data structure, // using the `yaml` annotation of the structs. func ReadFromYaml(yamlPath string, dst interface{}) error { absPath, err := path.Abs(yamlPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } buf, err := ioutil.ReadFile(absPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } err = yaml.Unmarshal([]byte(buf), dst) if err != nil { log.Printf(\u0026#34;YAML unmarshal error: %v\u0026#34;, err) return err } return nil } // Marshal the content from the `dst` data structure, and savel into a YAML file // using the `yaml` annotation of the structs. func SaveToYaml(yamlPath string, src interface{}) error { buf, err := yaml.Marshal(src) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } absPath, err := path.Abs(yamlPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } return ioutil.WriteFile(absPath, buf, 0644) }    Sémák definiálása #  A könyvjelző objektumok struktúráját, valamint a séma definícióját, az importáló és exportáló műveleteket mind a bookmarks.go file tartalmazza.\nA bookmarks.go megjelenítése package main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/cayley/graph\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; \u0026#34;log\u0026#34; ) type Bookmarks []Bookmark type Bookmark struct { ID quad.IRI `yaml:\u0026#34;id\u0026#34; quad:\u0026#34;id\u0026#34;` Title string `yaml:\u0026#34;title\u0026#34; quad:\u0026#34;title\u0026#34;` Content string `yaml:\u0026#34;content\u0026#34; quad:\u0026#34;content,optional\u0026#34;` Author string `yaml:\u0026#34;author\u0026#34; quad:\u0026#34;author,optional\u0026#34;` Published string `yaml:\u0026#34;published\u0026#34; quad:\u0026#34;published,optional\u0026#34;` Tags []string `yaml:\u0026#34;tags,flow\u0026#34; quad:\u0026#34;tags\u0026#34;` Urls []string `yaml:\u0026#34;urls,flow\u0026#34; quad:\u0026#34;urls\u0026#34;` } type BookmarkShort struct { ID quad.IRI `yaml:\u0026#34;id\u0026#34; quad:\u0026#34;id\u0026#34;` Title string `yaml:\u0026#34;title\u0026#34; quad:\u0026#34;title\u0026#34;` Urls []string `yaml:\u0026#34;urls,flow\u0026#34; quad:\u0026#34;urls\u0026#34;` } func init() { schema.RegisterType(\u0026#34;Bookmark\u0026#34;, Bookmark{}) schema.RegisterType(\u0026#34;BookmarkShort\u0026#34;, BookmarkShort{}) } func Import(store *cayley.Handle, dbPath string) { var bm Bookmarks ReadFromYaml(dbPath, \u0026amp;bm) qw := graph.NewWriter(store) defer qw.Close() // don\u0026#39;t forget to close a writer; it has some internal buffering \tfor _, b := range bm { _, err := schema.WriteAsQuads(qw, b) if err != nil { log.Fatalf(\u0026#34;%v\u0026#34;, err) } } } func GetAllShortBookmarks(store *cayley.Handle) (Bookmarks, error) { var bms Bookmarks //p := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)) \tp := cayley.StartPath(store, quad.IRI(\u0026#34;Bookmark\u0026#34;)).In(quad.IRI(\u0026#34;rdf:type\u0026#34;)) schemaConfig := schema.NewConfig() err := p.Iterate(context.Background()).EachValuePair(nil, func(ref graph.Ref, value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) //log.Printf(\u0026#34;%v, %v, %v\\n\u0026#34;, reflect.TypeOf(ref), ref.Key(), b) \tbms = append(bms, b) }) if err != nil { log.Printf(\u0026#34;%v\u0026#34;, err) return nil, err } return bms, nil } func GetAllBookmarks(store *cayley.Handle) (Bookmarks, error) { var bms Bookmarks p := cayley.StartPath(store, quad.IRI(\u0026#34;Bookmark\u0026#34;)).In(quad.IRI(\u0026#34;rdf:type\u0026#34;)) schemaConfig := schema.NewConfig() err := p.Iterate(context.Background()).EachValuePair(nil, func(ref graph.Ref, value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) if err != nil { log.Printf(\u0026#34;%v\u0026#34;, err) return nil, err } return bms, nil } func FindBookmarksByAnyTag(store *cayley.Handle, tags []quad.Value) (Bookmarks, error) { schemaConfig := schema.NewConfig() var bms Bookmarks p := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)).Has(quad.IRI(\u0026#34;tags\u0026#34;), tags...) err := p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) return bms, err } func FindBookmarksByEveryTag(store *cayley.Handle, tags []quad.Value) (Bookmarks, error) { schemaConfig := schema.NewConfig() var bms Bookmarks bookmarksMorph := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)) p := bookmarksMorph for _, t := range tags { p = cayley.StartPath(store).Follow(p).Has(quad.IRI(\u0026#34;tags\u0026#34;), t) } err := p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) return bms, err }    A forráskódban látható, hogy kétféle struktúra van definiálva:\n a Bookmark a teljes változat, a BookmarkShort pedig egy rövidített változat.  A struct-ban vannak elhelyezve a yaml és a quad cimkével azonosított annotációk, tehát egyszerre minkét típusú átalakításhoz megadhatjuk az instrukciókat.\nAdat importálás séma alapján #  Az adatokat először beolvassuk egy []Bookmarks típusú változóba, majd abból feltöltjük a store-ba. A feltöltést a \u0026quot;github.com/cayleygraph/cayley/schema\u0026quot; package-ben definiált, schema.WriteAsQuads() funkcióval végezzük el, ahogyan az az import_bookmarks_with_schema.go file-ban látható.\nAz import_bookmarks_with_schema.go megjelenítése package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; uuid \u0026#34;github.com/satori/go.uuid\u0026#34; ) const bookmarksFixtures = \u0026#34;./bookmarks.yml\u0026#34; func init() { schema.GenerateID = func(o interface{}) quad.Value { switch o.(type) { case Bookmark: return quad.IRI(o.(Bookmark).ID) default: return quad.IRI(uuid.NewV4().String()) } } } func main() { ImportBookmarksWithSchema() } func ImportBookmarksWithSchema() { // Create an in-memory store \tstore := initStore() // Load Bookmarks from YAML and upload into the mem-store \tImport(store, bookmarksFixtures) // Check if Bookmarks have been uploaded \tstats, err := store.Stats(context.Background(), true) if err != nil { panic(err) } else { fmt.Printf(\u0026#34;Successfully imported bookmarks into the mem-store as %d nodes and %d quads.\\n\u0026#34;, stats.Nodes.Size, stats.Quads.Size) } }    Futtassuk a programot: \ncd schema go run impex_bookmarks_with_schema.go yamlImpex.go store.go bookmarks.go A program kimenete:\nSuccessfully imported bookmarks into the mem-store as 176 nodes and 245 quads. Adat exportálás séma alapján #  Az exportálás ugyanúgy kezdődik, mint az importálás. Először beolvassuk az adatokat a YAMl file-ból, majd feltöltjük a store-ba.\nEzt követően lekérdezzük az össze Bookmarkot a store-ból, kétféle módon:\n A GetAllBookmarks() funció a teljes részletességgel fogja lekérdezni az adatokat, a GetAllShortBookmarks() pedig az egyszerűsített változatban.  Mindkét funkció a bookmarks.go file-ban van implementálva, és a schemaConfig.LoadTo() metódust használja a tulajdonságok összegyűjtésére. Ehhez előzőleg létre kell hoznunk egy schemaConfig objektumot, a schema.NewConfig() funció segítségével.\nAz impex_bookmarks_with_schema.go megjelenítése package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; uuid \u0026#34;github.com/satori/go.uuid\u0026#34; ) const bookmarksFixtures = \u0026#34;./bookmarks.yml\u0026#34; func init() { schema.GenerateID = func(o interface{}) quad.Value { switch o.(type) { case Bookmark: return quad.IRI(o.(Bookmark).ID) default: return quad.IRI(uuid.NewV4().String()) } } } func main() { // Create an in-memory store \tstore := initStore() // Import bookmarks data from yaml using the `Bookmark` schema \tImportBookmarksWithSchema(store) // Find all Bookmarks, and convert to and array of object using `Bookmark` schema. \tbookmarks, _ := GetAllBookmarks(store) printBookmarks(bookmarks) // Find all Bookmarks, and convert to and array of object using `ShortBookmark` schema. \tshortBookmarks, _ := GetAllShortBookmarks(store) printShortBookmarks(shortBookmarks) } func ImportBookmarksWithSchema(store *cayley.Handle) { // Load Bookmarks from YAML and upload into the mem-store \tImport(store, bookmarksFixtures) // Check if Bookmarks have been uploaded \t_, err := store.Stats(context.Background(), true) if err != nil { panic(err) } else { fmt.Printf(\u0026#34;Successfully imported bookmarks into the mem-store.\\n\u0026#34;) } } func printBookmarks(bookmarks Bookmarks) { fmt.Println(\u0026#34;\\nFull Bookmarks:\u0026#34;) for _, bookmark := range bookmarks { if bookmark.Author == \u0026#34;\u0026#34; { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, bookmark.Title) } else { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34; by %s\\n\\n\u0026#34;, bookmark.Title, bookmark.Author) } fmt.Printf(\u0026#34; %s\\n\\n\u0026#34;, bookmark.Urls[0]) } } func printShortBookmarks(bookmarks Bookmarks) { fmt.Println(\u0026#34;\\nShort Bookmarks:\u0026#34;) for _, bookmark := range bookmarks { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, bookmark.Title) fmt.Printf(\u0026#34; %s\\n\\n\u0026#34;, bookmark.Urls[0]) } }    Futtassuk a programot: \ncd schema go run impex_bookmarks_with_schema.go yamlImpex.go store.go bookmarks.go A lekérdezésekeket követően a program kiírja az eredményeket.\nA program kimenete:\nAz eredmények megjelenítése Successfully imported bookmarks into the mem-store. Full Bookmarks: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery - \u0026#34;Ontotext GraphDB\u0026#34; https://ontotext.com/products/graphdb/ - \u0026#34;Graphs and neural networks: Reading node properties\u0026#34; by David Mack https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb - \u0026#34;Towards building the next generation database query engine\u0026#34; by David Mack https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3 - \u0026#34;extracting-knowledge-from-knowledge-graphs\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Platypus\u0026#34; https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service - \u0026#34;Grakn.AI - learn\u0026#34; https://blog.grakn.ai/learn/home - \u0026#34;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#34; https://github.com/INK-USC/KagNet - \u0026#34;Knowledge extraction from unstructured texts\u0026#34; by Heuritech https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; by Andrew Jefferson https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;MacGraph\u0026#34; https://github.com/Octavian-ai/mac-graph - \u0026#34;octavian.ai\u0026#34; https://www.octavian.ai/ - \u0026#34;Build your own Knowledge Graph From unstructured dark data to valuable business insights\u0026#34; by Ignaz Wanders https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f - \u0026#34;Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph.\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;Knowledge Graphs in Natural Language Processing @ ACL 2020\u0026#34; by Michael Galkin https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1 - \u0026#34;Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#34; https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js - \u0026#34;FOAF Vocabulary Specification 0.99\u0026#34; http://xmlns.com/foaf/spec/ - \u0026#34;SuperMemo Website\u0026#34; https://www.supermemo.com/en/archives1990-2015/articles/devour - \u0026#34;Gellish.net\u0026#34; https://www.gellish.net/ - \u0026#34;Semantic Web and Model-Driven Engineering\u0026#34; http://www.allitebooks.org/semantic-web-and-model-driven-engineering/ - \u0026#34;MRD, Machine Readable dictionary\u0026#34; https://en.wikipedia.org/wiki/Machine-readable_dictionary Short Bookmarks: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery - \u0026#34;Ontotext GraphDB\u0026#34; https://ontotext.com/products/graphdb/ - \u0026#34;Graphs and neural networks: Reading node properties\u0026#34; https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb - \u0026#34;Towards building the next generation database query engine\u0026#34; https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3 - \u0026#34;extracting-knowledge-from-knowledge-graphs\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Platypus\u0026#34; https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service - \u0026#34;Grakn.AI - learn\u0026#34; https://blog.grakn.ai/learn/home - \u0026#34;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#34; https://github.com/INK-USC/KagNet - \u0026#34;Knowledge extraction from unstructured texts\u0026#34; https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;MacGraph\u0026#34; https://github.com/Octavian-ai/mac-graph - \u0026#34;octavian.ai\u0026#34; https://www.octavian.ai/ - \u0026#34;Build your own Knowledge Graph From unstructured dark data to valuable business insights\u0026#34; https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f - \u0026#34;Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph.\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;Knowledge Graphs in Natural Language Processing @ ACL 2020\u0026#34; https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1 - \u0026#34;Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#34; https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js - \u0026#34;FOAF Vocabulary Specification 0.99\u0026#34; http://xmlns.com/foaf/spec/ - \u0026#34;SuperMemo Website\u0026#34; https://www.supermemo.com/en/archives1990-2015/articles/devour - \u0026#34;Gellish.net\u0026#34; https://www.gellish.net/ - \u0026#34;Semantic Web and Model-Driven Engineering\u0026#34; http://www.allitebooks.org/semantic-web-and-model-driven-engineering/ - \u0026#34;MRD, Machine Readable dictionary\u0026#34; https://en.wikipedia.org/wiki/Machine-readable_dictionary     Kapcsolódó oldalak: "});})();