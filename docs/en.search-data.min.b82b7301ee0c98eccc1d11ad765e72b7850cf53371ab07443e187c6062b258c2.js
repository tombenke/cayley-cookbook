'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/cayley-cookbook/docs/about/','title':"About",'section':"Docs",'content':"About #  TODO\n"});index.add({'id':1,'href':'/cayley-cookbook/docs/basic-concepts/','title':"Basic Concepts",'section':"Docs",'content':"Basic Concepts #  This Chapter introduces some fundamental concepts required to work with Knowledge Graphs and especially with Cayley.\n"});index.add({'id':2,'href':'/cayley-cookbook/docs/basic-concepts/graph-based-data-model/','title':"Graph Based Data Model",'section':"Basic Concepts",'content':"Graph Based Data Model #  "});index.add({'id':3,'href':'/cayley-cookbook/docs/cayley-as-package/vocabularies/','title':"Vocabularies",'section':"Cayley as Package",'content':"Namespaces and Vocabularies #  Namespaces #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add some predefined vocabularies \t_ \u0026#34;github.com/cayleygraph/quad/voc/schema\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/xsd\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; ) func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } package main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add built-in vocabulary \t_ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; // Add own vocabulary \t_ \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func init() { // Register a new namespace with prefix  voc.RegisterPrefix(`acc:`, `http://mycompany.com/voc/accounting#`) } func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } Vocabularies #  // Package foaf contains constants of the FOAF Concepts Vocabulary (RDF) package foaf import \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; func init() { voc.RegisterPrefix(Prefix, NS) } const ( NS = `http://xmlns.com/foaf/0.1/#` Prefix = `foaf:` ) const ( // Core  // An agent (eg. person, group, software or physical artifact).  Agent = Prefix + `Agent` // A person.  Person = Prefix + `Person` // A name for some thing.  Name = Prefix + `name` // Title (Mr, Mrs, Ms, Dr. etc)  Title = Prefix + `title` // An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one\u0026#39;s photo on a homepage).  Img = Prefix + `img` // A thing depicted in this representation.  Depiction = Prefix + `depiction` Depicts = Prefix + `depicts` // The family name of some person.  FamilyName = Prefix + `familyName` // The first name of some person.  GivenName = Prefix + `givenName` // The gender of this Agent (typically but not necessarily \u0026#39;male\u0026#39; or \u0026#39;female\u0026#39;).  Gender = Prefix + `gender` // A person known by this person (indicating some level of reciprocated interaction between the parties).  Knows = Prefix + `knows` // A location that something is based near, for some broadly human notion of near.  BasedNear = Prefix + `based_near` // The age in years of some agent.  Age = Prefix + `age` // The birthday of this Agent, represented in mm-dd string form, eg. \u0026#39;12-31\u0026#39;.  Birthday = Prefix + `birthday` // Something that was made by this agent.  Made = Prefix + `made` PrimaryTopic = Prefix + `primaryTopic (primaryTopicOf)` // A project (a collective endeavour of some kind).  Project = Prefix + `Project` // An organization.  Organization = Prefix + `Organization` // A class of Agents.  Group = Prefix + `Group` // A string expressing what the user is happy for the general public (normally) to know about their current activity.  Status = Prefix + `status` // Indicates a member of a Group  Member = Prefix + `member` // A document.  Document = Prefix + `Document` // An image.  Image = Prefix + `Image` // SocialWeb  // A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).  Nick = Prefix + `nick` // A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox.  Mbox = Prefix + `mbox` // A homepage for some thing.  Homepage = Prefix + `homepage` // A weblog of some thing (whether person, group, company etc.).  Weblog = Prefix + `weblog` // An OpenID for an Agent.  Openid = Prefix + `openid` // A jabber ID for something.  JabberID = Prefix + `jabberID` // sha1sum of a personal mailbox URI name - The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.  MboxSha1sum = Prefix + `mbox_sha1sum` // A page about a topic of interest to this person.  Interest = Prefix + `interest` // A thing of interest to this person.  TopicInterest = Prefix + `topic_interest` // A topic of some page or document.  Topic = Prefix + `topic` // A workplace homepage of some person; the homepage of an organization they work for.  WorkplaceHomepage = Prefix + `workplaceHomepage` // A work info homepage of some person; a page about their work for some organization.  WorkInfoHomepage = Prefix + `workInfoHomepage` // A homepage of a school attended by the person.  SchoolHomepage = Prefix + `schoolHomepage` // A link to the publications of this person.  Publications = Prefix + `publications` // A current project this person works on.  CurrentProject = Prefix + `currentProject` // A project this person has previously worked on.  PastProject = Prefix + `pastProject` // Indicates an account held by this agent.  Account = Prefix + `account` // An online account  OnlineAccount = Prefix + `OnlineAccount` // Indicates the name (identifier) associated with this online account.  AccountName = Prefix + `accountName` // Indicates a homepage of the service provide for this online account.  AccountServiceHomepage = Prefix + `accountServiceHomepage` // A personal profile RDF document  PersonalProfileDocument = Prefix + `PersonalProfileDocument` // A tipjar document for this agent, describing means for payment and reward.  Tipjar = Prefix + `tipjar` // A sha1sum hash, in hex.  Sha1 = Prefix + `sha1` // A derived thumbnail image.  Thumbnail = Prefix + `thumbnail` // A logo representing some thing.  Logo = Prefix + `logo` ) "});index.add({'id':4,'href':'/cayley-cookbook/docs/cayley-overview/','title':"Cayley Overview",'section':"Docs",'content':"Cayley Overview #    Cayley Components   "});index.add({'id':5,'href':'/cayley-cookbook/docs/cayley-as-package/quads/','title':"Quads",'section':"Cayley as Package",'content':"Quads #  \nSee the full list of source code package main import ( \u0026#34;fmt\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func main() { // Create Quads about some people using Blank Nodes as references  quadsWithBNodes := makeQuadsWithBNodes() // Take a look at the resulted quads  printQuads(quadsWithBNodes) // Create Quads about some people using IRIs as references  quadsWithIRIs := makeQuadsWithIRIs() // Take a look at the resulted quads  printQuads(quadsWithIRIs) } func makeQuadsWithBNodes() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Generate a Blank Node to represent the person internally  // You can create a sequence of internal IDs for the Blank Nodes  var seq quad.Sequence luke := seq.Next() // Alternatively create a Blank Node with a random internal ID  // luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) leia := seq.Next() quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func makeQuadsWithIRIs() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Create IRIs to represent the person globally, and universally  luke := quad.IRI(\u0026#34;https://swapi.co/resource/human/luke_skywalker\u0026#34;) // Alternatively create a Blank Node with a random internal ID  // luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) leia := quad.IRI(\u0026#34;https://swapi.co/resource/human/leia_organa\u0026#34;) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func printQuads(quads []quad.Quad) { fmt.Println(\u0026#34;The details of the quads created:\u0026#34;) for i, q := range quads { fmt.Printf(\u0026#34;quads[%d]:\\n\u0026#34;, i) fmt.Printf(\u0026#34; subject: %s %v\\n\u0026#34;, q.Get(quad.Subject), reflect.TypeOf(q.Get(quad.Subject))) fmt.Printf(\u0026#34; predicate: %s %v\\n\u0026#34;, q.Get(quad.Predicate), reflect.TypeOf(q.Get(quad.Predicate))) fmt.Printf(\u0026#34; object: %s %v\\n\u0026#34;, q.Get(quad.Object), reflect.TypeOf(q.Get(quad.Object))) fmt.Printf(\u0026#34; label: %s %v\\n\\n\u0026#34;, q.Get(quad.Label), reflect.TypeOf(q.Get(quad.Label))) } fmt.Println(\u0026#34;The quads in NQuad representation:\u0026#34;) for _, q := range quads { fmt.Printf(\u0026#34;%s\\n\u0026#34;, q.NQuad()) } }    "});index.add({'id':6,'href':'/cayley-cookbook/docs/basic-concepts/resources/','title':"Resources",'section':"Basic Concepts",'content':"Resources #  "});index.add({'id':7,'href':'/cayley-cookbook/docs/cayley-as-package/','title':"Cayley as Package",'section':"Docs",'content':"Cayley as Package #  This chapter demonstrates how can cayley be used as a Golang package.\n"});index.add({'id':8,'href':'/cayley-cookbook/docs/basic-concepts/statements/','title':"Statements",'section':"Basic Concepts",'content':"Statements #  "});index.add({'id':9,'href':'/cayley-cookbook/docs/cayley-as-package/stores/','title':"Stores",'section':"Cayley as Package",'content':"Stores #  Test data #  package main import ( \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook/voc/foaf\u0026#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally  luke := quad.RandomBlankNode() leia := quad.IRI(\u0026#34;starwars:leia_organa\u0026#34;) //quad.RandomBlankNode()  // Create Quads about to export  label := \u0026#34;people\u0026#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Organa\u0026#34;, label)) return quads } Nodes in the Store #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllNodes(store) } func printAllNodes(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.NodesAllIterator() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it)) for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Println() } } The results:\nMemStoreAll *memstore.AllIterator Ref: 1 memstore.bnode Key: 1 memstore.bnode Value: _:n242152451495997854 quad.BNode Ref: 2 memstore.bnode Key: 2 memstore.bnode Value: \u0026lt;rdf:type\u0026gt; quad.IRI Ref: 3 memstore.bnode Key: 3 memstore.bnode Value: \u0026lt;foaf:Person\u0026gt; quad.IRI Ref: 4 memstore.bnode Key: 4 memstore.bnode Value: \u0026#34;people\u0026#34; quad.String Ref: 6 memstore.bnode Key: 6 memstore.bnode Value: \u0026lt;foaf:givenName\u0026gt; quad.IRI Ref: 7 memstore.bnode Key: 7 memstore.bnode Value: \u0026#34;Luke\u0026#34; quad.String Ref: 9 memstore.bnode Key: 9 memstore.bnode Value: \u0026lt;foaf:familyName\u0026gt; quad.IRI Ref: 10 memstore.bnode Key: 10 memstore.bnode Value: \u0026#34;Skywalker\u0026#34; quad.String Ref: 12 memstore.bnode Key: 12 memstore.bnode Value: \u0026lt;foaf:age\u0026gt; quad.IRI Ref: 13 memstore.bnode Key: 13 memstore.bnode Value: \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Int Ref: 15 memstore.bnode Key: 15 memstore.bnode Value: \u0026lt;starwars:leia_organa\u0026gt; quad.IRI Ref: 17 memstore.bnode Key: 17 memstore.bnode Value: \u0026lt;foaf:knows\u0026gt; quad.IRI Ref: 19 memstore.bnode Key: 19 memstore.bnode Value: \u0026#34;Leia\u0026#34; quad.String Ref: 21 memstore.bnode Key: 21 memstore.bnode Value: \u0026#34;Organa\u0026#34; quad.String Quads in the Store #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllQuads(store) } func printAllQuads(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.QuadsAllIterator() //fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it))  for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) quad := store.Quad(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Printf(\u0026#34;Quad: %v %v\\n\u0026#34;, quad, reflect.TypeOf(quad)) fmt.Println() /* v := it.Result() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, v, reflect.TypeOf(v)) fmt.Printf(\u0026#34;%v\\n\u0026#34;, v.Key()) name := store.NameOf(v) fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, name, reflect.TypeOf(name)) q := store.Quad(v) fmt.Println(q) fmt.Println() */ } } The results:\nRef: {0xc00007c1c0} memstore.qprim Key: 5 int64 Value: _:memnode5 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007c3c0} memstore.qprim Key: 8 int64 Value: _:memnode8 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Luke\u0026#34; quad.Quad Ref: {0xc00007c500} memstore.qprim Key: 11 int64 Value: _:memnode11 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Skywalker\u0026#34; quad.Quad Ref: {0xc00007c640} memstore.qprim Key: 14 int64 Value: _:memnode14 quad.BNode Quad: _:n6272731111119989818 -- \u0026lt;foaf:age\u0026gt; -\u0026gt; \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Quad Ref: {0xc00007c740} memstore.qprim Key: 16 int64 Value: _:memnode16 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007c800} memstore.qprim Key: 18 int64 Value: _:memnode18 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:knows\u0026gt; -\u0026gt; _:n6272731111119989818 quad.Quad Ref: {0xc00007c900} memstore.qprim Key: 20 int64 Value: _:memnode20 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Leia\u0026#34; quad.Quad Ref: {0xc00007c9c0} memstore.qprim Key: 22 int64 Value: _:memnode22 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Organa\u0026#34; quad.Quad The internal representation of nodes and quads #    Internal Representation   "});index.add({'id':10,'href':'/cayley-cookbook/docs/cayley-as-package/crud-operations/','title':"Crud Operations",'section':"Cayley as Package",'content':"Crud Operations #  "});index.add({'id':11,'href':'/cayley-cookbook/docs/basic-concepts/vocabularies/','title':"Vocabularies",'section':"Basic Concepts",'content':"Vocabularies #  "});index.add({'id':12,'href':'/cayley-cookbook/docs/basic-concepts/rdf-graphs/','title':"Rdf Graphs",'section':"Basic Concepts",'content':"Rdf Graphs #  "});index.add({'id':13,'href':'/cayley-cookbook/docs/cayley-as-package/transactions/','title':"Transactions",'section':"Cayley as Package",'content':"Transactions #  "});index.add({'id':14,'href':'/cayley-cookbook/docs/cayley-as-package/queries/','title':"Queries",'section':"Cayley as Package",'content':"Queries #  "});index.add({'id':15,'href':'/cayley-cookbook/docs/cayley-as-package/schemas/','title':"Schemas",'section':"Cayley as Package",'content':"Schemas #  "});})();