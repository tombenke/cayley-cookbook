'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/cayley-cookbook/docs/about/','title':"About",'section':"Docs",'content':"About #  Nowadays, when we are talking about Artificial intelligence, we mostly think of Machine Learning, that is also called Statistical Learning. However we can achieve spectacular results via Machine Learning it has disadvantages too. It is quite cumbersome to analyze the results of learnings, and very difficult to reason for human beings.\nMachine Learning is only one possible approach to implement Artificial Intelligence. The early period of AI researches, in the 50s and 60s the symbolic approach was the main direction. Its advantage against the ML approach is that the results of learnings a possible to read and understand. The harvested knowledge, and the whole reasoning process can be described and managed via traditional programming tools. The so called Semantic Web technologies can be classified into this symbolic category.\nA big disadvantage of these symbolic approaches that it requires extremely big computational capacity, and resources in case we are willing to build up intelligence that tries to approximate the level of human intelligence. It is close to impossible to create and efficiently operate systems that reach this level.\nNevertheless, in order to create really intelligent system, that comparable to human intelligence, we have to rely on two fundamental capabilities:\n The capability of the system for both supervised and un-supervised learning, A technology, which makes possible the conversion of the knowledge internally represented in the \u0026ldquo;brain\u0026rdquo; of the artificial system into the symbolic space, to a representational format, that humans can understand and modify.  A Semantic Web, and the Graph Databases provide a very good basis for the symbolic representation and management of knowledge. The Google Knowledge-Graph can be classified here, which inspired the development of the Cayley system.\nThis cook-book applies a fundamentally practical approach to this topic.\nIt does not want to give a detailed, precise analysis of the above mentioned theories and technologies. It focuses exclusively on those basic terms that are inevitable to know to use Cayley .\nThe content is divided to the following main parts:\n The \u0026ldquo;Basic Concepts\u0026rdquo; chapter gives a brief introduction to the most important subjects, that are required to be able to use Cayley . The \u0026ldquo;Cayley overview\u0026rdquo; chapter helps you find your way among the components the Cayley \u0026ldquo;ecosystem\u0026rdquo; is build-upon. It also gives some examples about how to use these system components, and where can we find documentation to them. The \u0026ldquo;Working with Cayley\u0026rdquo; chapter is the most important part of the cook-book. it demonstrates with the usage of the Cayley system with examples, and source code, that you can run. Each section begins with the basics of the given topic, and follows towards the more advanced cases.  "});index.add({'id':1,'href':'/cayley-cookbook/docs/basic-concepts/','title':"Basic Concepts",'section':"Docs",'content':"This Chapter introduces some fundamental concepts required to work with Knowledge Graphs and especially with Cayley.\n"});index.add({'id':2,'href':'/cayley-cookbook/docs/working-with-cayley/stores/create-store/','title':"Create Store",'section':"Stores",'content':"Create Store #  Problem #  How can I create a store?\nIn-memory store creation #  package kbase import ( \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;log\u0026#34; ) // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } return store } "});index.add({'id':3,'href':'/cayley-cookbook/docs/working-with-cayley/queries/find_all_vertices/','title':"Find All Vertices",'section':"Queries",'content':"Find All Vertices #  Problem #  How can I list all the nodes (subjects, predicates and objects) of the graph?\nTest Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format \u0026lt;alice\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;dani\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;emily\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;fred\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;follows\u0026gt; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;status\u0026gt; . \u0026lt;emily\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; .    Gizmo Query #  g.V().All(); Results:\n{\u0026#34;id\u0026#34;:\u0026#34;alice\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;follows\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;bob\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;fred\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;status\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;cool_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;dani\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;charlie\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;greg\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;emily\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;predicates\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;are\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_person\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;smart_graph\u0026#34;} "});index.add({'id':4,'href':'/cayley-cookbook/docs/basic-concepts/graph-based-data-model/','title':"Graph Based Data Model",'section':"Basic Concepts",'content':"Graph Based Data Model #  When we build a knowledge-graph, then we build a conceptual model of a part of the real World.\nA conceptual model is a model of a subject area or area of knowledge, sometimes called a domain.\nA domain model typically represents:\n the primary entities (the things of the domain), the relationships among entities, the attributes and attribute values (sometimes called properties and property values) of the entities and the relationships, and sometimes rules that associate entities, relationships, and attributes (or all three) in more complicated ways.  The graph databases and semantic technologies can be very efficiently applied to solve problems, when we have to work with flexible, frequently changing, non-structured data models, and we have to analyze these data from different aspects. Therefore these technologies are very useful to describe and manage conceptual models.\nThe graphs are made of two basic elements:\n nodes, (or vertices). edges, that connect vertices.  We usually use graphs to represent knowledge. The nodes of the graphs are typically represent the things of the World, and the edges represent the associations among the things.\nThe edges are directed, and both the nodes and edges can have labels.\nthe Figure 1. shows a very simple graph, which contains two nodes, one with the \u0026ldquo;Luke\u0026rdquo; label, and another one with the label of \u0026ldquo;Leia\u0026rdquo;, moreover there is an edge between them, with the label of \u0026ldquo;knows\u0026rdquo;.\n  figure 1: A simple graph   Some graph databases allows us to give more than one labels to nodes and edges in the form of property-value maps. These kind of graphs are called property-graphs. in case of Cayley , our graphs will contain only one label per node and per edge.\n"});index.add({'id':5,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/list-namespaces/','title':"List Registered Namespaces",'section':"Namespaces and Vocabularies",'content':"List Registered Namespaces #  The following code fragment lists all the namespaces currently registered:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add some predefined vocabularies \t_ \u0026#34;github.com/cayleygraph/quad/voc/schema\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/xsd\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; _ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; ) func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;); for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full); } } \ncd namespaces go run list_namespaces.go` The results:\nRegistered namespaces: rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  schema: =\u0026gt; http://schema.org/  xsd: =\u0026gt; http://www.w3.org/2001/XMLSchema#  rdf: =\u0026gt; http://www.w3.org/1999/02/22-rdf-syntax-ns#  "});index.add({'id':6,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/','title':"Namespaces and Vocabularies",'section':"Working with Knowledge Graph",'content':"This section demonstrates the usage of namespaces and vocabularies.\n"});index.add({'id':7,'href':'/cayley-cookbook/docs/working-with-cayley/impex/quads/','title':"Quads export",'section':"Data import / export",'content':"Quads #  This code creates a set of quads, then exports them into several formats:\nSee the full list of source code package main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; \u0026#34;reflect\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func main() { // Create Quads about some people using Blank Nodes as references \tquadsWithBNodes := makeQuadsWithBNodes() // Take a look at the resulted quads \tprintQuads(quadsWithBNodes) // Create Quads about some people using IRIs as references \tquadsWithIRIs := makeQuadsWithIRIs() // Take a look at the resulted quads \tprintQuads(quadsWithIRIs) } func makeQuadsWithBNodes() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Generate a Blank Node to represent the person internally \t// You can create a sequence of internal IDs for the Blank Nodes \tvar seq quad.Sequence luke := seq.Next() // Alternatively create a Blank Node with a random internal ID \t// luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) leia := seq.Next() quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func makeQuadsWithIRIs() []quad.Quad { label := \u0026#34;people\u0026#34; quads := []quad.Quad{} // Create IRIs to represent the person globally, and universally \tluke := quad.IRI(\u0026#34;https://swapi.co/resource/human/luke_skywalker\u0026#34;) // Alternatively create a Blank Node with a random internal ID \t// luke := quad.RandomBlankNode()  quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Skywalker\u0026#34;, label)) leia := quad.IRI(\u0026#34;https://swapi.co/resource/human/leia_organa\u0026#34;) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Organa\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) return quads } func printQuads(quads []quad.Quad) { fmt.Println(\u0026#34;The details of the quads created:\u0026#34;) for i, q := range quads { fmt.Printf(\u0026#34;quads[%d]:\\n\u0026#34;, i) fmt.Printf(\u0026#34; subject: %s %v\\n\u0026#34;, q.Get(quad.Subject), reflect.TypeOf(q.Get(quad.Subject))) fmt.Printf(\u0026#34; predicate: %s %v\\n\u0026#34;, q.Get(quad.Predicate), reflect.TypeOf(q.Get(quad.Predicate))) fmt.Printf(\u0026#34; object: %s %v\\n\u0026#34;, q.Get(quad.Object), reflect.TypeOf(q.Get(quad.Object))) fmt.Printf(\u0026#34; label: %s %v\\n\\n\u0026#34;, q.Get(quad.Label), reflect.TypeOf(q.Get(quad.Label))) } fmt.Println(\u0026#34;The quads in NQuad representation:\u0026#34;) for _, q := range quads { fmt.Printf(\u0026#34;%s\\n\u0026#34;, q.NQuad()) } }    \ncd quad/writer go run export_nquads_to_stdout.go data The results:\nGraphviz digraph cayley_graph { \u0026quot;_:n3747198576259004371\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n3747198576259004371\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Luke\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n3747198576259004371\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Skywalker\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; \u0026quot;_:n3747198576259004371\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;23\\\u0026quot;^^\u0026lt;xsd:integer\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:age\u0026gt;\u0026quot; ]; \u0026quot;_:n8285458617337724806\u0026quot; -\u0026gt; \u0026quot;\u0026lt;foaf:Person\u0026gt;\u0026quot; [ label = \u0026quot;\u0026lt;rdf:type\u0026gt;\u0026quot; ]; \u0026quot;_:n8285458617337724806\u0026quot; -\u0026gt; \u0026quot;_:n3747198576259004371\u0026quot; [ label = \u0026quot;\u0026lt;foaf:knows\u0026gt;\u0026quot; ]; \u0026quot;_:n8285458617337724806\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Leia\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:givenName\u0026gt;\u0026quot; ]; \u0026quot;_:n8285458617337724806\u0026quot; -\u0026gt; \u0026quot;\\\u0026quot;Organa\\\u0026quot;\u0026quot; [ label = \u0026quot;\u0026lt;foaf:familyName\u0026gt;\u0026quot; ]; } GML Creator \u0026#34;Cayley\u0026#34; graph [ directed 1 node [ id 0 label \u0026#34;_:n3747198576259004371\u0026#34; ] node [ id 1 label \u0026#34;\u0026lt;foaf:Person\u0026gt;\u0026#34; ] edge [ source 0 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] node [ id 2 label \u0026#34;\u0026amp;quot;Luke\u0026amp;quot;\u0026#34; ] edge [ source 0 target 2 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 3 label \u0026#34;\u0026amp;quot;Skywalker\u0026amp;quot;\u0026#34; ] edge [ source 0 target 3 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] node [ id 4 label \u0026#34;\u0026amp;quot;23\u0026amp;quot;^^\u0026lt;xsd:integer\u0026gt;\u0026#34; ] edge [ source 0 target 4 label \u0026#34;\u0026lt;foaf:age\u0026gt;\u0026#34; ] node [ id 5 label \u0026#34;_:n8285458617337724806\u0026#34; ] edge [ source 5 target 1 label \u0026#34;\u0026lt;rdf:type\u0026gt;\u0026#34; ] edge [ source 5 target 0 label \u0026#34;\u0026lt;foaf:knows\u0026gt;\u0026#34; ] node [ id 6 label \u0026#34;\u0026amp;quot;Leia\u0026amp;quot;\u0026#34; ] edge [ source 5 target 6 label \u0026#34;\u0026lt;foaf:givenName\u0026gt;\u0026#34; ] node [ id 7 label \u0026#34;\u0026amp;quot;Organa\u0026amp;quot;\u0026#34; ] edge [ source 5 target 7 label \u0026#34;\u0026lt;foaf:familyName\u0026gt;\u0026#34; ] ] GraphML \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;graphml xmlns=\u0026#34;http://graphml.graphdrawing.org/xmlns\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd\u0026#34; xmlns:y=\u0026#34;http://www.yworks.com/xml/graphml\u0026#34;\u0026gt; \u0026lt;key id=\u0026#34;d0\u0026#34; for=\u0026#34;node\u0026#34; yfiles.type=\u0026#34;nodegraphics\u0026#34;/\u0026gt; \u0026lt;key id=\u0026#34;d1\u0026#34; for=\u0026#34;edge\u0026#34; yfiles.type=\u0026#34;edgegraphics\u0026#34;/\u0026gt; \u0026lt;graph id=\u0026#34;G\u0026#34; edgedefault=\u0026#34;directed\u0026#34;\u0026gt; \u0026lt;node id=\u0026#34;n0\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;220.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;_:n3747198576259004371\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;node id=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;130.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#FFFF99\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;lt;foaf:Person\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n2\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;60.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Luke\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n2\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n3\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;110.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Skywalker\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n3\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n4\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;190.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;23\u0026amp;#34;^^\u0026amp;lt;xsd:integer\u0026amp;gt;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n0\u0026#34; target=\u0026#34;n4\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:age\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n5\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;220.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#E1E1E1\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;_:n8285458617337724806\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n1\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;rdf:type\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n0\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:knows\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n6\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;60.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Leia\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n6\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:givenName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;node id=\u0026#34;n7\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;y:ShapeNode\u0026gt; \u0026lt;y:Geometry x=\u0026#34;170.5\u0026#34; y=\u0026#34;-15.0\u0026#34; width=\u0026#34;80.0\u0026#34; height=\u0026#34;30.0\u0026#34;/\u0026gt; \u0026lt;y:Fill color=\u0026#34;#CCFFCC\u0026#34; transparent=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;y:BorderStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:NodeLabel\u0026gt;\u0026amp;#34;Organa\u0026amp;#34;\u0026lt;/y:NodeLabel\u0026gt; \u0026lt;y:Shape type=\u0026#34;ellipse\u0026#34;/\u0026gt; \u0026lt;/y:ShapeNode\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/node\u0026gt; \u0026lt;edge source=\u0026#34;n5\u0026#34; target=\u0026#34;n7\u0026#34;\u0026gt;\u0026lt;data key=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;y:PolyLineEdge\u0026gt; \u0026lt;y:Path sx=\u0026#34;0.0\u0026#34; sy=\u0026#34;-15.0\u0026#34; tx=\u0026#34;29.5\u0026#34; ty=\u0026#34;0.0\u0026#34;\u0026gt; \u0026lt;y:Point x=\u0026#34;425.0\u0026#34; y=\u0026#34;0.0\u0026#34;/\u0026gt; \u0026lt;/y:Path\u0026gt; \u0026lt;y:LineStyle type=\u0026#34;line\u0026#34; width=\u0026#34;1.0\u0026#34; color=\u0026#34;#000000\u0026#34;/\u0026gt; \u0026lt;y:Arrows source=\u0026#34;none\u0026#34; target=\u0026#34;standard\u0026#34;/\u0026gt; \u0026lt;y:EdgeLabel alignment=\u0026#34;center\u0026#34; backgroundColor=\u0026#34;#FFFFFF\u0026#34; configuration=\u0026#34;AutoFlippingLabel\u0026#34; distance=\u0026#34;2.0\u0026#34; fontFamily=\u0026#34;Dialog\u0026#34; fontSize=\u0026#34;12\u0026#34; fontStyle=\u0026#34;plain\u0026#34; hasLineColor=\u0026#34;false\u0026#34; height=\u0026#34;17.96875\u0026#34; horizontalTextPosition=\u0026#34;center\u0026#34; iconTextGap=\u0026#34;4\u0026#34; modelName=\u0026#34;centered\u0026#34; preferredPlacement=\u0026#34;anywhere\u0026#34; ratio=\u0026#34;0.5\u0026#34; textColor=\u0026#34;#000000\u0026#34; verticalTextPosition=\u0026#34;bottom\u0026#34; visible=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;lt;foaf:familyName\u0026amp;gt;\u0026lt;/y:EdgeLabel\u0026gt; \u0026lt;y:BendStyle smoothed=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;/y:PolyLineEdge\u0026gt; \u0026lt;/data\u0026gt;\u0026lt;/edge\u0026gt; \u0026lt;/graph\u0026gt; \u0026lt;/graphml\u0026gt; JSON [ {\u0026#34;subject\u0026#34;:\u0026#34;_:n3747198576259004371\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n3747198576259004371\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Luke\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n3747198576259004371\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Skywalker\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n3747198576259004371\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:age\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\\u0026#34;23\\\u0026#34;^^\\u003cxsd:integer\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n8285458617337724806\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003crdf:type\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;\\u003cfoaf:Person\\u003e\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n8285458617337724806\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:knows\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;_:n3747198576259004371\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n8285458617337724806\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:givenName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Leia\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;}, {\u0026#34;subject\u0026#34;:\u0026#34;_:n8285458617337724806\u0026#34;,\u0026#34;predicate\u0026#34;:\u0026#34;\\u003cfoaf:familyName\\u003e\u0026#34;,\u0026#34;object\u0026#34;:\u0026#34;Organa\u0026#34;,\u0026#34;label\u0026#34;:\u0026#34;people\u0026#34;} ] n-quads _:n3747198576259004371 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n3747198576259004371 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Luke\u0026quot; \u0026quot;people\u0026quot; . _:n3747198576259004371 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Skywalker\u0026quot; \u0026quot;people\u0026quot; . _:n3747198576259004371 \u0026lt;foaf:age\u0026gt; \u0026quot;23\u0026quot;^^\u0026lt;xsd:integer\u0026gt; \u0026quot;people\u0026quot; . _:n8285458617337724806 \u0026lt;rdf:type\u0026gt; \u0026lt;foaf:Person\u0026gt; \u0026quot;people\u0026quot; . _:n8285458617337724806 \u0026lt;foaf:knows\u0026gt; _:n3747198576259004371 \u0026quot;people\u0026quot; . _:n8285458617337724806 \u0026lt;foaf:givenName\u0026gt; \u0026quot;Leia\u0026quot; \u0026quot;people\u0026quot; . _:n8285458617337724806 \u0026lt;foaf:familyName\u0026gt; \u0026quot;Organa\u0026quot; \u0026quot;people\u0026quot; .    Rendered Graphviz     Rendered yEd GraphML   "});index.add({'id':8,'href':'/cayley-cookbook/docs/working-with-cayley/stores/','title':"Stores",'section':"Working with Knowledge Graph",'content':"This section demonstrates the usage of stores and shows the internal representation of quads.\n"});index.add({'id':9,'href':'/cayley-cookbook/docs/cayley-overview/cayley-http/','title':"The `cayley http` command",'section':"Cayley Overview",'content':"The cayley http command #    Figure 1.: cayley http   "});index.add({'id':10,'href':'/cayley-cookbook/docs/cayley-overview/','title':"Cayley Overview",'section':"Docs",'content':"This section gives an overview about the elements of the Cayley ecosystem. It shortly summarizes how can we use the individual commands and elements, and where can we find documentation to them.\n"});index.add({'id':11,'href':'/cayley-cookbook/docs/working-with-cayley/impex/schema/','title':"Data import / export via struct annotation",'section':"Data import / export",'content':"Data import / export via struct annotation #  Structure annotations #  This section demonstrates how can we convert simple or complex objects and their properties to quads. it also shows how can we directly upload these data structures to the store, using the annotations placed into the struct declarations ob the objects. Moreover there are examples to the retrieval of these complex objects from the store.\nWithin this method it is much easier to store/retrieve complex data structures, than doing it directly with the quads that these data structures are made of, and collecting their properties one-by-one.\nCreate store #  In the examples we will use a simple in-memory store. We can start using such a store via calling the InitStore() function, that we can find in the store.go file.\nShow the source code of the `store.go` package kbase import ( \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;log\u0026#34; ) // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } return store }    Test data #  The bookmarks.yml file holds the test data in YAML format. it contains a list of bookmarks.\nWe will upload these bookmarks, then we will query them. The results of the queries will be retrieved via the help of struct annotations.\nShow the `bookmarks.yml` file - id: 9493efb9-be9a-4435-9b5d-f605fc9cddaa title: Gremlin\u0026#39;s Graph Traversal Machinery content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [gremlin, cayley, tinkerprop, gizmo, presentation, graph-db, query-language] urls: [\u0026#39;https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery\u0026#39;] - id: d6481271-d42d-487c-bec9-733ff383e029 title: Ontotext GraphDB content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [graphdb, nosql, knowledge-graph, linked-data, semantic-web, rdf] urls: [\u0026#39;https://ontotext.com/products/graphdb/\u0026#39;] - id: 058d41d5-6830-432b-8ebb-5733f8a2575b title: \u0026#39;Graphs and neural networks: Reading node properties\u0026#39; content: \u0026#34;\u0026#34; author: David Mack published: \u0026#34;\u0026#34; tags: [octavian-ai, graphs, neural-network, nlu, digital-assistant, dbms, brainputer, knowledge-graphs, graph-databases] urls: [\u0026#39;https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb\u0026#39;] - id: 324bacb5-8709-42b9-b38b-93755c48ef19 title: Towards building the next generation database query engine content: \u0026#34;\u0026#34; author: David Mack published: Nov 12, 2018 tags: [octavian-ai, graphs, neural-network, nlu, digital-assistant, dbms, brainputer, knowledge-graphs, graph-databases] urls: [\u0026#39;https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3\u0026#39;] - id: e0af0cdc-1795-482d-986e-96b08cc530f9 title: extracting-knowledge-from-knowledge-graphs content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [brainputer, pythorch, knowlendge-graph] urls: [\u0026#39;https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0\u0026#39;] - id: 2e75fc6a-148f-4016-a178-2a53a67e06c8 title: Platypus content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [knowledge-graph, wikidata, cognition, cui, platypus] urls: [\u0026#39;https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service\u0026#39;, \u0026#39;https://www.wikidata.org/wiki/Wikidata:Main_Page\u0026#39;, \u0026#39;https://hal.archives-ouvertes.fr/hal-01730479/document\u0026#39;] - id: 46721a5a-0eda-48f4-b190-b1c2544146a4 title: Grakn.AI - learn content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [grakn.ai, tutorials, blog, ai, inference-engine, knowledge-graph] urls: [\u0026#39;https://blog.grakn.ai/learn/home\u0026#39;] - id: 418b7162-fc1e-4dda-a6a5-80b9d4558f47 title: \u0026#39;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#39; content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [kagnet, cognitive-computating, python, graphs, networks, knowledge-graph, tools, commonsense, reasoning] urls: [\u0026#39;https://github.com/INK-USC/KagNet\u0026#39;] - id: a0b1b538-56e8-4fa9-a10b-be7c21ea2f90 title: Knowledge extraction from unstructured texts content: \u0026#34;\u0026#34; author: Heuritech published: \u0026#34;\u0026#34; tags: [lstm, knowledge-graph, text-extraction, konwledge-extraction, heuritech, semantics, universal-schema, triplet-extraction, word2vec] urls: [\u0026#39;https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f\u0026#39;] - id: 0b82f944-3f8c-4206-953e-a0d2d256dd60 title: Deep Learning with Knowledge Graphs content: \u0026#34;\u0026#34; author: Andrew Jefferson published: \u0026#34;\u0026#34; tags: [octavian, deep-neural-network, knowledge-graph, machine-learning, macgraph, brainputer] urls: [\u0026#39;https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a\u0026#39;] - id: e0d790fd-03de-4522-9ebc-3b931db52288 title: MacGraph content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [octavian, deep-neural-network, knowledge-graph, machine-learning, macgraph, brainputer, github, repository] urls: [\u0026#39;https://github.com/Octavian-ai/mac-graph\u0026#39;] - id: 17217149-1274-4ea4-a5f2-9bd48e6003c5 title: octavian.ai content: | We research new approaches to machine reasoning and graph-based learning. We\u0026#39;re working to build machines that can answer useful questions, using neural reasoning and knowledge graphs. We write articles, give talks and host workshops about our work. We\u0026#39;re an open-source research organization and welcome you to join us and contribute. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [octavian, machine-learning, open-source, research, graph, knowledge-graph, macgraph, brainputer] urls: [\u0026#39;https://www.octavian.ai/\u0026#39;] - id: 955d0202-d259-46c7-b71b-eb2434da2058 title: Build your own Knowledge Graph From unstructured dark data to valuable business insights content: \u0026#34;\u0026#34; author: Ignaz Wanders published: \u0026#34;\u0026#34; tags: [knowledge-graph, ai, machine-learning, ml, neo4j] urls: [\u0026#39;https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f\u0026#39;] - id: b34b66d4-81d2-4449-a049-4cb29fdc8f75 title: Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph. content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [knowledge-graph, kg, ai, graphs, facebook, pytorch, biggraph] urls: [\u0026#39;https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0\u0026#39;] - id: af631947-2a60-4ce6-a1a9-0b7ab88b9cfb title: Deep Learning with Knowledge Graphs content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [deep-learning, ml, machine-learning, knowledge-graph, ai] urls: [\u0026#39;https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a\u0026#39;] - id: f020ade1-4824-4c47-95c4-527c49fe2406 title: Knowledge Graphs in Natural Language Processing @ ACL 2020 content: State of the Art Mid 2020 author: Michael Galkin published: Jul 10, 2020 tags: [ai, kg, knowledge-graphs, nlp, acl] urls: [\u0026#39;https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1\u0026#39;] - id: a45c3713-89a4-44eb-947b-d0720d8ff9f4 title: Blog-Rolling-with-BrightstarDB-Express-and-Node-js content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [brightstardb, rdf, triple-store, nodejs, .net, database] urls: [\u0026#39;https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#39;, \u0026#39;http://brightstardb.com/\u0026#39;] - id: fba5c188-4c20-4cc3-aa99-720662d58ab8 title: FOAF Vocabulary Specification 0.99 content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [foaf, vocabulary, rdf] urls: [\u0026#39;http://xmlns.com/foaf/spec/\u0026#39;] - id: 8193a8a4-ae32-4867-924b-ecc9b856cad3 title: SuperMemo Website content: | SuperMemo is a program that keeps track of discrete bits of information you\u0026#39;ve learned and want to retain. SuperMemo tracks this so-called forgetting curve and reminds you to rehearse your knowledge when your chance of recalling it has dropped to, say, 90 percent. When you first learn a new vocabulary word, your chance of recalling it will drop quickly. But after SuperMemo reminds you of the word, the rate of forgetting levels out. The program tracks this new decline and waits longer to quiz you the next time. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [memory, learning, wozniak, brainputer, supermemo] urls: [\u0026#39;https://www.supermemo.com/en/archives1990-2015/articles/devour\u0026#39;] - id: 1d96dd4d-c30e-45a7-8f44-38dfb9a697f2 title: Gellish.net content: Gellish is a standard language, methodology and tools for expressing information in a computer interpretable and system independent way. It enables exchange and integration of data among systems of multiple parties without the need for data conversions. author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [dictionary, gellish.net, gellish, nlp, cognitive-computing, electronic-dictionary, open-source, semantic-web, brainputer, robotics] urls: [\u0026#39;https://www.gellish.net/\u0026#39;] - id: bdd898dc-76de-4a41-86b1-8757aff5fe6c title: Semantic Web and Model-Driven Engineering content: Too theoretical author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [architecture, system-design, ddd, domain-driven-design, soo-poc, semantic-web] urls: [\u0026#39;http://www.allitebooks.org/semantic-web-and-model-driven-engineering/\u0026#39;] - id: 1deb716d-4ca8-4834-a771-7c68e8844067 title: MRD, Machine Readable dictionary content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [mrd, dictionary, nlp, cognitive-computing] urls: [\u0026#39;https://en.wikipedia.org/wiki/Machine-readable_dictionary\u0026#39;] - id: 9493efb9-be9a-4435-9b5d-f605fc9cddaa title: Gremlin\u0026#39;s Graph Traversal Machinery content: \u0026#34;\u0026#34; author: \u0026#34;\u0026#34; published: \u0026#34;\u0026#34; tags: [gremlin, cayley, tinkerprop, gizmo, presentation, graph-db, query-language] urls: [\u0026#39;https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery\u0026#39;]    In the yaml.go file, there is the ReadFromYaml() function, that we will use to read the data in.\nThe yaml.go contains two relevant functions:\n The ReadFromYaml() reads data in from YAML files, the SaveToYaml() saves data into a YAML format file.  Show the `yaml.go` file package impex import ( \u0026#34;gopkg.in/yaml.v2\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;log\u0026#34; path \u0026#34;path/filepath\u0026#34; ) // Read YAML file and unmarshal its content into the `dst` data structure, // using the `yaml` annotation of the structs. func ReadFromYaml(yamlPath string, dst interface{}) error { absPath, err := path.Abs(yamlPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } buf, err := ioutil.ReadFile(absPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } err = yaml.Unmarshal([]byte(buf), dst) if err != nil { log.Printf(\u0026#34;YAML unmarshal error: %v\u0026#34;, err) return err } return nil } // Marshal the content from the `dst` data structure, and savel into a YAML file // using the `yaml` annotation of the structs. func SaveToYaml(yamlPath string, src interface{}) error { buf, err := yaml.Marshal(src) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } absPath, err := path.Abs(yamlPath) if err != nil { log.Printf(\u0026#34;%s\u0026#34;, err) return err } return ioutil.WriteFile(absPath, buf, 0644) }    Define structures with annotations #  The description of the bookmark objects, and their schema annotations are placed into the bookmarks.go file, as well as the functions to import and export these objects.\nShow the `bookmarks.go` file package main import ( \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/cayley/graph\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/impex\u0026#34; \u0026#34;log\u0026#34; ) type Bookmarks []Bookmark type Bookmark struct { ID quad.IRI `yaml:\u0026#34;id\u0026#34; quad:\u0026#34;id\u0026#34;` Title string `yaml:\u0026#34;title\u0026#34; quad:\u0026#34;title\u0026#34;` Content string `yaml:\u0026#34;content\u0026#34; quad:\u0026#34;content,optional\u0026#34;` Author string `yaml:\u0026#34;author\u0026#34; quad:\u0026#34;author,optional\u0026#34;` Published string `yaml:\u0026#34;published\u0026#34; quad:\u0026#34;published,optional\u0026#34;` Tags []string `yaml:\u0026#34;tags,flow\u0026#34; quad:\u0026#34;tags\u0026#34;` Urls []string `yaml:\u0026#34;urls,flow\u0026#34; quad:\u0026#34;urls\u0026#34;` } type BookmarkShort struct { ID quad.IRI `yaml:\u0026#34;id\u0026#34; quad:\u0026#34;id\u0026#34;` Title string `yaml:\u0026#34;title\u0026#34; quad:\u0026#34;title\u0026#34;` Urls []string `yaml:\u0026#34;urls,flow\u0026#34; quad:\u0026#34;urls\u0026#34;` } func init() { schema.RegisterType(\u0026#34;Bookmark\u0026#34;, Bookmark{}) schema.RegisterType(\u0026#34;BookmarkShort\u0026#34;, BookmarkShort{}) } func Import(store *cayley.Handle, dbPath string) { var bm Bookmarks impex.ReadFromYaml(dbPath, \u0026amp;bm) qw := graph.NewWriter(store) defer qw.Close() // don\u0026#39;t forget to close a writer; it has some internal buffering \tfor _, b := range bm { _, err := schema.WriteAsQuads(qw, b) if err != nil { log.Fatalf(\u0026#34;%v\u0026#34;, err) } } } func GetAllShortBookmarks(store *cayley.Handle) (Bookmarks, error) { var bms Bookmarks //p := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)) \tp := cayley.StartPath(store, quad.IRI(\u0026#34;Bookmark\u0026#34;)).In(quad.IRI(\u0026#34;rdf:type\u0026#34;)) schemaConfig := schema.NewConfig() err := p.Iterate(context.Background()).EachValuePair(nil, func(ref graph.Ref, value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) //log.Printf(\u0026#34;%v, %v, %v\\n\u0026#34;, reflect.TypeOf(ref), ref.Key(), b) \tbms = append(bms, b) }) if err != nil { log.Printf(\u0026#34;%v\u0026#34;, err) return nil, err } return bms, nil } func GetAllBookmarks(store *cayley.Handle) (Bookmarks, error) { var bms Bookmarks p := cayley.StartPath(store, quad.IRI(\u0026#34;Bookmark\u0026#34;)).In(quad.IRI(\u0026#34;rdf:type\u0026#34;)) schemaConfig := schema.NewConfig() err := p.Iterate(context.Background()).EachValuePair(nil, func(ref graph.Ref, value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) if err != nil { log.Printf(\u0026#34;%v\u0026#34;, err) return nil, err } return bms, nil } func FindBookmarksByAnyTag(store *cayley.Handle, tags []quad.Value) (Bookmarks, error) { schemaConfig := schema.NewConfig() var bms Bookmarks p := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)).Has(quad.IRI(\u0026#34;tags\u0026#34;), tags...) err := p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) return bms, err } func FindBookmarksByEveryTag(store *cayley.Handle, tags []quad.Value) (Bookmarks, error) { schemaConfig := schema.NewConfig() var bms Bookmarks bookmarksMorph := cayley.StartPath(store).Has(quad.IRI(\u0026#34;rdf:type\u0026#34;), quad.IRI(\u0026#34;Bookmark\u0026#34;)) p := bookmarksMorph for _, t := range tags { p = cayley.StartPath(store).Follow(p).Has(quad.IRI(\u0026#34;tags\u0026#34;), t) } err := p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { var b Bookmark schemaConfig.LoadTo(context.Background(), store, \u0026amp;b, value) bms = append(bms, b) }) return bms, err }    In the source code there are two structures defined:\n The Bookmark which is the full variant, ant the BookmarkShort which is a simplified variant.  In the struct declaration we placed the annotations to the yaml and quad serialization/deserialization. So these annotations can be used for both formats.\nData import based on annotated structures #  First we read the data into a []Bookmarks variable, then upload it into the store. For the uploading, we use the schema.WriteAsQuads() that is defined in the \u0026quot;github.com/cayleygraph/cayley/schema\u0026quot; package-ben, as we can see in the example in the import_bookmarks_with_schema.go file.\nShow the `import_bookmarks_with_schema.go` file package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; uuid \u0026#34;github.com/satori/go.uuid\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase\u0026#34; ) const bookmarksFixtures = \u0026#34;./bookmarks.yml\u0026#34; func init() { schema.GenerateID = func(o interface{}) quad.Value { switch o.(type) { case Bookmark: return quad.IRI(o.(Bookmark).ID) default: return quad.IRI(uuid.NewV4().String()) } } } func main() { ImportBookmarksWithSchema() } func ImportBookmarksWithSchema() { // Create an in-memory store \tstore := kbase.InitStore() // Load Bookmarks from YAML and upload into the mem-store \tImport(store, bookmarksFixtures) // Check if Bookmarks have been uploaded \tstats, err := store.Stats(context.Background(), true) if err != nil { panic(err) } else { fmt.Printf(\u0026#34;Successfully imported bookmarks into the mem-store as %d nodes and %d quads.\\n\u0026#34;, stats.Nodes.Size, stats.Quads.Size) } }    Run the program: \ncd schema go run impex_bookmarks_with_schema.go yamlImpex.go store.go bookmarks.go The results:\nSuccessfully imported bookmarks into the mem-store as 176 nodes and 245 quads. Data export based on annotated structures #  The export operation begins similarly to the import operation. First we read the data in from the YAML file, then we upload it into the store.\nThe we retrieve all the Bookmarks from the store within the following two functions:\n The GetAllBookmarks() function will show the results with full details, the GetAllShortBookmarks() will show the simplified version.  Both functions are implemented in the bookmarks.go file, and they use the schemaConfig.LoadTo() method to collect the properties of the resulted objects. In order to call this method, first we need to create a schemaConfig object, using the schema.NewConfig() function.\nShow the `impex_bookmarks_with_schema.go` file package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/cayley/schema\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; uuid \u0026#34;github.com/satori/go.uuid\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase\u0026#34; ) const bookmarksFixtures = \u0026#34;./bookmarks.yml\u0026#34; func init() { schema.GenerateID = func(o interface{}) quad.Value { switch o.(type) { case Bookmark: return quad.IRI(o.(Bookmark).ID) default: return quad.IRI(uuid.NewV4().String()) } } } func main() { // Create an in-memory store \tstore := kbase.InitStore() // Import bookmarks data from yaml using the `Bookmark` schema \tImportBookmarksWithSchema(store) // Find all Bookmarks, and convert to and array of object using `Bookmark` schema. \tbookmarks, _ := GetAllBookmarks(store) printBookmarks(bookmarks) // Find all Bookmarks, and convert to and array of object using `ShortBookmark` schema. \tshortBookmarks, _ := GetAllShortBookmarks(store) printShortBookmarks(shortBookmarks) } func ImportBookmarksWithSchema(store *cayley.Handle) { // Load Bookmarks from YAML and upload into the mem-store \tImport(store, bookmarksFixtures) // Check if Bookmarks have been uploaded \t_, err := store.Stats(context.Background(), true) if err != nil { panic(err) } else { fmt.Printf(\u0026#34;Successfully imported bookmarks into the mem-store.\\n\u0026#34;) } } func printBookmarks(bookmarks Bookmarks) { fmt.Println(\u0026#34;\\nFull Bookmarks:\u0026#34;) for _, bookmark := range bookmarks { if bookmark.Author == \u0026#34;\u0026#34; { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, bookmark.Title) } else { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34; by %s\\n\\n\u0026#34;, bookmark.Title, bookmark.Author) } fmt.Printf(\u0026#34; %s\\n\\n\u0026#34;, bookmark.Urls[0]) } } func printShortBookmarks(bookmarks Bookmarks) { fmt.Println(\u0026#34;\\nShort Bookmarks:\u0026#34;) for _, bookmark := range bookmarks { fmt.Printf(\u0026#34;- \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, bookmark.Title) fmt.Printf(\u0026#34; %s\\n\\n\u0026#34;, bookmark.Urls[0]) } }    Run the program: \ncd schema go run impex_bookmarks_with_schema.go yamlImpex.go store.go bookmarks.go The results:\nShow the results Successfully imported bookmarks into the mem-store. Full Bookmarks: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery - \u0026#34;Ontotext GraphDB\u0026#34; https://ontotext.com/products/graphdb/ - \u0026#34;Graphs and neural networks: Reading node properties\u0026#34; by David Mack https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb - \u0026#34;Towards building the next generation database query engine\u0026#34; by David Mack https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3 - \u0026#34;extracting-knowledge-from-knowledge-graphs\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Platypus\u0026#34; https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service - \u0026#34;Grakn.AI - learn\u0026#34; https://blog.grakn.ai/learn/home - \u0026#34;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#34; https://github.com/INK-USC/KagNet - \u0026#34;Knowledge extraction from unstructured texts\u0026#34; by Heuritech https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; by Andrew Jefferson https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;MacGraph\u0026#34; https://github.com/Octavian-ai/mac-graph - \u0026#34;octavian.ai\u0026#34; https://www.octavian.ai/ - \u0026#34;Build your own Knowledge Graph From unstructured dark data to valuable business insights\u0026#34; by Ignaz Wanders https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f - \u0026#34;Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph.\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;Knowledge Graphs in Natural Language Processing @ ACL 2020\u0026#34; by Michael Galkin https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1 - \u0026#34;Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#34; https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js - \u0026#34;FOAF Vocabulary Specification 0.99\u0026#34; http://xmlns.com/foaf/spec/ - \u0026#34;SuperMemo Website\u0026#34; https://www.supermemo.com/en/archives1990-2015/articles/devour - \u0026#34;Gellish.net\u0026#34; https://www.gellish.net/ - \u0026#34;Semantic Web and Model-Driven Engineering\u0026#34; http://www.allitebooks.org/semantic-web-and-model-driven-engineering/ - \u0026#34;MRD, Machine Readable dictionary\u0026#34; https://en.wikipedia.org/wiki/Machine-readable_dictionary Short Bookmarks: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery - \u0026#34;Ontotext GraphDB\u0026#34; https://ontotext.com/products/graphdb/ - \u0026#34;Graphs and neural networks: Reading node properties\u0026#34; https://medium.com/octavian-ai/graphs-and-neural-networks-reading-node-properties-2c91625980eb - \u0026#34;Towards building the next generation database query engine\u0026#34; https://medium.com/octavian-ai/towards-building-the-next-generation-database-query-engine-a1beca1e07a3 - \u0026#34;extracting-knowledge-from-knowledge-graphs\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Platypus\u0026#34; https://www.wikidata.org/wiki/Wikidata:SPARQL_query_service/A_gentle_introduction_to_the_Wikidata_Query_Service - \u0026#34;Grakn.AI - learn\u0026#34; https://blog.grakn.ai/learn/home - \u0026#34;KagNet: Knowledge-Aware Graph Networks for Commonsense Reasoning\u0026#34; https://github.com/INK-USC/KagNet - \u0026#34;Knowledge extraction from unstructured texts\u0026#34; https://medium.com/heuritech/knowledge-extraction-from-unstructured-texts-c279e3b8f92f - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;MacGraph\u0026#34; https://github.com/Octavian-ai/mac-graph - \u0026#34;octavian.ai\u0026#34; https://www.octavian.ai/ - \u0026#34;Build your own Knowledge Graph From unstructured dark data to valuable business insights\u0026#34; https://medium.com/vectrconsulting/build-your-own-knowledge-graph-975cf6dde67f - \u0026#34;Extracting knowledge from knowledge graphs using Facebook Pytorch BigGraph.\u0026#34; https://towardsdatascience.com/extracting-knowledge-from-knowledge-graphs-e5521e4861a0 - \u0026#34;Deep Learning with Knowledge Graphs\u0026#34; https://medium.com/octavian-ai/deep-learning-with-knowledge-graphs-3df0b469a61a - \u0026#34;Knowledge Graphs in Natural Language Processing @ ACL 2020\u0026#34; https://towardsdatascience.com/knowledge-graphs-in-natural-language-processing-acl-2020-ebb1f0a6e0b1 - \u0026#34;Blog-Rolling-with-BrightstarDB-Express-and-Node-js\u0026#34; https://www.codeproject.com/Articles/419181/Blog-Rolling-with-BrightstarDB-Express-and-Node-js - \u0026#34;FOAF Vocabulary Specification 0.99\u0026#34; http://xmlns.com/foaf/spec/ - \u0026#34;SuperMemo Website\u0026#34; https://www.supermemo.com/en/archives1990-2015/articles/devour - \u0026#34;Gellish.net\u0026#34; https://www.gellish.net/ - \u0026#34;Semantic Web and Model-Driven Engineering\u0026#34; http://www.allitebooks.org/semantic-web-and-model-driven-engineering/ - \u0026#34;MRD, Machine Readable dictionary\u0026#34; https://en.wikipedia.org/wiki/Machine-readable_dictionary     Related pages: "});index.add({'id':12,'href':'/cayley-cookbook/docs/working-with-cayley/queries/find_all_predicates/','title':"Find All Predicates",'section':"Queries",'content':"Find All Predicates #  Problem #  How can I list all the predicates used in the graph?\nTest Data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format \u0026lt;alice\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;bob\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;bob\u0026gt; . \u0026lt;charlie\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;dani\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;dani\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;emily\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;fred\u0026gt; . \u0026lt;fred\u0026gt; \u0026lt;follows\u0026gt; \u0026lt;greg\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;cool_person\u0026#34; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;follows\u0026gt; . \u0026lt;predicates\u0026gt; \u0026lt;are\u0026gt; \u0026lt;status\u0026gt; . \u0026lt;emily\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; . \u0026lt;greg\u0026gt; \u0026lt;status\u0026gt; \u0026#34;smart_person\u0026#34; \u0026lt;smart_graph\u0026gt; .    Gizmo Query #  // Find all predicates g.V().OutPredicates().Union(g.V().InPredicates()).Unique().All(); Results:\n{\u0026#34;id\u0026#34;:\u0026#34;follows\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;status\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;are\u0026#34;} "});index.add({'id':13,'href':'/cayley-cookbook/docs/working-with-cayley/stores/make-quads/','title':"Make Quads",'section':"Stores",'content':"Make Quads #  Problem #  How can I crate new quads?\nCreate Quads #  package main import ( \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally \tluke := quad.RandomBlankNode() leia := quad.IRI(\u0026#34;starwars:leia_organa\u0026#34;) //quad.RandomBlankNode()  // Create Quads about to export \tlabel := \u0026#34;people\u0026#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Organa\u0026#34;, label)) return quads } "});index.add({'id':14,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/register-namespace/','title':"Register a New Namespace",'section':"Namespaces and Vocabularies",'content':"Register a New Namespace #  The next code registers a new namespace:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; // Add built-in vocabulary \t_ \u0026#34;github.com/cayleygraph/quad/voc/rdfs\u0026#34; // Add own vocabulary \t_ \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func init() { // Register a new namespace with prefix \tvoc.RegisterPrefix(`acc:`, `http://mycompany.com/voc/accounting#`) } func main() { fmt.Println(\u0026#34;Registered namespaces:\u0026#34;) for _, v := range voc.List() { fmt.Printf(\u0026#34; %s =\u0026gt; %s\\n\u0026#34;, v.Prefix, v.Full) } } \ncd namespaces go run register_namespace.go The results:\nRegistered namespaces: rdfs: =\u0026gt; http://www.w3.org/2000/01/rdf-schema#  foaf: =\u0026gt; http://xmlns.com/foaf/0.1/#  acc: =\u0026gt; http://mycompany.com/voc/accounting#  "});index.add({'id':15,'href':'/cayley-cookbook/docs/basic-concepts/resources/','title':"Resources",'section':"Basic Concepts",'content':"Resources #  "});index.add({'id':16,'href':'/cayley-cookbook/docs/cayley-overview/cayley-convert/','title':"The `cayley convert` command",'section':"Cayley Overview",'content':"The cayley convert command #    Figure 2.: cayley convert   "});index.add({'id':17,'href':'/cayley-cookbook/docs/working-with-cayley/queries/bidirectional/','title':"Bi-directional Relations",'section':"Queries",'content':"Bi-directional Relations #  Problem #  If I have a graph: A \u0026lt;-1-\u0026gt; B \u0026lt;-2-\u0026gt; C where A, B, C are subjects and objects linked with predicates 1, 2 (bidirectional). How can I get C using a path?\nTest data #    Fig 1.: Graph diagram of test data   Show the test data in nquads format \u0026lt;A\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;B\u0026gt; . \u0026lt;B\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;A\u0026gt; . \u0026lt;B\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;C\u0026gt; . \u0026lt;C\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;B\u0026gt; . \u0026lt;A1\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;B1\u0026gt; . \u0026lt;B1\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;A1\u0026gt; . \u0026lt;B1\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;C1\u0026gt; . \u0026lt;C1\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;B1\u0026gt; . \u0026lt;A2\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;B2\u0026gt; . \u0026lt;B2\u0026gt; \u0026lt;predicate-1\u0026gt; \u0026lt;A2\u0026gt; . \u0026lt;B2\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;C2\u0026gt; . \u0026lt;C2\u0026gt; \u0026lt;predicate-2\u0026gt; \u0026lt;B2\u0026gt; .    Gizmo Query #  Simple query #  g.V().Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Tag(\u0026#39;target\u0026#39;).Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;).All() Results:\n{\u0026#34;id\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C1\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C2\u0026#34;} Query with morphism #  // with morphism forth = g.V().Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Tag(\u0026#34;target\u0026#34;); back = g.M().Out(\u0026#34;\u0026lt;predicate-2\u0026gt;\u0026#34;).Out(\u0026#34;\u0026lt;predicate-1\u0026gt;\u0026#34;) forth.Follow(back).All() Results:\n{\u0026#34;id\u0026#34;:\u0026#34;A\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A1\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C1\u0026#34;} {\u0026#34;id\u0026#34;:\u0026#34;A2\u0026#34;,\u0026#34;target\u0026#34;:\u0026#34;C2\u0026#34;} Golang Implementation #  Show the source code package main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; \u0026#34;github.com/cayleygraph/quad\u0026#34; ) func main() { // Create an in-memory store \tstore := InitStore() // Create Quads and uploads to the store \tquads := makeQuads() AddQuadsToStore(store, quads) // Execute the query \tdoQuery(store) } // Create a mem-store for testing func InitStore() *cayley.Handle { store, err := cayley.NewMemoryGraph() if err != nil { panic(err) } return store } func makeQuads() []quad.Quad { quads := []quad.Quad{} quads = append(quads, quad.Make(\u0026#34;A\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;C\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;A1\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;B1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B1\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;A1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;C1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;C1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;B1\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;A2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;B2\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;A2\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;B2\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;C2\u0026#34;, \u0026#34;\u0026#34;)) quads = append(quads, quad.Make(\u0026#34;C2\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;B2\u0026#34;, \u0026#34;\u0026#34;)) return quads } func AddQuadsToStore(store *cayley.Handle, quads []quad.Quad) { for _, q := range quads { store.AddQuad(q) } } func doQuery(store *cayley.Handle) { p := cayley.StartPath(store).Out(\u0026#34;1\u0026#34;).Out(\u0026#34;2\u0026#34;).Tag(\u0026#34;target\u0026#34;).Out(\u0026#34;2\u0026#34;).Out(\u0026#34;1\u0026#34;) p.Iterate(context.Background()).EachValue(nil, func(value quad.Value) { fmt.Printf(\u0026#34;%v\\n\u0026#34;, value) }) p.Iterate(context.Background()).TagValues(store, func(t map[string]quad.Value) { fmt.Printf(\u0026#34;%v\\n\u0026#34;, t) }) }    Results:\n\u0026#34;A\u0026#34; \u0026#34;A1\u0026#34; \u0026#34;A2\u0026#34; map[target:\u0026#34;C\u0026#34;] map[target:\u0026#34;C1\u0026#34;] map[target:\u0026#34;C2\u0026#34;] "});index.add({'id':18,'href':'/cayley-cookbook/docs/working-with-cayley/ns-voc/vocabularies/','title':"Create a New Vocabulary",'section':"Namespaces and Vocabularies",'content':"Create a New Vocabulary #  The following code demonstrates how can a new vocabulary be defined. The foaf.go package defines the most frequently used terms of the FOAF Vocabulary Specification. This package is used by several other examples of the cookbook as a vocabulary to use some terms as predicates.\n// Package foaf contains constants of the FOAF Concepts Vocabulary (RDF) package foaf import \u0026#34;github.com/cayleygraph/quad/voc\u0026#34; func init() { voc.RegisterPrefix(Prefix, NS) } const ( NS = `http://xmlns.com/foaf/0.1/#` Prefix = `foaf:` ) const ( // Core  // An agent (eg. person, group, software or physical artifact).  Agent = Prefix + `Agent` // A person.  Person = Prefix + `Person` // A name for some thing.  Name = Prefix + `name` // Title (Mr, Mrs, Ms, Dr. etc)  Title = Prefix + `title` // An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one\u0026#39;s photo on a homepage).  Img = Prefix + `img` // A thing depicted in this representation.  Depiction = Prefix + `depiction` Depicts = Prefix + `depicts` // The family name of some person.  FamilyName = Prefix + `familyName` // The first name of some person.  GivenName = Prefix + `givenName` // The gender of this Agent (typically but not necessarily \u0026#39;male\u0026#39; or \u0026#39;female\u0026#39;).  Gender = Prefix + `gender` // A person known by this person (indicating some level of reciprocated interaction between the parties).  Knows = Prefix + `knows` // A location that something is based near, for some broadly human notion of near.  BasedNear = Prefix + `based_near` // The age in years of some agent.  Age = Prefix + `age` // The birthday of this Agent, represented in mm-dd string form, eg. \u0026#39;12-31\u0026#39;.  Birthday = Prefix + `birthday` // Something that was made by this agent.  Made = Prefix + `made` PrimaryTopic = Prefix + `primaryTopic (primaryTopicOf)` // A project (a collective endeavour of some kind).  Project = Prefix + `Project` // An organization.  Organization = Prefix + `Organization` // A class of Agents.  Group = Prefix + `Group` // A string expressing what the user is happy for the general public (normally) to know about their current activity.  Status = Prefix + `status` // Indicates a member of a Group  Member = Prefix + `member` // A document.  Document = Prefix + `Document` // An image.  Image = Prefix + `Image` // SocialWeb  // A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).  Nick = Prefix + `nick` // A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox.  Mbox = Prefix + `mbox` // A homepage for some thing.  Homepage = Prefix + `homepage` // A weblog of some thing (whether person, group, company etc.).  Weblog = Prefix + `weblog` // An OpenID for an Agent.  Openid = Prefix + `openid` // A jabber ID for something.  JabberID = Prefix + `jabberID` // sha1sum of a personal mailbox URI name - The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.  MboxSha1sum = Prefix + `mbox_sha1sum` // A page about a topic of interest to this person.  Interest = Prefix + `interest` // A thing of interest to this person.  TopicInterest = Prefix + `topic_interest` // A topic of some page or document.  Topic = Prefix + `topic` // A workplace homepage of some person; the homepage of an organization they work for.  WorkplaceHomepage = Prefix + `workplaceHomepage` // A work info homepage of some person; a page about their work for some organization.  WorkInfoHomepage = Prefix + `workInfoHomepage` // A homepage of a school attended by the person.  SchoolHomepage = Prefix + `schoolHomepage` // A link to the publications of this person.  Publications = Prefix + `publications` // A current project this person works on.  CurrentProject = Prefix + `currentProject` // A project this person has previously worked on.  PastProject = Prefix + `pastProject` // Indicates an account held by this agent.  Account = Prefix + `account` // An online account  OnlineAccount = Prefix + `OnlineAccount` // Indicates the name (identifier) associated with this online account.  AccountName = Prefix + `accountName` // Indicates a homepage of the service provide for this online account.  AccountServiceHomepage = Prefix + `accountServiceHomepage` // A personal profile RDF document  PersonalProfileDocument = Prefix + `PersonalProfileDocument` // A tipjar document for this agent, describing means for payment and reward.  Tipjar = Prefix + `tipjar` // A sha1sum hash, in hex.  Sha1 = Prefix + `sha1` // A derived thumbnail image.  Thumbnail = Prefix + `thumbnail` // A logo representing some thing.  Logo = Prefix + `logo` )  Related pages:   Vocabularies   "});index.add({'id':19,'href':'/cayley-cookbook/docs/working-with-cayley/impex/','title':"Data import / export",'section':"Working with Knowledge Graph",'content':"Data import / export #  This section demonstrates how to import and export simple quads and complex data structures.\n"});index.add({'id':20,'href':'/cayley-cookbook/docs/working-with-cayley/stores/print-all-nodes/','title':"List all nodes from store",'section':"Stores",'content':"List all nodes from store #  Problem #  How can I retrieve and print all nodes from the store?\nTest Data #  package main import ( \u0026#34;github.com/cayleygraph/quad\u0026#34; // Add some predefined vocabularies \t\u0026#34;github.com/cayleygraph/quad/voc/rdf\u0026#34; \u0026#34;github.com/tombenke/cayley-cookbook-src/kbase/voc/foaf\u0026#34; ) func makeQuads() []quad.Quad { // Generate Blank Nodes to represent the people internally \tluke := quad.RandomBlankNode() leia := quad.IRI(\u0026#34;starwars:leia_organa\u0026#34;) //quad.RandomBlankNode()  // Create Quads about to export \tlabel := \u0026#34;people\u0026#34; quads := []quad.Quad{} quads = append(quads, quad.Make(luke, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.GivenName), \u0026#34;Luke\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.FamilyName), \u0026#34;Skywalker\u0026#34;, label)) quads = append(quads, quad.Make(luke, quad.IRI(foaf.Age), 23, label)) quads = append(quads, quad.Make(leia, quad.IRI(rdf.Type), quad.IRI(foaf.Person), label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.Knows), luke, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.GivenName), \u0026#34;Leia\u0026#34;, label)) quads = append(quads, quad.Make(leia, quad.IRI(foaf.FamilyName), \u0026#34;Organa\u0026#34;, label)) return quads } Retrieve and list all nodes from the store: #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllNodes(store) } func printAllNodes(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.NodesAllIterator() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it)) for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Println() } } Results:\nMemStoreAll *memstore.AllIterator Ref: 1 memstore.bnode Key: 1 memstore.bnode Value: _:n1765057323137847970 quad.BNode Ref: 2 memstore.bnode Key: 2 memstore.bnode Value: \u0026lt;rdf:type\u0026gt; quad.IRI Ref: 3 memstore.bnode Key: 3 memstore.bnode Value: \u0026lt;foaf:Person\u0026gt; quad.IRI Ref: 4 memstore.bnode Key: 4 memstore.bnode Value: \u0026#34;people\u0026#34; quad.String Ref: 6 memstore.bnode Key: 6 memstore.bnode Value: \u0026lt;foaf:givenName\u0026gt; quad.IRI Ref: 7 memstore.bnode Key: 7 memstore.bnode Value: \u0026#34;Luke\u0026#34; quad.String Ref: 9 memstore.bnode Key: 9 memstore.bnode Value: \u0026lt;foaf:familyName\u0026gt; quad.IRI Ref: 10 memstore.bnode Key: 10 memstore.bnode Value: \u0026#34;Skywalker\u0026#34; quad.String Ref: 12 memstore.bnode Key: 12 memstore.bnode Value: \u0026lt;foaf:age\u0026gt; quad.IRI Ref: 13 memstore.bnode Key: 13 memstore.bnode Value: \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Int Ref: 15 memstore.bnode Key: 15 memstore.bnode Value: \u0026lt;starwars:leia_organa\u0026gt; quad.IRI Ref: 17 memstore.bnode Key: 17 memstore.bnode Value: \u0026lt;foaf:knows\u0026gt; quad.IRI Ref: 19 memstore.bnode Key: 19 memstore.bnode Value: \u0026#34;Leia\u0026#34; quad.String Ref: 21 memstore.bnode Key: 21 memstore.bnode Value: \u0026#34;Organa\u0026#34; quad.String "});index.add({'id':21,'href':'/cayley-cookbook/docs/basic-concepts/statements/','title':"Statements",'section':"Basic Concepts",'content':"Statements #  Statements or assertions\n Related pages: "});index.add({'id':22,'href':'/cayley-cookbook/docs/cayley-overview/cayley-repl/','title':"The `cayley repl` command",'section':"Cayley Overview",'content':"The cayley repl command #    Figure 3.: cayley repl   "});index.add({'id':23,'href':'/cayley-cookbook/docs/working-with-cayley/','title':"Working with Knowledge Graph",'section':"Docs",'content':"This chapter demonstrates how can we work with the Cayley Knowledge Graphs.\nThe individual examples, and use-cases try to demonstrate, how to use the several tools and capabilities of Cayley such as the Gizmo query language and the usage of built-in Go functions.\n"});index.add({'id':24,'href':'/cayley-cookbook/docs/working-with-cayley/stores/print-all-quads/','title':"List all quads from store",'section':"Stores",'content':"List all quads from store #  Problem #  How can I retrieve and print all quads from the store?\nRetrieve and list all quads from the store: #  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; \u0026#34;reflect\u0026#34; \u0026#34;context\u0026#34; \u0026#34;github.com/cayleygraph/cayley\u0026#34; ) func main() { // Create a brand new graph  store, err := cayley.NewMemoryGraph() if err != nil { log.Fatalln(err) } // Create Quads about some people using Blank Nodes as references  quads := makeQuads() // Add quads to the store  for _, q := range(quads) { store.AddQuad(q) } printAllQuads(store) } func printAllQuads(store *cayley.Handle) { // Get the iterator that enumerates all nodes in the graph.  it := store.QuadsAllIterator() //fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, it, reflect.TypeOf(it))  for it.Next(context.Background()) { ref := it.Result() key := ref.Key() value := store.NameOf(ref) quad := store.Quad(ref) fmt.Printf(\u0026#34;Ref: %v %v\\n\u0026#34;, ref, reflect.TypeOf(ref)) fmt.Printf(\u0026#34;Key: %v %v\\n\u0026#34;, key, reflect.TypeOf(key)) fmt.Printf(\u0026#34;Value: %v %v\\n\u0026#34;, value, reflect.TypeOf(value)) fmt.Printf(\u0026#34;Quad: %v %v\\n\u0026#34;, quad, reflect.TypeOf(quad)) fmt.Println() /* v := it.Result() fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, v, reflect.TypeOf(v)) fmt.Printf(\u0026#34;%v\\n\u0026#34;, v.Key()) name := store.NameOf(v) fmt.Printf(\u0026#34;%v %v\\n\u0026#34;, name, reflect.TypeOf(name)) q := store.Quad(v) fmt.Println(q) fmt.Println() */ } } Results:\nRef: {0xc00007a1c0} memstore.qprim Key: 5 int64 Value: _:memnode5 quad.BNode Quad: _:n8556615191054955488 -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007a3c0} memstore.qprim Key: 8 int64 Value: _:memnode8 quad.BNode Quad: _:n8556615191054955488 -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Luke\u0026#34; quad.Quad Ref: {0xc00007a500} memstore.qprim Key: 11 int64 Value: _:memnode11 quad.BNode Quad: _:n8556615191054955488 -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Skywalker\u0026#34; quad.Quad Ref: {0xc00007a640} memstore.qprim Key: 14 int64 Value: _:memnode14 quad.BNode Quad: _:n8556615191054955488 -- \u0026lt;foaf:age\u0026gt; -\u0026gt; \u0026#34;23\u0026#34;^^\u0026lt;xsd:integer\u0026gt; quad.Quad Ref: {0xc00007a740} memstore.qprim Key: 16 int64 Value: _:memnode16 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;rdf:type\u0026gt; -\u0026gt; \u0026lt;foaf:Person\u0026gt; quad.Quad Ref: {0xc00007a800} memstore.qprim Key: 18 int64 Value: _:memnode18 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:knows\u0026gt; -\u0026gt; _:n8556615191054955488 quad.Quad Ref: {0xc00007a900} memstore.qprim Key: 20 int64 Value: _:memnode20 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:givenName\u0026gt; -\u0026gt; \u0026#34;Leia\u0026#34; quad.Quad Ref: {0xc00007a9c0} memstore.qprim Key: 22 int64 Value: _:memnode22 quad.BNode Quad: \u0026lt;starwars:leia_organa\u0026gt; -- \u0026lt;foaf:familyName\u0026gt; -\u0026gt; \u0026#34;Organa\u0026#34; quad.Quad "});index.add({'id':25,'href':'/cayley-cookbook/docs/working-with-cayley/queries/','title':"Queries",'section':"Working with Knowledge Graph",'content':"This chapter demonstrates how to execute queries with Cayley .\n"});index.add({'id':26,'href':'/cayley-cookbook/docs/cayley-overview/cayley-query/','title':"The `cayley query` command",'section':"Cayley Overview",'content':"The cayley query command #    Figure 4.: cayley query   "});index.add({'id':27,'href':'/cayley-cookbook/docs/basic-concepts/vocabularies/','title':"Vocabularies",'section':"Basic Concepts",'content':"Vocabularies #   Related pages:   Create a New Vocabulary     List Registered Namespaces     Register a New Namespace   "});index.add({'id':28,'href':'/cayley-cookbook/docs/working-with-cayley/crud-operations/','title':"CRUD Operations",'section':"Working with Knowledge Graph",'content':"This section demonstrates how to execute the Create / Retrieve / Update / Delete (CRUD) operations on the knowledge-graph.\n"});index.add({'id':29,'href':'/cayley-cookbook/docs/basic-concepts/rdf-graphs/','title':"Rdf Graphs",'section':"Basic Concepts",'content':"Rdf Graphs #  "});index.add({'id':30,'href':'/cayley-cookbook/docs/working-with-cayley/stores/internals/','title':"The internal representation of nodes and quads",'section':"Stores",'content':"The internal representation of nodes and quads #    Figure 1.: Internal Representation   "});index.add({'id':31,'href':'/cayley-cookbook/docs/working-with-cayley/queries/bookmarks/','title':"Find bookmarks by tags",'section':"Queries",'content':"Find bookmarks by tags #  Run the program: \ncd schema go run find_bookmarks_by_tags.go yamlImpex.go store.go bookmarks.go The output of the program:\nShow the results Results of finding any of `nosql` or `gremlin` tags: - \u0026#34;Ontotext GraphDB\u0026#34; [graphdb nosql knowledge-graph linked-data semantic-web rdf] https://ontotext.com/products/graphdb/ - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery Results of finding every tags of `cayley` or `gremlin`: - \u0026#34;Gremlin\u0026#39;s Graph Traversal Machinery\u0026#34; [gremlin cayley tinkerprop gizmo presentation graph-db query-language] https://www.slideshare.net/slidarko/gremlins-graph-traversal-machinery    "});index.add({'id':32,'href':'/cayley-cookbook/docs/working-with-cayley/transactions/','title':"Transactions",'section':"Working with Knowledge Graph",'content':"This section demonstrates the execution of transactions.\n"});})();